###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      17/Jul/2017  16:17:53 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Potencia\Potencia.c                       #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Potencia\Potencia.c -lC                   #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\Potencia.lst                   #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\Potencia.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Potencia\Potencia.c
      1          /*__________________________________________________________________________________
      2          |	DEXTRO SOLUÇÕES TECNOLÓGICAS
      3          |       
      4          |       ITAJAÍ - SC
      5          |       www.dextro.ind.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by DEXTRO  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by DEXTRO 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da DEXTRO  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       DEXTRO  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Potencia.c
     18          |       Descrição          :  Biblioteca para o controle PID do 
     19          |                             motor universal
     20          | 
     21          |       Autor              :  Marcos Aquino
     22          |       Data criação       :  21/02/2017
     23          |
     24          |       Revisões           :  1.0.0.0
     25          |
     26          |
     27          | __________________________________________________________________________________
     28          */
     29          
     30          /***********************************************************************************
     31          *       Includes
     32          ***********************************************************************************/
     33          #include <stdio.h>
     34          #include <stdlib.h>
     35          #include <string.h>
     36          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0xe000e100
   \   __absolute union <unnamed> volatile _A_SETENA0
   \                     _A_SETENA0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000e280
   \   __absolute union <unnamed> volatile _A_CLRPEND0
   \                     _A_CLRPEND0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000e400
   \   __absolute union <unnamed> volatile _A_IP0
   \                     _A_IP0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc140
   \   __absolute union <unnamed> volatile _A_EXTINT
   \                     _A_EXTINT:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc148
   \   __absolute union <unnamed> volatile _A_EXTMODE
   \                     _A_EXTMODE:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc14c
   \   __absolute union <unnamed> volatile _A_EXTPOLAR
   \                     _A_EXTPOLAR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc1ac
   \   __absolute union <unnamed> volatile _A_PCLKSEL1
   \                     _A_PCLKSEL1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc0c4
   \   __absolute union <unnamed> volatile _A_PCONP
   \                     _A_PCONP:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c00c
   \   __absolute union <unnamed> volatile _A_PINSEL3
   \                     _A_PINSEL3:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c010
   \   __absolute union <unnamed> volatile _A_PINSEL4
   \                     _A_PINSEL4:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c020
   \   __absolute union <unnamed> volatile _A_FIO1DIR
   \                     _A_FIO1DIR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c038
   \   __absolute union <unnamed> volatile _A_FIO1SET
   \                     _A_FIO1SET:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c03c
   \   __absolute union <unnamed> volatile _A_FIO1CLR
   \                     _A_FIO1CLR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c040
   \   __absolute union <unnamed> volatile _A_FIO2DIR
   \                     _A_FIO2DIR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c058
   \   __absolute union <unnamed> volatile _A_FIO2SET
   \                     _A_FIO2SET:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c05c
   \   __absolute union <unnamed> volatile _A_FIO2CLR
   \                     _A_FIO2CLR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40008000
   \   __absolute union <unnamed> volatile _A_T1IR
   \                     _A_T1IR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40008004
   \   __absolute union <unnamed> volatile _A_T1TCR
   \                     _A_T1TCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4000800c
   \   __absolute unsigned long volatile T1PR
   \                     T1PR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40008028
   \   __absolute union <unnamed> volatile _A_T1CCR
   \                     _A_T1CCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4000802c
   \   __absolute unsigned long const volatile T1CR0
   \                     T1CR0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40008070
   \   __absolute union <unnamed> volatile _A_T1CTCR
   \                     _A_T1CTCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090000
   \   __absolute union <unnamed> volatile _A_T2IR
   \                     _A_T2IR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090004
   \   __absolute union <unnamed> volatile _A_T2TCR
   \                     _A_T2TCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090008
   \   __absolute unsigned long volatile T2TC
   \                     T2TC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009000c
   \   __absolute unsigned long volatile T2PR
   \                     T2PR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090014
   \   __absolute union <unnamed> volatile _A_T2MCR
   \                     _A_T2MCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090018
   \   __absolute unsigned long volatile T2MR0
   \                     T2MR0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009003c
   \   __absolute union <unnamed> volatile _A_T2EMR
   \                     _A_T2EMR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40090070
   \   __absolute union <unnamed> volatile _A_T2CTCR
   \                     _A_T2CTCR:
   \   00000000                      DS8 4
     37          #include "..\includes.h"
     38          #include "Potencia.h"
     39          
     40          #define FQ_REDE_60_HZ
     41          /***********************************************************************************
     42          *       Definições locais
     43          ***********************************************************************************/
     44          #define LIGA_NEUTRO_PIN                 (0x01)<<19
     45          #define INI_LIGA_NEUTRO_PIN()           FIO1DIR|=LIGA_NEUTRO_PIN
     46          #define SET_LIGA_NEUTRO_PIN(X)          X?(FIO1SET|=LIGA_NEUTRO_PIN):(FIO1CLR|=LIGA_NEUTRO_PIN)
     47          
     48          #define RELOAD_TIMEOUT_RRPM             1000  
     49          
     50          #define CLK                             96000000
     51          #define PR_TIMER                        300
     52          
     53          #define CONTROLE_RESISTENCIA            (0x01)<<2
     54          #define SSR                             (0x01)<<3
     55          
     56          #define INI_PINS                        FIO2DIR |= SSR | CONTROLE_RESISTENCIA;
     57          
     58          #define SET_SSR(X)                      X?(FIO2SET|=SSR):(FIO2CLR|=SSR)
     59          #define SET_RESISTENCIA(X)              X?(FIO2SET|=CONTROLE_RESISTENCIA):(FIO2CLR|=CONTROLE_RESISTENCIA)
     60          
     61          #define SET_ATRASO(X)                   {T2MR0 = T2TC+X; T2MCR_bit.MR0I = 1;}
     62          #define SET_ATRASO_RES(X)               {T2MR1 = T2TC+X; T2MCR_bit.MR1I = 1;}
     63          
     64          #define TAM_BUF_VELOCIDADE              2//8//16
     65          #define DIV_MEDIA_VEL                   1//4//4     
     66          
     67          /***********************************************************************************
     68          *       Ganhos do PID
     69          ***********************************************************************************/
     70          #ifdef FQ_REDE_60_HZ
     71            #define KP                                       4
     72            #define KI                                       0.2
     73            #define KD                                       0.2
     74          #else
     75            #define KP                                       4
     76            #define KI                                       0.2
     77            #define KD                                       0.2
     78          #endif
     79          
     80          #ifdef FQ_REDE_60_HZ
     81            #define ATRASO_MAXIMO                           2500
     82            #define ATRASO_MINIMO                           150
     83          #endif
     84          
     85          #ifdef FQ_REDE_50_HZ
     86            #define ATRASO_MAXIMO                           3100
     87            #define ATRASO_MINIMO                           300
     88          #endif
     89          
     90          /***********************************************************************************
     91          *       Constantes
     92          ***********************************************************************************/

   \                                 In section .rodata, align 4
     93          const unsigned int kp_const = KP*256;
   \                     kp_const:
   \   00000000   0x00000400         DC32 1024

   \                                 In section .rodata, align 4
     94          const unsigned int kd_const = KD*32768;
                                               ^
Warning[Pa092]: implicit conversion to integer does not preserve the value
   \                     kd_const:
   \   00000000   0x00001999         DC32 6553

   \                                 In section .rodata, align 4
     95          const unsigned int ki_const = KI*32768;
                                               ^
Warning[Pa092]: implicit conversion to integer does not preserve the value
   \                     ki_const:
   \   00000000   0x00001999         DC32 6553
     96          
     97          /***********************************************************************************
     98          *       Variaveis locais
     99          ***********************************************************************************/

   \                                 In section .bss, align 4
    100          unsigned int POTENCIA_ciclos=0;
   \                     POTENCIA_ciclos:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    101          unsigned int POTENCIA_frequencia=0;
   \                     POTENCIA_frequencia:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    102          unsigned int POTENCIA_periodoCapturadoMotor;
   \                     POTENCIA_periodoCapturadoMotor:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    103          unsigned int POTENCIA_timeOutCounter;
   \                     POTENCIA_timeOutCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    104          unsigned int POTENCIA_bufferRotacao[TAM_BUF_VELOCIDADE]={0};
   \                     POTENCIA_bufferRotacao:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
    105          unsigned char POTENCIA_ligaMotor=0;
   \                     POTENCIA_ligaMotor:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    106          unsigned int POTENCIA_set_point=0;
   \                     POTENCIA_set_point:
   \   00000000                      DS8 4
    107          extern unsigned int BOARD_lock_timer;
    108          
    109          /***********************************************************************************
    110          *       Funções locais
    111          ***********************************************************************************/
    112          
    113          /***********************************************************************************
    114          *       Implementação das funções
    115          ***********************************************************************************/
    116          
    117          /***********************************************************************************
    118          *       Descrição       :       Inicialização do módulo
    119          *       Parametros      :       nenhum
    120          *       Retorno         :       nenhum
    121          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    122          void POTENCIA_ini(void){
    123            
    124            INI_LIGA_NEUTRO_PIN();  
   \                     POTENCIA_ini:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x2009c020
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x2009c020
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    125            INI_PINS;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x2009c040
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x2009c040
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    126            SET_LIGA_NEUTRO_PIN(0);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x2009c03c
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable10_2  ;; 0x2009c03c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    127            
    128            // --------------------------
    129            // Interrupção externa
    130            // --------------------------
    131            PINSEL4_bit.P2_11 = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x4002c010
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0xF360 0x5197      BFI      R1,R0,#+22,#+2
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x4002c010
   \   00000040   0x6001             STR      R1,[R0, #+0]
    132            EXTMODE_bit.EXTMODE1 = 1;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x400fc148
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x400fc148
   \   00000050   0x6008             STR      R0,[R1, #+0]
    133            EXTPOLAR_bit.EXTPOLAR1 = 1;    
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x400fc14c
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable10_5  ;; 0x400fc14c
   \   00000060   0x6008             STR      R0,[R1, #+0]
    134            SETENA0_bit.SETENA19 = 1;      
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0xe000e100
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0xe000e100
   \   00000070   0x6008             STR      R0,[R1, #+0]
    135            
    136            //--------------------------------------------------------------------------//
    137            //                        Habilita a interrupção                            //
    138            //                        no NVIC                                           //
    139            //--------------------------------------------------------------------------//  
    140            PCONP_bit.PCTIM1 = 1;  
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x400fc0c4
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable10_7  ;; 0x400fc0c4
   \   00000080   0x6008             STR      R0,[R1, #+0]
    141            IP0_bit.PRI_2 = 0;  
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0xe000e400
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF430 0x007F      BICS     R0,R0,#0xFF0000
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0xe000e400
   \   00000090   0x6008             STR      R0,[R1, #+0]
    142            SETENA0_bit.SETENA2 = 1; // Habilitação da interrupção do timer 1
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0xe000e100
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0xe000e100
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    143            
    144            T1TCR_bit.CE = 1;   // Contador Habilitado
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40008004
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0x40008004
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    145            T1TCR_bit.CR = 1;   // Realiza o reset
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40008004
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0x40008004
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    146            T1TCR_bit.CR = 0;   // do contador
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40008004
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable10_9  ;; 0x40008004
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    147            
    148            T1CTCR_bit.CTM = 0x00;
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40008070
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x0880             LSRS     R0,R0,#+2
   \   000000DA   0x0080             LSLS     R0,R0,#+2
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable10_10  ;; 0x40008070
   \   000000E0   0x6008             STR      R0,[R1, #+0]
    149            T1PR = PR_TIMER;
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x4000800c
   \   000000E6   0xF44F 0x7196      MOV      R1,#+300
   \   000000EA   0x6001             STR      R1,[R0, #+0]
    150             
    151            PINSEL3_bit.P1_18 = 3;
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable10_12  ;; 0x4002c00c
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable10_12  ;; 0x4002c00c
   \   000000FA   0x6008             STR      R0,[R1, #+0]
    152            
    153            T1CCR_bit.CAP0RE = 1; // Borda de subida
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x40008028
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable10_13  ;; 0x40008028
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    154            T1CCR_bit.CAP0FE = 0; // Borda de descida  
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x40008028
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable10_13  ;; 0x40008028
   \   0000011A   0x6008             STR      R0,[R1, #+0]
    155            T1CCR_bit.CAP0I = 1;  // Interrupção por evento no canal
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x40008028
   \   00000120   0x6800             LDR      R0,[R0, #+0]
   \   00000122   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable10_13  ;; 0x40008028
   \   0000012A   0x6008             STR      R0,[R1, #+0]
    156            
    157            //-------------------------------------------------------------------------//
    158            //                    Inicialização do timer 2                             //
    159            //-------------------------------------------------------------------------//
    160            PCONP_bit.PCTIM2 = 1; // Energiza o periférico
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x400fc0c4
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable10_7  ;; 0x400fc0c4
   \   0000013A   0x6008             STR      R0,[R1, #+0]
    161            PCLKSEL1_bit.PCLK_TIMER2 = 1; // Seleção do clock
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable10_14  ;; 0x400fc1ac
   \   00000142   0x6809             LDR      R1,[R1, #+0]
   \   00000144   0xF360 0x310D      BFI      R1,R0,#+12,#+2
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable10_14  ;; 0x400fc1ac
   \   0000014C   0x6001             STR      R1,[R0, #+0]
    162            
    163            IP0_bit.PRI_3 = 0;  
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0xe000e400
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   00000156   0x0A00             LSRS     R0,R0,#+8
   \   00000158   0x....             LDR.N    R1,??DataTable10_8  ;; 0xe000e400
   \   0000015A   0x6008             STR      R0,[R1, #+0]
    164            SETENA0_bit.SETENA3 = 1; // Habilitação da interrupção do timer 1
   \   0000015C   0x....             LDR.N    R0,??DataTable10_6  ;; 0xe000e100
   \   0000015E   0x6800             LDR      R0,[R0, #+0]
   \   00000160   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000164   0x....             LDR.N    R1,??DataTable10_6  ;; 0xe000e100
   \   00000166   0x6008             STR      R0,[R1, #+0]
    165            
    166            T2TCR_bit.CE = 1;   // Contador Habilitado
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable10_15  ;; 0x40090004
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000172   0x....             LDR.N    R1,??DataTable10_15  ;; 0x40090004
   \   00000174   0x6008             STR      R0,[R1, #+0]
    167            T2TCR_bit.CR = 1;   // Realiza o reset
   \   00000176   0x....             LDR.N    R0,??DataTable10_15  ;; 0x40090004
   \   00000178   0x6800             LDR      R0,[R0, #+0]
   \   0000017A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000017E   0x....             LDR.N    R1,??DataTable10_15  ;; 0x40090004
   \   00000180   0x6008             STR      R0,[R1, #+0]
    168            T2TCR_bit.CR = 0;   // do contador
   \   00000182   0x....             LDR.N    R0,??DataTable10_15  ;; 0x40090004
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF030 0x0002      BICS     R0,R0,#0x2
   \   0000018A   0x....             LDR.N    R1,??DataTable10_15  ;; 0x40090004
   \   0000018C   0x6008             STR      R0,[R1, #+0]
    169            
    170            T2CTCR_bit.CTM = 0x00;
   \   0000018E   0x....             LDR.N    R0,??DataTable10_16  ;; 0x40090070
   \   00000190   0x6800             LDR      R0,[R0, #+0]
   \   00000192   0x0880             LSRS     R0,R0,#+2
   \   00000194   0x0080             LSLS     R0,R0,#+2
   \   00000196   0x....             LDR.N    R1,??DataTable10_16  ;; 0x40090070
   \   00000198   0x6008             STR      R0,[R1, #+0]
    171            T2PR = PR_TIMER;  
   \   0000019A   0x....             LDR.N    R0,??DataTable10_17  ;; 0x4009000c
   \   0000019C   0xF44F 0x7196      MOV      R1,#+300
   \   000001A0   0x6001             STR      R1,[R0, #+0]
    172            //-------------------------------------------------------------------------//
    173            //                   Match 0 para o dimmer do motor                        //
    174            //-------------------------------------------------------------------------// 
    175            T2MCR_bit.MR0I = 0;
   \   000001A2   0x....             LDR.N    R0,??DataTable10_18  ;; 0x40090014
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0x0840             LSRS     R0,R0,#+1
   \   000001A8   0x0040             LSLS     R0,R0,#+1
   \   000001AA   0x....             LDR.N    R1,??DataTable10_18  ;; 0x40090014
   \   000001AC   0x6008             STR      R0,[R1, #+0]
    176            T2MCR_bit.MR0R = 0;
   \   000001AE   0x....             LDR.N    R0,??DataTable10_18  ;; 0x40090014
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000001B6   0x....             LDR.N    R1,??DataTable10_18  ;; 0x40090014
   \   000001B8   0x6008             STR      R0,[R1, #+0]
    177            T2EMR_bit.EM0  = 0; // Não altera nenhum pino    
   \   000001BA   0x....             LDR.N    R0,??DataTable10_19  ;; 0x4009003c
   \   000001BC   0x6800             LDR      R0,[R0, #+0]
   \   000001BE   0x0840             LSRS     R0,R0,#+1
   \   000001C0   0x0040             LSLS     R0,R0,#+1
   \   000001C2   0x....             LDR.N    R1,??DataTable10_19  ;; 0x4009003c
   \   000001C4   0x6008             STR      R0,[R1, #+0]
    178            T2EMR_bit.EMC0 = 0;
   \   000001C6   0x....             LDR.N    R0,??DataTable10_19  ;; 0x4009003c
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF030 0x0030      BICS     R0,R0,#0x30
   \   000001CE   0x....             LDR.N    R1,??DataTable10_19  ;; 0x4009003c
   \   000001D0   0x6008             STR      R0,[R1, #+0]
    179            
    180            T2MR0 = T2TC+1000;  
   \   000001D2   0x....             LDR.N    R0,??DataTable10_20  ;; 0x40090008
   \   000001D4   0x6800             LDR      R0,[R0, #+0]
   \   000001D6   0xF510 0x707A      ADDS     R0,R0,#+1000
   \   000001DA   0x....             LDR.N    R1,??DataTable10_21  ;; 0x40090018
   \   000001DC   0x6008             STR      R0,[R1, #+0]
    181          }
   \   000001DE   0x4770             BX       LR               ;; return
   \   000001E0                      REQUIRE _A_FIO1DIR
   \   000001E0                      REQUIRE _A_FIO2DIR
   \   000001E0                      REQUIRE _A_FIO1CLR
   \   000001E0                      REQUIRE _A_PINSEL4
   \   000001E0                      REQUIRE _A_EXTMODE
   \   000001E0                      REQUIRE _A_EXTPOLAR
   \   000001E0                      REQUIRE _A_SETENA0
   \   000001E0                      REQUIRE _A_PCONP
   \   000001E0                      REQUIRE _A_IP0
   \   000001E0                      REQUIRE _A_T1TCR
   \   000001E0                      REQUIRE _A_T1CTCR
   \   000001E0                      REQUIRE T1PR
   \   000001E0                      REQUIRE _A_PINSEL3
   \   000001E0                      REQUIRE _A_T1CCR
   \   000001E0                      REQUIRE _A_PCLKSEL1
   \   000001E0                      REQUIRE _A_T2TCR
   \   000001E0                      REQUIRE _A_T2CTCR
   \   000001E0                      REQUIRE T2PR
   \   000001E0                      REQUIRE _A_T2MCR
   \   000001E0                      REQUIRE _A_T2EMR
   \   000001E0                      REQUIRE T2MR0
   \   000001E0                      REQUIRE T2TC
    182          /***********************************************************************************
    183          *       Descrição       :       Inicializa o neutro de potência
    184          *       Parametros      :       nenhum
    185          *       Retorno         :       nenhum
    186          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    187          void POTENCIA_set_neutro(unsigned char flag){
    188            
    189            SET_LIGA_NEUTRO_PIN(flag);
   \                     POTENCIA_set_neutro:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??POTENCIA_set_neutro_0
   \   00000006   0x....             LDR.N    R0,??DataTable10_22  ;; 0x2009c038
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000000E   0x....             LDR.N    R1,??DataTable10_22  ;; 0x2009c038
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??POTENCIA_set_neutro_1
   \                     ??POTENCIA_set_neutro_0:
   \   00000014   0x....             LDR.N    R0,??DataTable10_2  ;; 0x2009c03c
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000001C   0x....             LDR.N    R1,??DataTable10_2  ;; 0x2009c03c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    190          }
   \                     ??POTENCIA_set_neutro_1:
   \   00000020   0x4770             BX       LR               ;; return
   \   00000022                      REQUIRE _A_FIO1SET
   \   00000022                      REQUIRE _A_FIO1CLR
    191          /***********************************************************************************
    192          *       Descrição       :       Interrupção do EINT1
    193          *       Parametros      :       nenhum
    194          *       Retorno         :       nenhum
    195          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void POTENCIA_eintInterrupt(void){  
   \                     POTENCIA_eintInterrupt:
   \   00000000   0xB580             PUSH     {R7,LR}
    197            
    198            // Evita dois disparos
    199            // pelo glitch de subida
    200            // do sinal de 60 Hz
    201            if(!BOARD_lock_timer){
   \   00000002   0x....             LDR.N    R0,??DataTable10_23
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD110             BNE.N    ??POTENCIA_eintInterrupt_0
    202              
    203              SET_SSR(0);
   \   0000000A   0x....             LDR.N    R0,??DataTable10_24  ;; 0x2009c05c
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000012   0x....             LDR.N    R1,??DataTable10_24  ;; 0x2009c05c
   \   00000014   0x6008             STR      R0,[R1, #+0]
    204              BOARD_lock_timer = 6;
   \   00000016   0x....             LDR.N    R0,??DataTable10_23
   \   00000018   0x2106             MOVS     R1,#+6
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    205              POTENCIA_controleVelocidade();
   \   0000001C   0x.... 0x....      BL       POTENCIA_controleVelocidade
    206            
    207              POTENCIA_ciclos++;  
   \   00000020   0x....             LDR.N    R0,??DataTable10_25
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable10_25
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE003             B.N      ??POTENCIA_eintInterrupt_1
    208            }
    209            else{
    210              BOARD_lock_timer = BOARD_lock_timer;    
   \                     ??POTENCIA_eintInterrupt_0:
   \   0000002C   0x....             LDR.N    R0,??DataTable10_23
   \   0000002E   0x....             LDR.N    R1,??DataTable10_23
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x6001             STR      R1,[R0, #+0]
    211            }
    212            EXTINT_bit.EINT1 = 1;
   \                     ??POTENCIA_eintInterrupt_1:
   \   00000034   0x....             LDR.N    R0,??DataTable10_26  ;; 0x400fc140
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003C   0x....             LDR.N    R1,??DataTable10_26  ;; 0x400fc140
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    213            CLRPEND0_bit.CLRPEND19 = 1;
   \   00000040   0x....             LDR.N    R0,??DataTable10_27  ;; 0xe000e280
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000048   0x....             LDR.N    R1,??DataTable10_27  ;; 0xe000e280
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    214          }
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
   \   0000004E                      REQUIRE _A_FIO2CLR
   \   0000004E                      REQUIRE _A_EXTINT
   \   0000004E                      REQUIRE _A_CLRPEND0
    215          /***********************************************************************************
    216          *       Descrição       :       Tick de timer para a biblioteca de controle
    217          *                               da velocidade do motor
    218          *       Parametros      :       nenhum
    219          *       Retorno         :       nenhum
    220          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    221          void POTENCIA_timerTick(void){  
    222            static unsigned short int contador=1;  
    223            
    224            if(!--contador){
   \                     POTENCIA_timerTick:
   \   00000000   0x....             LDR.N    R0,??DataTable10_28
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x1E40             SUBS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable10_28
   \   00000008   0x8008             STRH     R0,[R1, #+0]
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD10A             BNE.N    ??POTENCIA_timerTick_0
    225              POTENCIA_frequencia = POTENCIA_ciclos;
   \   00000010   0x....             LDR.N    R0,??DataTable10_29
   \   00000012   0x....             LDR.N    R1,??DataTable10_25
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x6001             STR      R1,[R0, #+0]
    226              POTENCIA_ciclos = 0;
   \   00000018   0x....             LDR.N    R0,??DataTable10_25
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    227              contador = 500;
   \   0000001E   0x....             LDR.N    R0,??DataTable10_28
   \   00000020   0xF44F 0x71FA      MOV      R1,#+500
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    228            }    
    229            
    230            // Timeout na captura
    231            // da rotação do motor  
    232            if(POTENCIA_timeOutCounter){
   \                     ??POTENCIA_timerTick_0:
   \   00000026   0x....             LDR.N    R0,??DataTable10_30
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD013             BEQ.N    ??POTENCIA_timerTick_1
    233              if(POTENCIA_timeOutCounter==1){
   \   0000002E   0x....             LDR.N    R0,??DataTable10_30
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD10A             BNE.N    ??POTENCIA_timerTick_2
    234                for(unsigned char i=0;i<TAM_BUF_VELOCIDADE;i++)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE005             B.N      ??POTENCIA_timerTick_3
    235                  POTENCIA_bufferRotacao[i] = 0;
   \                     ??POTENCIA_timerTick_4:
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x....             LDR.N    R1,??DataTable10_31
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \                     ??POTENCIA_timerTick_3:
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xDBF6             BLT.N    ??POTENCIA_timerTick_4
    236              }
    237              POTENCIA_timeOutCounter--;
   \                     ??POTENCIA_timerTick_2:
   \   0000004C   0x....             LDR.N    R0,??DataTable10_30
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x1E40             SUBS     R0,R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable10_30
   \   00000054   0x6008             STR      R0,[R1, #+0]
    238            }// Fim do contador para timeout no cálculo da rotação do motor
    239          }
   \                     ??POTENCIA_timerTick_1:
   \   00000056   0x4770             BX       LR               ;; return

   \                                 In section .data, align 2
   \                     ??contador:
   \   00000000   0x0001             DC16 1
    240          /***********************************************************************************
    241          *       Descrição       :       Getter para a frequência da rede elétrica
    242          *       Parametros      :       nenhum
    243          *       Retorno         :       nenhum
    244          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    245          unsigned short int POTENCIA_getFrequenciaRede(void){
    246            
    247            return POTENCIA_frequencia;
   \                     POTENCIA_getFrequenciaRede:
   \   00000000   0x....             LDR.N    R0,??DataTable10_29
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x4770             BX       LR               ;; return
    248          }
    249          /***********************************************************************************
    250          *       Descrição       :       Interrupção do capture
    251          *       Parametros      :       nenhum
    252          *       Retorno         :       nenhum
    253          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          void POTENCIA_captureInterrupt(void){
    255            static unsigned int ultimaLeitura=0;
    256            unsigned int larguraAtual;
    257            unsigned int tmp;
    258            static unsigned int ponteiroLeitura=0;
    259            
    260            larguraAtual = tmp = T1CR0;
   \                     POTENCIA_captureInterrupt:
   \   00000000   0x....             LDR.N    R0,??DataTable10_32  ;; 0x4000802c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0001             MOVS     R1,R0
    261            
    262            if(larguraAtual>ultimaLeitura)         
   \   00000006   0x....             LDR.N    R2,??DataTable10_33
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4282             CMP      R2,R0
   \   0000000C   0xD203             BCS.N    ??POTENCIA_captureInterrupt_0
    263              larguraAtual-=ultimaLeitura;    
   \   0000000E   0x....             LDR.N    R2,??DataTable10_33
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x1A80             SUBS     R0,R0,R2
   \   00000014   0xE005             B.N      ??POTENCIA_captureInterrupt_1
    264            else
    265              larguraAtual = (0xFFFFFFFF - ultimaLeitura) + larguraAtual;
   \                     ??POTENCIA_captureInterrupt_0:
   \   00000016   0xF05F 0x32FF      MOVS     R2,#-1
   \   0000001A   0x....             LDR.N    R3,??DataTable10_33
   \   0000001C   0x681B             LDR      R3,[R3, #+0]
   \   0000001E   0x1AD2             SUBS     R2,R2,R3
   \   00000020   0x1810             ADDS     R0,R2,R0
    266              
    267            ultimaLeitura = tmp;
   \                     ??POTENCIA_captureInterrupt_1:
   \   00000022   0x....             LDR.N    R2,??DataTable10_33
   \   00000024   0x6011             STR      R1,[R2, #+0]
    268            
    269            T1IR_bit.CR0INT = 1;
   \   00000026   0x....             LDR.N    R1,??DataTable10_34  ;; 0x40008000
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000002E   0x....             LDR.N    R2,??DataTable10_34  ;; 0x40008000
   \   00000030   0x6011             STR      R1,[R2, #+0]
    270            CLRPEND0_bit.CLRPEND2 = 1;
   \   00000032   0x....             LDR.N    R1,??DataTable10_27  ;; 0xe000e280
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0xF051 0x0104      ORRS     R1,R1,#0x4
   \   0000003A   0x....             LDR.N    R2,??DataTable10_27  ;; 0xe000e280
   \   0000003C   0x6011             STR      R1,[R2, #+0]
    271            
    272            POTENCIA_periodoCapturadoMotor = larguraAtual;
   \   0000003E   0x....             LDR.N    R1,??DataTable10_35
   \   00000040   0x6008             STR      R0,[R1, #+0]
    273            POTENCIA_timeOutCounter = RELOAD_TIMEOUT_RRPM;      
   \   00000042   0x....             LDR.N    R0,??DataTable10_30
   \   00000044   0xF44F 0x717A      MOV      R1,#+1000
   \   00000048   0x6001             STR      R1,[R0, #+0]
    274            POTENCIA_bufferRotacao[ponteiroLeitura] = POTENCIA_periodoCapturadoMotor;
   \   0000004A   0x....             LDR.N    R0,??DataTable10_36
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x....             LDR.N    R1,??DataTable10_31
   \   00000050   0x....             LDR.N    R2,??DataTable10_35
   \   00000052   0x6812             LDR      R2,[R2, #+0]
   \   00000054   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    275            ponteiroLeitura= (ponteiroLeitura+1) % TAM_BUF_VELOCIDADE;   
   \   00000058   0x....             LDR.N    R0,??DataTable10_36
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000062   0x....             LDR.N    R1,??DataTable10_36
   \   00000064   0x6008             STR      R0,[R1, #+0]
    276          }
   \   00000066   0x4770             BX       LR               ;; return
   \   00000068                      REQUIRE T1CR0
   \   00000068                      REQUIRE _A_T1IR
   \   00000068                      REQUIRE _A_CLRPEND0

   \                                 In section .bss, align 4
   \                     ??ultimaLeitura:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??ponteiroLeitura:
   \   00000000                      DS8 4
    277          /***********************************************************************************
    278          *       Descrição       :       Interrupção do timer 2
    279          *       Parametros      :       nenhum
    280          *       Retorno         :       nenhum
    281          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    282          void POTENCIA_mathTimer2(void){
    283            
    284            if(T2IR_bit.MR0INT){
   \                     POTENCIA_mathTimer2:
   \   00000000   0x....             LDR.N    R0,??DataTable10_37  ;; 0x40090000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x07C0             LSLS     R0,R0,#+31
   \   00000006   0xD511             BPL.N    ??POTENCIA_mathTimer2_0
    285              SET_SSR(1); // Liga o gate
   \   00000008   0x....             LDR.N    R0,??DataTable10_38  ;; 0x2009c058
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000010   0x....             LDR.N    R1,??DataTable10_38  ;; 0x2009c058
   \   00000012   0x6008             STR      R0,[R1, #+0]
    286              T2IR_bit.MR0INT = 1;
   \   00000014   0x....             LDR.N    R0,??DataTable10_37  ;; 0x40090000
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001C   0x....             LDR.N    R1,??DataTable10_37  ;; 0x40090000
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    287              CLRPEND0_bit.CLRPEND3 = 1;
   \   00000020   0x....             LDR.N    R0,??DataTable10_27  ;; 0xe000e280
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000028   0x....             LDR.N    R1,??DataTable10_27  ;; 0xe000e280
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    288            }  
    289          }
   \                     ??POTENCIA_mathTimer2_0:
   \   0000002C   0x4770             BX       LR               ;; return
   \   0000002E                      REQUIRE _A_T2IR
   \   0000002E                      REQUIRE _A_FIO2SET
   \   0000002E                      REQUIRE _A_CLRPEND0
    290          /***********************************************************************************
    291          *       Descrição       :       Função que faz o controle da velocidade do 
    292          *                               motor dentro do timer
    293          *       Parametros      :       nenhum
    294          *       Retorno         :       nenhum
    295          ***********************************************************************************/
    296          #pragma inline

   \                                 In section .text, align 4
    297          void POTENCIA_controleVelocidade(void){
   \                     POTENCIA_controleVelocidade:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    298            long long int erro;
    299            long long int erro_i;
    300            long long int erro_d;
    301            static unsigned short int referencia_rampa=0;
    302            static unsigned short int ciclos=180;
    303            
    304            if(POTENCIA_ligaMotor){
   \   00000004   0x4856             LDR.N    R0,??POTENCIA_controleVelocidade_0
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xF000 0x809B      BEQ.W    ??POTENCIA_controleVelocidade_1
    305                
    306                  //----------------------------------------
    307                  // Faz a referência crescer lentamente
    308                  //----------------------------------------
    309                  if(referencia_rampa!=POTENCIA_set_point){
   \   0000000E   0x4855             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x4955             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x8
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD010             BEQ.N    ??POTENCIA_controleVelocidade_2
    310                    if(referencia_rampa>POTENCIA_set_point)
   \   0000001A   0x4853             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x8
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x4951             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x4
   \   00000020   0x8809             LDRH     R1,[R1, #+0]
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD205             BCS.N    ??POTENCIA_controleVelocidade_3
    311                      referencia_rampa-=25;//50;
   \   00000026   0x484F             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0x3819             SUBS     R0,R0,#+25
   \   0000002C   0x494D             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x4
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
   \   00000030   0xE004             B.N      ??POTENCIA_controleVelocidade_2
    312                    else
    313                      referencia_rampa+=25;//50;
   \                     ??POTENCIA_controleVelocidade_3:
   \   00000032   0x484C             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0x3019             ADDS     R0,R0,#+25
   \   00000038   0x494A             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x4
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    314                  }      
    315                  
    316                  if(ciclos){
   \                     ??POTENCIA_controleVelocidade_2:
   \   0000003C   0x484B             LDR.N    R0,??POTENCIA_controleVelocidade_0+0xC
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD02C             BEQ.N    ??POTENCIA_controleVelocidade_4
    317                    // Nos primeiros ciclos trabalha apenas com o erro
    318                    // proporcional
    319                    ciclos--;
   \   00000044   0x4849             LDR.N    R0,??POTENCIA_controleVelocidade_0+0xC
   \   00000046   0x8800             LDRH     R0,[R0, #+0]
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0x4948             LDR.N    R1,??POTENCIA_controleVelocidade_0+0xC
   \   0000004C   0x8008             STRH     R0,[R1, #+0]
    320                    erro = referencia_rampa - POTENCIA_getRPMmedido();
   \   0000004E   0x4845             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   00000050   0x8804             LDRH     R4,[R0, #+0]
   \   00000052   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   00000056   0x1A24             SUBS     R4,R4,R0
   \   00000058   0x2500             MOVS     R5,#+0
    321                    erro*= kp_const;
   \   0000005A   0x4845             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x10
   \   0000005C   0x6802             LDR      R2,[R0, #+0]
   \   0000005E   0x2300             MOVS     R3,#+0
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0xFBA2 0x4500      UMULL    R4,R5,R2,R0
   \   00000068   0xFB02 0x5501      MLA      R5,R2,R1,R5
   \   0000006C   0xFB03 0x5500      MLA      R5,R3,R0,R5
    322                    erro>>= 8;   
   \   00000070   0x0A24             LSRS     R4,R4,#+8
   \   00000072   0xEA44 0x6405      ORR      R4,R4,R5, LSL #+24
   \   00000076   0x122D             ASRS     R5,R5,#+8
    323                    POTENCIA_calcula_derivada_erro(referencia_rampa);
   \   00000078   0x483A             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   0000007A   0x8800             LDRH     R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       POTENCIA_calcula_derivada_erro
    324                    
    325                    SET_ATRASO(POTENCIA_calculaAtrasoGate(erro));
   \   00000080   0x483C             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x14  ;; 0x40090008
   \   00000082   0x6806             LDR      R6,[R0, #+0]
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0x.... 0x....      BL       POTENCIA_calculaAtrasoGate
   \   0000008A   0x1980             ADDS     R0,R0,R6
   \   0000008C   0x493A             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x18  ;; 0x40090018
   \   0000008E   0x6008             STR      R0,[R1, #+0]
   \   00000090   0x483A             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x1C  ;; 0x40090014
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000098   0x4938             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x1C  ;; 0x40090014
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0xE05D             B.N      ??POTENCIA_controleVelocidade_5
    326                  }
    327                  else{
    328                    // Calcula o erro entre a referência e a rotação medida pelo sensor
    329                    erro = referencia_rampa - POTENCIA_getRPMmedido();
   \                     ??POTENCIA_controleVelocidade_4:
   \   0000009E   0x4831             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   000000A0   0x8804             LDRH     R4,[R0, #+0]
   \   000000A2   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000000A6   0x1A24             SUBS     R4,R4,R0
   \   000000A8   0x2500             MOVS     R5,#+0
    330                    // Calcula a integral do erro
    331                    erro_i = POTENCIA_calcula_integral_erro(erro,0);                     
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       POTENCIA_calcula_integral_erro
   \   000000B2   0x0006             MOVS     R6,R0
   \   000000B4   0x17C7             ASRS     R7,R0,#+31
    332                    erro_i *= ki_const;
   \   000000B6   0x4832             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x20
   \   000000B8   0x6802             LDR      R2,[R0, #+0]
   \   000000BA   0x2300             MOVS     R3,#+0
   \   000000BC   0x0030             MOVS     R0,R6
   \   000000BE   0x0039             MOVS     R1,R7
   \   000000C0   0xFBA2 0x6700      UMULL    R6,R7,R2,R0
   \   000000C4   0xFB02 0x7701      MLA      R7,R2,R1,R7
   \   000000C8   0xFB03 0x7700      MLA      R7,R3,R0,R7
    333                    erro_i >>= 15;
   \   000000CC   0x0BF6             LSRS     R6,R6,#+15
   \   000000CE   0xEA46 0x4647      ORR      R6,R6,R7, LSL #+17
   \   000000D2   0x13FF             ASRS     R7,R7,#+15
    334                    
    335                    erro_d = POTENCIA_calcula_derivada_erro(erro);
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x.... 0x....      BL       POTENCIA_calcula_derivada_erro
   \   000000DA   0x0002             MOVS     R2,R0
   \   000000DC   0x17C3             ASRS     R3,R0,#+31
    336                    erro_d *= kd_const;
   \   000000DE   0x4829             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x24
   \   000000E0   0xF8D0 0x8000      LDR      R8,[R0, #+0]
   \   000000E4   0xF05F 0x0900      MOVS     R9,#+0
   \   000000E8   0x0010             MOVS     R0,R2
   \   000000EA   0x0019             MOVS     R1,R3
   \   000000EC   0xFBA8 0x2300      UMULL    R2,R3,R8,R0
   \   000000F0   0xFB08 0x3301      MLA      R3,R8,R1,R3
   \   000000F4   0xFB09 0x3300      MLA      R3,R9,R0,R3
    337                    erro_d >>= 15;
   \   000000F8   0x0BD2             LSRS     R2,R2,#+15
   \   000000FA   0xEA42 0x4243      ORR      R2,R2,R3, LSL #+17
   \   000000FE   0x13DB             ASRS     R3,R3,#+15
    338                    
    339                    erro*= kp_const;
   \   00000100   0x481B             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x10
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0xFBA0 0x8904      UMULL    R8,R9,R0,R4
   \   0000010A   0xFB00 0x9905      MLA      R9,R0,R5,R9
   \   0000010E   0xFB01 0x9904      MLA      R9,R1,R4,R9
   \   00000112   0x4644             MOV      R4,R8
   \   00000114   0x464D             MOV      R5,R9
    340                    erro>>= 8;          
   \   00000116   0x0A24             LSRS     R4,R4,#+8
   \   00000118   0xEA44 0x6405      ORR      R4,R4,R5, LSL #+24
   \   0000011C   0x122D             ASRS     R5,R5,#+8
    341                    erro += erro_i;
   \   0000011E   0x19A4             ADDS     R4,R4,R6
   \   00000120   0x417D             ADCS     R5,R5,R7
    342                    erro += erro_d;
   \   00000122   0x18A4             ADDS     R4,R4,R2
   \   00000124   0x415D             ADCS     R5,R5,R3
    343                                           
    344                    SET_ATRASO(POTENCIA_calculaAtrasoGate(erro));          
   \   00000126   0x4813             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x14  ;; 0x40090008
   \   00000128   0x6806             LDR      R6,[R0, #+0]
   \   0000012A   0x0020             MOVS     R0,R4
   \   0000012C   0x.... 0x....      BL       POTENCIA_calculaAtrasoGate
   \   00000130   0x1980             ADDS     R0,R0,R6
   \   00000132   0x4911             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x18  ;; 0x40090018
   \   00000134   0x6008             STR      R0,[R1, #+0]
   \   00000136   0x4811             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x1C  ;; 0x40090014
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000013E   0x490F             LDR.N    R1,??POTENCIA_controleVelocidade_0+0x1C  ;; 0x40090014
   \   00000140   0x6008             STR      R0,[R1, #+0]
   \   00000142   0xE00A             B.N      ??POTENCIA_controleVelocidade_5
    345                  }
    346            }
    347            else{
    348              POTENCIA_calcula_integral_erro(0,1);
   \                     ??POTENCIA_controleVelocidade_1:
   \   00000144   0x2101             MOVS     R1,#+1
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x.... 0x....      BL       POTENCIA_calcula_integral_erro
    349              referencia_rampa = ATRASO_MAXIMO;
   \   0000014C   0x4805             LDR.N    R0,??POTENCIA_controleVelocidade_0+0x4
   \   0000014E   0xF640 0x11C4      MOVW     R1,#+2500
   \   00000152   0x8001             STRH     R1,[R0, #+0]
    350              ciclos = 128;
   \   00000154   0x4805             LDR.N    R0,??POTENCIA_controleVelocidade_0+0xC
   \   00000156   0x2180             MOVS     R1,#+128
   \   00000158   0x8001             STRH     R1,[R0, #+0]
    351            }  
    352          }
   \                     ??POTENCIA_controleVelocidade_5:
   \   0000015A   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   \   0000015E   0xBF00             Nop      
   \                     ??POTENCIA_controleVelocidade_0:
   \   00000160   0x........         DC32     POTENCIA_ligaMotor
   \   00000164   0x........         DC32     _ZZ27POTENCIA_controleVelocidadeE16referencia_rampa
   \   00000168   0x........         DC32     POTENCIA_set_point
   \   0000016C   0x........         DC32     _ZZ27POTENCIA_controleVelocidadeE6ciclos
   \   00000170   0x........         DC32     kp_const
   \   00000174   0x40090008         DC32     0x40090008
   \   00000178   0x40090018         DC32     0x40090018
   \   0000017C   0x40090014         DC32     0x40090014
   \   00000180   0x........         DC32     ki_const
   \   00000184   0x........         DC32     kd_const
   \   00000188                      REQUIRE T2MR0
   \   00000188                      REQUIRE T2TC
   \   00000188                      REQUIRE _A_T2MCR

   \                                 In section .bss, align 2
   \                     _ZZ27POTENCIA_controleVelocidadeE16referencia_rampa:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     _ZZ27POTENCIA_controleVelocidadeE6ciclos:
   \   00000000   0x00B4             DC16 180
    353          /***********************************************************************************
    354          *       Descrição       :       Calcula o erro integral 
    355          *       Parametros      :       (int) erro atual
    356          *       Retorno         :       (int) erro integral
    357          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    358          int POTENCIA_calcula_integral_erro(int erro,unsigned flush){
    359            static long int y=0;
    360            long int abs;    
    361            
    362            if(flush){    
   \                     POTENCIA_calcula_integral_erro:
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0xD004             BEQ.N    ??POTENCIA_calcula_integral_erro_0
    363              y = 0;
   \   00000004   0x....             LDR.N    R0,??DataTable10_39
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6001             STR      R1,[R0, #+0]
    364              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE018             B.N      ??POTENCIA_calcula_integral_erro_1
    365            }
    366            
    367            y+=erro;
   \                     ??POTENCIA_calcula_integral_erro_0:
   \   0000000E   0x....             LDR.N    R1,??DataTable10_39
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x1841             ADDS     R1,R0,R1
   \   00000014   0x....             LDR.N    R2,??DataTable10_39
   \   00000016   0x6011             STR      R1,[R2, #+0]
    368            
    369            abs = erro;
   \   00000018   0x0001             MOVS     R1,R0
    370            if(abs<0) abs*= -1;
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD502             BPL.N    ??POTENCIA_calcula_integral_erro_2
   \   0000001E   0xF05F 0x32FF      MOVS     R2,#-1
   \   00000022   0x4351             MULS     R1,R2,R1
    371            
    372            if(abs<100000){
   \                     ??POTENCIA_calcula_integral_erro_2:
   \   00000024   0x....             LDR.N    R2,??DataTable10_40  ;; 0x186a0
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xDA05             BGE.N    ??POTENCIA_calcula_integral_erro_3
    373              y+=erro;
   \   0000002A   0x....             LDR.N    R1,??DataTable10_39
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x1840             ADDS     R0,R0,R1
   \   00000030   0x....             LDR.N    R1,??DataTable10_39
   \   00000032   0x6008             STR      R0,[R1, #+0]
   \   00000034   0xE002             B.N      ??POTENCIA_calcula_integral_erro_4
    374            }
    375            else{
    376              y = 0;
   \                     ??POTENCIA_calcula_integral_erro_3:
   \   00000036   0x....             LDR.N    R0,??DataTable10_39
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    377            }
    378          
    379            return y;
   \                     ??POTENCIA_calcula_integral_erro_4:
   \   0000003C   0x....             LDR.N    R0,??DataTable10_39
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \                     ??POTENCIA_calcula_integral_erro_1:
   \   00000040   0x4770             BX       LR               ;; return
    380          }

   \                                 In section .bss, align 4
   \                     ??y:
   \   00000000                      DS8 4
    381          /***********************************************************************************
    382          *       Descrição       :       Calcula a derivada do erro
    383          *       Parametros      :       (int) erro
    384          *       Retorno         :       (int) derivada do erro
    385          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    386          int POTENCIA_calcula_derivada_erro(int erro){
    387            static int ultimo_erro = 0;
    388            
    389            erro = erro - ultimo_erro;     
   \                     POTENCIA_calcula_derivada_erro:
   \   00000000   0x....             LDR.N    R1,??DataTable10_41
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x1A40             SUBS     R0,R0,R1
    390            ultimo_erro = erro;  
   \   00000006   0x....             LDR.N    R1,??DataTable10_41
   \   00000008   0x6008             STR      R0,[R1, #+0]
    391            
    392            //Trunca os limites  
    393            return erro;
   \   0000000A   0x4770             BX       LR               ;; return
    394          }

   \                                 In section .bss, align 4
   \                     ??ultimo_erro:
   \   00000000                      DS8 4
    395          /***********************************************************************************
    396          *       Descrição       :       Setter para a rotação do motor
    397          *       Parametros      :       (unsigned int) rpm do motor
    398          *       Retorno         :       nenhum
    399          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    400          void POTENCIA_setRPM(unsigned int rpm){
   \                     POTENCIA_setRPM:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    401            
    402            if(!rpm){
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD103             BNE.N    ??POTENCIA_setRPM_0
    403              POTENCIA_ligaMotor = 0;
   \   00000008   0x....             LDR.N    R0,??DataTable10_42
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
   \   0000000E   0xE00A             B.N      ??POTENCIA_setRPM_1
    404            }
    405            else{
    406              vTaskDelay(100);
   \                     ??POTENCIA_setRPM_0:
   \   00000010   0x2064             MOVS     R0,#+100
   \   00000012   0x.... 0x....      BL       vTaskDelay
    407              POTENCIA_set_point = rpm;
   \   00000016   0x....             LDR.N    R0,??DataTable10_43
   \   00000018   0x6004             STR      R4,[R0, #+0]
    408              vTaskDelay(2);          // Pra não subir antes de ligar o motor....
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       vTaskDelay
    409              POTENCIA_ligaMotor = 1;
   \   00000020   0x....             LDR.N    R0,??DataTable10_42
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x7001             STRB     R1,[R0, #+0]
    410            }
    411          }
   \                     ??POTENCIA_setRPM_1:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    412          /***********************************************************************************
    413          *       Descrição       :       Calcula o atraso para o gate para uma determinada
    414          *                               rotação
    415          *       Parametros      :       (unsigned int) rotação alvo
    416          *       Retorno         :       (unsigned int) atraso
    417          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    418          unsigned int POTENCIA_calculaAtrasoGate(int rotacao_rpm){    
    419            
    420          #ifdef FQ_REDE_60_HZ  
    421            long long int valor;
    422            
    423            valor = rotacao_rpm*4404;
   \                     POTENCIA_calculaAtrasoGate:
   \   00000000   0xF241 0x1134      MOVW     R1,#+4404
   \   00000004   0x4348             MULS     R0,R1,R0
   \   00000006   0x17C1             ASRS     R1,R0,#+31
    424            valor>>= 15;
   \   00000008   0x0BC0             LSRS     R0,R0,#+15
   \   0000000A   0xEA40 0x4041      ORR      R0,R0,R1, LSL #+17
   \   0000000E   0x13C9             ASRS     R1,R1,#+15
    425            valor = 2499 - valor; 
   \   00000010   0xF640 0x12C3      MOVW     R2,#+2499
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x1A10             SUBS     R0,R2,R0
   \   00000018   0xEB73 0x0101      SBCS     R1,R3,R1
    426            
    427            // trunca os limites
    428            // do it que gera a interrução
    429            // para controlar o gate
    430            // esses valores foram levantado com o scope, então não
    431            // mudar sem critérios(13/11/2016)
    432            if(valor<ATRASO_MINIMO)
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xDC04             BGT.N    ??POTENCIA_calculaAtrasoGate_0
   \   00000020   0xDB01             BLT.N    ??POTENCIA_calculaAtrasoGate_1
   \   00000022   0x2896             CMP      R0,#+150
   \   00000024   0xD201             BCS.N    ??POTENCIA_calculaAtrasoGate_0
    433              valor = ATRASO_MINIMO;
   \                     ??POTENCIA_calculaAtrasoGate_1:
   \   00000026   0x2096             MOVS     R0,#+150
   \   00000028   0x2100             MOVS     R1,#+0
    434            if(valor>ATRASO_MAXIMO)
   \                     ??POTENCIA_calculaAtrasoGate_0:
   \   0000002A   0xF640 0x12C5      MOVW     R2,#+2501
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x4299             CMP      R1,R3
   \   00000032   0xDB05             BLT.N    ??POTENCIA_calculaAtrasoGate_2
   \   00000034   0xDC01             BGT.N    ??POTENCIA_calculaAtrasoGate_3
   \   00000036   0x4290             CMP      R0,R2
   \   00000038   0xD302             BCC.N    ??POTENCIA_calculaAtrasoGate_2
    435              valor = ATRASO_MAXIMO;
   \                     ??POTENCIA_calculaAtrasoGate_3:
   \   0000003A   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000003E   0x2100             MOVS     R1,#+0
    436            
    437            return valor;
   \                     ??POTENCIA_calculaAtrasoGate_2:
   \   00000040   0x4770             BX       LR               ;; return
    438          #endif
    439            
    440          #ifdef FQ_REDE_50_HZ
    441            long long int valor;
    442            
    443            valor = rotacao_rpm * 5757;
    444            valor>>= 15;
    445            valor = ATRASO_MAXIMO - valor; 
    446            
    447            // trunca os limites
    448            // do it que gera a interrução
    449            // para controlar o gate
    450            // esses valores foram levantado com o scope, então não
    451            // mudar sem critérios(13/11/2016)
    452            if(valor<ATRASO_MINIMO)
    453              valor = ATRASO_MINIMO;
    454            if(valor>ATRASO_MAXIMO)
    455              valor = ATRASO_MAXIMO;
    456            
    457            return valor;
    458          #endif  
    459          }
    460          /***********************************************************************************
    461          *       Descrição       :       Lê os RPMs do motor
    462          *       Parametros      :       nenhum
    463          *       Retorno         :       (unsigned int) RPM atual do motor
    464          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    465          unsigned int POTENCIA_getRPMmedido(void){  
    466            unsigned int media=0; 
   \                     POTENCIA_getRPMmedido:
   \   00000000   0x2000             MOVS     R0,#+0
    467            
    468            if(!POTENCIA_periodoCapturadoMotor)
   \   00000002   0x....             LDR.N    R1,??DataTable10_35
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD101             BNE.N    ??POTENCIA_getRPMmedido_0
    469              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE00E             B.N      ??POTENCIA_getRPMmedido_1
    470          
    471            for(unsigned char i=0;i<TAM_BUF_VELOCIDADE;i++)
   \                     ??POTENCIA_getRPMmedido_0:
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xE005             B.N      ??POTENCIA_getRPMmedido_2
    472              media += POTENCIA_bufferRotacao[i];  
   \                     ??POTENCIA_getRPMmedido_3:
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x....             LDR.N    R2,??DataTable10_31
   \   00000016   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   0000001A   0x1810             ADDS     R0,R2,R0
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \                     ??POTENCIA_getRPMmedido_2:
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x2902             CMP      R1,#+2
   \   00000022   0xDBF6             BLT.N    ??POTENCIA_getRPMmedido_3
    473            media>>=DIV_MEDIA_VEL;
   \   00000024   0x0840             LSRS     R0,R0,#+1
    474            
    475            media = 19962072/media;
   \   00000026   0x....             LDR.N    R1,??DataTable10_44  ;; 0x13098d8
   \   00000028   0xFBB1 0xF0F0      UDIV     R0,R1,R0
    476             
    477            return media;
   \                     ??POTENCIA_getRPMmedido_1:
   \   0000002C   0x4770             BX       LR               ;; return
    478          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x2009C020         DC32     0x2009c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x2009C040         DC32     0x2009c040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x2009C03C         DC32     0x2009c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x4002C010         DC32     0x4002c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x400FC148         DC32     0x400fc148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x400FC14C         DC32     0x400fc14c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x40008004         DC32     0x40008004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x40008070         DC32     0x40008070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x4002C00C         DC32     0x4002c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x40008028         DC32     0x40008028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x400FC1AC         DC32     0x400fc1ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x40090004         DC32     0x40090004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x40090070         DC32     0x40090070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x4009000C         DC32     0x4009000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x40090014         DC32     0x40090014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x4009003C         DC32     0x4009003c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x40090008         DC32     0x40090008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x40090018         DC32     0x40090018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x2009C038         DC32     0x2009c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x........         DC32     BOARD_lock_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x2009C05C         DC32     0x2009c05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     POTENCIA_ciclos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x400FC140         DC32     0x400fc140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     ??contador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x........         DC32     POTENCIA_frequencia

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x........         DC32     POTENCIA_timeOutCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x........         DC32     POTENCIA_bufferRotacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x4000802C         DC32     0x4000802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_33:
   \   00000000   0x........         DC32     ??ultimaLeitura

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_34:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_35:
   \   00000000   0x........         DC32     POTENCIA_periodoCapturadoMotor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_36:
   \   00000000   0x........         DC32     ??ponteiroLeitura

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_37:
   \   00000000   0x40090000         DC32     0x40090000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_38:
   \   00000000   0x2009C058         DC32     0x2009c058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_39:
   \   00000000   0x........         DC32     ??y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_40:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_41:
   \   00000000   0x........         DC32     ??ultimo_erro

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_42:
   \   00000000   0x........         DC32     POTENCIA_ligaMotor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_43:
   \   00000000   0x........         DC32     POTENCIA_set_point

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_44:
   \   00000000   0x013098D8         DC32     0x13098d8
    479          /***********************************************************************************
    480          *       Fim do arquivo
    481          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   POTENCIA_calculaAtrasoGate
       0   POTENCIA_calcula_derivada_erro
       0   POTENCIA_calcula_integral_erro
       0   POTENCIA_captureInterrupt
      32   POTENCIA_controleVelocidade
        32   -> POTENCIA_calculaAtrasoGate
        32   -> POTENCIA_calcula_derivada_erro
        32   -> POTENCIA_calcula_integral_erro
        32   -> POTENCIA_getRPMmedido
       8   POTENCIA_eintInterrupt
         8   -> POTENCIA_controleVelocidade
       0   POTENCIA_getFrequenciaRede
       0   POTENCIA_getRPMmedido
       0   POTENCIA_ini
       0   POTENCIA_mathTimer2
       8   POTENCIA_setRPM
         8   -> vTaskDelay
       0   POTENCIA_set_neutro
       0   POTENCIA_timerTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_33
       4  ??DataTable10_34
       4  ??DataTable10_35
       4  ??DataTable10_36
       4  ??DataTable10_37
       4  ??DataTable10_38
       4  ??DataTable10_39
       4  ??DataTable10_4
       4  ??DataTable10_40
       4  ??DataTable10_41
       4  ??DataTable10_42
       4  ??DataTable10_43
       4  ??DataTable10_44
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       8  POTENCIA_bufferRotacao
      66  POTENCIA_calculaAtrasoGate
      12  POTENCIA_calcula_derivada_erro
      66  POTENCIA_calcula_integral_erro
     104  POTENCIA_captureInterrupt
       4  POTENCIA_ciclos
     392  POTENCIA_controleVelocidade
      78  POTENCIA_eintInterrupt
       4  POTENCIA_frequencia
       8  POTENCIA_getFrequenciaRede
      46  POTENCIA_getRPMmedido
     480  POTENCIA_ini
       1  POTENCIA_ligaMotor
      46  POTENCIA_mathTimer2
       4  POTENCIA_periodoCapturadoMotor
      40  POTENCIA_setRPM
      34  POTENCIA_set_neutro
       4  POTENCIA_set_point
       4  POTENCIA_timeOutCounter
      88  POTENCIA_timerTick
       4  T1CR0
       4  T1PR
       4  T2MR0
       4  T2PR
       4  T2TC
       4  _A_CLRPEND0
       4  _A_EXTINT
       4  _A_EXTMODE
       4  _A_EXTPOLAR
       4  _A_FIO1CLR
       4  _A_FIO1DIR
       4  _A_FIO1SET
       4  _A_FIO2CLR
       4  _A_FIO2DIR
       4  _A_FIO2SET
       4  _A_IP0
       4  _A_PCLKSEL1
       4  _A_PCONP
       4  _A_PINSEL3
       4  _A_PINSEL4
       4  _A_SETENA0
       4  _A_T1CCR
       4  _A_T1CTCR
       4  _A_T1IR
       4  _A_T1TCR
       4  _A_T2CTCR
       4  _A_T2EMR
       4  _A_T2IR
       4  _A_T2MCR
       4  _A_T2TCR
       2  ciclos
       2  contador
       4  kd_const
       4  ki_const
       4  kp_const
       4  ponteiroLeitura
       2  referencia_rampa
       4  ultimaLeitura
       4  ultimo_erro
       4  y

 
    47 bytes in section .bss
     4 bytes in section .data
   120 bytes in section .noinit (abs)
    12 bytes in section .rodata
 1 640 bytes in section .text
 
 1 248 bytes of CODE  memory (+ 392 bytes shared)
    12 bytes of CONST memory
    47 bytes of DATA  memory (+ 124 bytes shared)

Errors: none
Warnings: 2

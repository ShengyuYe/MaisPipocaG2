###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      09/Sep/2017  15:28:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016 #
#                    b\memoryWrapper.c                                        #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016 #
#                    b\memoryWrapper.c -lC C:\repositorios\MaisPipocaG2\SOFTW #
#                    ARE\Debug\List\ -lA C:\repositorios\MaisPipocaG2\SOFTWAR #
#                    E\Debug\List\ -o C:\repositorios\MaisPipocaG2\SOFTWARE\D #
#                    ebug\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\memoryW #
#                    rapper.lst                                               #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\memoryWr #
#                    apper.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016b\memoryWrapper.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Product	    :       
     18          |       Module	    :   Adapter para memória AT45011 ficar linear
     19          |       File	    :   memoryWrapper.c
     20          |       Description :   Cria uma abstração para utilziar a AT45DB011 como memória linear
     21          |	Author      :   Marcos Aquino
     22          |
     23          |       Created on  :   12/06/2009
     24          |                       25/07/2011 - Inicio da alteração para a funcionar com
     25          |                       N chips externos, além de resolver o cruzamento
     26          |                       de endereçamento entre os CHIPs
     27          |
     28          |       History     :   
     29          |
     30          |
     31          | __________________________________________________________________________________
     32          */
     33          
     34          /***********************************************************************************
     35          *	Includes
     36          ***********************************************************************************/
     37          #include <nxp\iolpc1768.h>
     38          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     39          #include "sst25vf016b.h"
     40          #include "memoryWrapper.h"
     41          #include "paginacaoMemoriaFlash.h"
     42          #include "spi_wrapper.h"
     43          #include "..\..\includes.h"
     44          
     45          /***********************************************************************************
     46          *	Defines - Local
     47          ***********************************************************************************/ 
     48          #define TAMANHO_PAGINA_SST25VF016                           4096
     49          #define QTD_PAGINAS_SST25VF016                              512 
     50          
     51          #define TAMANHO_PAGINA_AT45DB011                            264
     52          #define QTD_PAGINAS_AT45DB011                               512
     53          
     54          /***********************************************************************************
     55          *       Constantes
     56          ***********************************************************************************/

   \                                 In section .rodata, align 4
     57          const unsigned int tamanhoPaginas[3]={
   \                     tamanhoPaginas:
   \   00000000   0x00000108         DC32 264, 264, 4096
   \              0x00000108   
   \              0x00001000   
     58            [0] = TAMANHO_PAGINA_AT45DB011,
     59            [1] = TAMANHO_PAGINA_AT45DB011,
     60            [2] = TAMANHO_PAGINA_SST25VF016
     61          };
     62          
     63          /***********************************************************************************
     64          *	Enumerations - Local
     65          ***********************************************************************************/
     66          
     67          
     68          /***********************************************************************************
     69          *	Structs - Local
     70          ***********************************************************************************/
     71          
     72          
     73          /***********************************************************************************
     74          *	Types - Local
     75          ***********************************************************************************/
     76          
     77          
     78          /***********************************************************************************
     79          *	Variables - Local
     80          ***********************************************************************************/

   \                                 In section .bss, align 4
     81          xSemaphoreHandle semDataFlash;
   \                     semDataFlash:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          unsigned char MEMORYWRAPPER_localBuffer[TAMANHO_PAGINA_SST25VF016];
   \                     MEMORYWRAPPER_localBuffer:
   \   00000000                      DS8 4096
     83          
     84          
     85          /***********************************************************************************
     86          *	Functions - Local
     87          ***********************************************************************************/
     88          void MEMORYWRAPPER_writeToAT45Page(unsigned char flash,unsigned int page,
     89                                             unsigned char *pData,unsigned int size);
     90          
     91          /***********************************************************************************
     92          *	Implementations
     93          ***********************************************************************************/
     94          
     95          /***********************************************************************************
     96          *       Descrição     : Inicialização do módulo
     97          *       Parametros    : nenhum
     98          *       Retorno       : nenhum
     99          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    100          void MEMORYWRAPPER_init(void){
   \                     MEMORYWRAPPER_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    101            
    102            SPIWRAPPER_init(66000000);
   \   00000002   0x....             LDR.N    R0,??DataTable5  ;; 0x3ef1480
   \   00000004   0x.... 0x....      BL       SPIWRAPPER_init
    103            SST25VF_init(1);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       SST25VF_init
    104            vSemaphoreCreateBinary(semDataFlash);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       xQueueCreate
   \   00000016   0x....             LDR.N    R1,??DataTable5_1
   \   00000018   0x6008             STR      R0,[R1, #+0]
   \   0000001A   0x....             LDR.N    R0,??DataTable5_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD006             BEQ.N    ??MEMORYWRAPPER_init_0
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x....             LDR.N    R0,??DataTable5_1
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       xQueueGenericSend
    105          }
   \                     ??MEMORYWRAPPER_init_0:
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
    106          /********************************************************************************
    107          *     Descrição     :   Grava um buffer em um setor da flash
    108          *     Parametros    :   (unsigned short int) endereco
    109          *                       (unsigned char*) buffer
    110          *     Retorno       :   nenhum
    111          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          void MEMORYWRAPPER_writeBufferInSector(unsigned int startAddress,unsigned char *pData,
    113                                                 unsigned short int offset,unsigned short int size){
   \                     MEMORYWRAPPER_writeBufferInSector:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    114                                            
    115            SST_highSpeedRead(startAddress&0xFFFFF000,MEMORYWRAPPER_localBuffer,TAMANHO_PAGINA_SST25VF016);//Copia o setor para o buffer local
   \   0000000A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000E   0x....             LDR.N    R1,??DataTable5_2
   \   00000010   0x0B20             LSRS     R0,R4,#+12
   \   00000012   0x0300             LSLS     R0,R0,#+12
   \   00000014   0x.... 0x....      BL       SST_highSpeedRead
    116            SST_erase4kbSector(startAddress);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       SST_erase4kbSector
    117            
    118            memcpy(&MEMORYWRAPPER_localBuffer[offset],pData,size);//Insere os dados no buffer
   \   0000001E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000020   0x003A             MOVS     R2,R7
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0x....             LDR.N    R0,??DataTable5_2
   \   00000028   0x1830             ADDS     R0,R6,R0
   \   0000002A   0x.... 0x....      BL       memcpy
    119            SST_writeAutoAddressInc(startAddress&0xFFFFF000,MEMORYWRAPPER_localBuffer,TAMANHO_PAGINA_SST25VF016);//Grava o buffer no setor    
   \   0000002E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000032   0x....             LDR.N    R1,??DataTable5_2
   \   00000034   0x0B20             LSRS     R0,R4,#+12
   \   00000036   0x0300             LSLS     R0,R0,#+12
   \   00000038   0x.... 0x....      BL       SST_writeAutoAddressInc
    120          }
   \   0000003C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    121          /********************************************************************************
    122          *     Descrição     :   Escreve um buffer na flash
    123          *     Parametros    :   (unsigned int) endereço inicial
    124          *                       (unsigned char*) referência para o buffer
    125          *                       (unsigned short int) tamanho do buffer escrito
    126          *     Retorno       :   nenhum
    127          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    128          void MEMORYWRAPPER_blockWriteAuxSST(unsigned int startAddress,unsigned char *pData,
    129                                               unsigned short int size){                        
   \                     MEMORYWRAPPER_blockWriteAuxSST:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    130            unsigned int pagina = startAddress / TAMANHO_PAGINA_SST25VF016;
   \   0000000A   0x0B27             LSRS     R7,R4,#+12
    131            unsigned int offset = startAddress - (pagina*TAMANHO_PAGINA_SST25VF016); 
   \   0000000C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000010   0xFB00 0x4817      MLS      R8,R0,R7,R4
    132            unsigned int toWrite=TAMANHO_PAGINA_SST25VF016-offset,index=0;
   \   00000014   0xF5D8 0x5980      RSBS     R9,R8,#+4096
   \   00000018   0xF05F 0x0A00      MOVS     R10,#+0
    133            
    134            
    135            if( (offset+size) < TAMANHO_PAGINA_SST25VF016)
   \   0000001C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001E   0xEB16 0x0008      ADDS     R0,R6,R8
   \   00000022   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000026   0xD208             BCS.N    ??MEMORYWRAPPER_blockWriteAuxSST_0
    136              MEMORYWRAPPER_writeBufferInSector(startAddress,pData,offset,size);
   \   00000028   0x0033             MOVS     R3,R6
   \   0000002A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002C   0x4642             MOV      R2,R8
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       MEMORYWRAPPER_writeBufferInSector
   \   00000038   0xE029             B.N      ??MEMORYWRAPPER_blockWriteAuxSST_1
    137            else
    138              while(size){      
   \                     ??MEMORYWRAPPER_blockWriteAuxSST_0:
   \   0000003A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003C   0x2E00             CMP      R6,#+0
   \   0000003E   0xD026             BEQ.N    ??MEMORYWRAPPER_blockWriteAuxSST_1
    139                MEMORYWRAPPER_writeBufferInSector(startAddress,&pData[index],offset,toWrite);
   \   00000040   0x464B             MOV      R3,R9
   \   00000042   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000044   0x4642             MOV      R2,R8
   \   00000046   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000048   0xEB1A 0x0105      ADDS     R1,R10,R5
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       MEMORYWRAPPER_writeBufferInSector
    140                startAddress+=toWrite;
   \   00000052   0xEB19 0x0404      ADDS     R4,R9,R4
    141                index+=toWrite;
   \   00000056   0xEB19 0x0A0A      ADDS     R10,R9,R10
    142                if(offset)
   \   0000005A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000005E   0xD002             BEQ.N    ??MEMORYWRAPPER_blockWriteAuxSST_2
    143                  size-=toWrite;
   \   00000060   0xEBB6 0x0609      SUBS     R6,R6,R9
   \   00000064   0xE008             B.N      ??MEMORYWRAPPER_blockWriteAuxSST_3
    144                else
    145                  if(size>TAMANHO_PAGINA_SST25VF016)
   \                     ??MEMORYWRAPPER_blockWriteAuxSST_2:
   \   00000066   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000068   0xF5B6 0x5F80      CMP      R6,#+4096
   \   0000006C   0xDD02             BLE.N    ??MEMORYWRAPPER_blockWriteAuxSST_4
    146                    size-=TAMANHO_PAGINA_SST25VF016;
   \   0000006E   0xF5B6 0x5680      SUBS     R6,R6,#+4096
   \   00000072   0xE001             B.N      ??MEMORYWRAPPER_blockWriteAuxSST_3
    147                  else
    148                    size=0;
   \                     ??MEMORYWRAPPER_blockWriteAuxSST_4:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x0006             MOVS     R6,R0
    149                  
    150                offset=0;      
   \                     ??MEMORYWRAPPER_blockWriteAuxSST_3:
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x4680             MOV      R8,R0
    151                toWrite = size % TAMANHO_PAGINA_SST25VF016;      
   \   0000007C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007E   0xF44F 0x5080      MOV      R0,#+4096
   \   00000082   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000086   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   0000008A   0x4689             MOV      R9,R1
   \   0000008C   0xE7D5             B.N      ??MEMORYWRAPPER_blockWriteAuxSST_0
    152              }               
    153          }
   \                     ??MEMORYWRAPPER_blockWriteAuxSST_1:
   \   0000008E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    154          /********************************************************************************
    155          *     Descrição     :   Lê um buffer da flash
    156          *     Parametros    :   (unsigned int) endereço inicial
    157          *                       (unsigned char*) referência para o buffer
    158          *                       (unsigned short int) tamanho do buffer para ler
    159          *     Retorno       :   nenhum
    160          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    161          void MEMORYWRAPPER_blockReadAuxSST(unsigned int startAddress,unsigned char *pData,
    162                                              unsigned short int size){                     
   \                     MEMORYWRAPPER_blockReadAuxSST:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    163            
    164            SST_highSpeedRead(startAddress,pData,size);  
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       SST_highSpeedRead
    165          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
    166          /***********************************************************************************
    167          *     Descrição     :   Escreve um buffer na dataflash
    168          *     Parametros    :   (unsigned long int) endereço inicial
    169          *                       (unsigned char*) ponteiro para os dados
    170          *                       (unsigned int) tamanho dos dados no buffer
    171          *     Retorno       :   nenhum
    172          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    173          unsigned char MEMORYWRAPPER_writeBytes(unsigned long int enderecoInicial,unsigned char *buffer,
    174                                                 unsigned int size){                                         
   \                     MEMORYWRAPPER_writeBytes:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    175                                                                                            
    176            while(!xSemaphoreTake(semDataFlash,portTICK_RATE_MS*1));
   \                     ??MEMORYWRAPPER_writeBytes_0:
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable5_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       xQueueGenericReceive
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0F6             BEQ.N    ??MEMORYWRAPPER_writeBytes_0
    177            
    178            MEMORYWRAPPER_blockWriteAuxSST(enderecoInicial,buffer,size);
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       MEMORYWRAPPER_blockWriteAuxSST
    179            
    180            xSemaphoreGive(semDataFlash); 
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable5_1
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       xQueueGenericSend
    181            return 0;  
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    182            
    183          }
    184          /***********************************************************************************
    185          *       Descrição     : Lê um buffer de dados da memória flash
    186          *       Parametros    : (unsigned int) Endereço inicial
    187          *                       (unsigned char*) Ponteiro para o buffer
    188          *                       (unsigned int) size
    189          *       Retorno       : nenhum
    190          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    191          unsigned char MEMORYWRAPPER_readBytes(unsigned long int enderecoInicial,unsigned char *buffer,
    192                                                unsigned int size){
   \                     MEMORYWRAPPER_readBytes:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    193            
    194            while(!xSemaphoreTake(semDataFlash,portTICK_RATE_MS*1));
   \                     ??MEMORYWRAPPER_readBytes_0:
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable5_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       xQueueGenericReceive
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0F6             BEQ.N    ??MEMORYWRAPPER_readBytes_0
    195            
    196            MEMORYWRAPPER_blockReadAuxSST(enderecoInicial,buffer,size);
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       MEMORYWRAPPER_blockReadAuxSST
    197              
    198            xSemaphoreGive(semDataFlash);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable5_1
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       xQueueGenericSend
    199            return 0;  
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    200            
    201          }
    202          /***********************************************************************************
    203          *       Descrição     : Lê um buffer de dados da memória flash
    204          *       Parametros    : (unsigned int) Endereço inicial
    205          *                       (unsigned char*) Ponteiro para o buffer
    206          *                       (unsigned int) size
    207          *       Retorno       : nenhum
    208          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    209          unsigned char MEMORYWRAPPER_readSingle(unsigned long int enderecoInicial){
   \                     MEMORYWRAPPER_readSingle:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    210            unsigned char buffer;  
    211            
    212            MEMORYWRAPPER_blockReadAuxSST(enderecoInicial,&buffer,1);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       MEMORYWRAPPER_blockReadAuxSST
    213              
    214            return buffer;    
   \   00000010   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000014   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    215          }
    216          /***********************************************************************************
    217          *       Descrição       :       Inicia o semáforo de acesso a memória flash
    218          *       Parametros      :       nenhum
    219          *       Retorno         :       nenhum
    220          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    221          void MEMORYWRAPPER_wait(void){
   \                     MEMORYWRAPPER_wait:
   \   00000000   0xB580             PUSH     {R7,LR}
    222            
    223            while(!xSemaphoreTake(semDataFlash,portTICK_RATE_MS*1));
   \                     ??MEMORYWRAPPER_wait_0:
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable5_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       xQueueGenericReceive
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD0F6             BEQ.N    ??MEMORYWRAPPER_wait_0
    224          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    225          /***********************************************************************************
    226          *       Descrição       :       Release para o semáforo de acesso a memória
    227          *                               flash
    228          *       Parametros      :       nenhum
    229          *       Retorno         :       nenhum
    230          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          void MEMORYWRAPPER_release(void){
   \                     MEMORYWRAPPER_release:
   \   00000000   0xB580             PUSH     {R7,LR}
    232            
    233            xSemaphoreGive(semDataFlash);  
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable5_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       xQueueGenericSend
    234          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x03EF1480         DC32     0x3ef1480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     semDataFlash

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     MEMORYWRAPPER_localBuffer
    235          /***********************************************************************************
    236          *       Fim do arquivo
    237          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MEMORYWRAPPER_blockReadAuxSST
        16   -> SST_highSpeedRead
      32   MEMORYWRAPPER_blockWriteAuxSST
        32   -> MEMORYWRAPPER_writeBufferInSector
       8   MEMORYWRAPPER_init
         8   -> SPIWRAPPER_init
         8   -> SST25VF_init
         8   -> xQueueCreate
         8   -> xQueueGenericSend
      16   MEMORYWRAPPER_readBytes
        16   -> MEMORYWRAPPER_blockReadAuxSST
        16   -> xQueueGenericReceive
        16   -> xQueueGenericSend
      16   MEMORYWRAPPER_readSingle
        16   -> MEMORYWRAPPER_blockReadAuxSST
       8   MEMORYWRAPPER_release
         8   -> xQueueGenericSend
       8   MEMORYWRAPPER_wait
         8   -> xQueueGenericReceive
      24   MEMORYWRAPPER_writeBufferInSector
        24   -> SST_erase4kbSector
        24   -> SST_highSpeedRead
        24   -> SST_writeAutoAddressInc
        24   -> memcpy
      16   MEMORYWRAPPER_writeBytes
        16   -> MEMORYWRAPPER_blockWriteAuxSST
        16   -> xQueueGenericReceive
        16   -> xQueueGenericSend
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      22  MEMORYWRAPPER_blockReadAuxSST
     146  MEMORYWRAPPER_blockWriteAuxSST
      50  MEMORYWRAPPER_init
    4096  MEMORYWRAPPER_localBuffer
      56  MEMORYWRAPPER_readBytes
      22  MEMORYWRAPPER_readSingle
      18  MEMORYWRAPPER_release
      22  MEMORYWRAPPER_wait
      62  MEMORYWRAPPER_writeBufferInSector
      56  MEMORYWRAPPER_writeBytes
      22  memcpy
       4  semDataFlash
      12  tamanhoPaginas

 
 4 100 bytes in section .bss
    12 bytes in section .rodata
   488 bytes in section .text
 
   466 bytes of CODE  memory (+ 22 bytes shared)
    12 bytes of CONST memory
 4 100 bytes of DATA  memory

Errors: none
Warnings: none

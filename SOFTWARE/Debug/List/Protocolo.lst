###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      24/Jul/2017  16:58:52 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c             #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c -lC         #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\Protocolo.lst                  #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\Protocolo.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Protocolo.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  21/02/2014
     21          |
     22          |       Revisões           :  1
     23          |                             2 (17/07/2017) revisão do protocolo para nova
     24          |                                            topologia de comandos
     25          |
     26          |
     27          | __________________________________________________________________________________
     28          */
     29          
     30          /***********************************************************************************
     31          *       Includes
     32          ***********************************************************************************/
     33          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0xe000e280
   \   __absolute union <unnamed> volatile _A_CLRPEND0
   \                     _A_CLRPEND0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009c000
   \   __absolute unsigned char volatile U3RBRTHR
   \                     U3RBRTHR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0x4009c008
   \   __absolute union <unnamed> volatile _A_U3FCR
   \                     _A_U3FCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009c014
   \   __absolute union <unnamed> const volatile _A_U3LSR
   \                     _A_U3LSR:
   \   00000000                      DS8 1
     34          #include <stdio.h>
     35          #include <stdlib.h>
     36          #include <string.h>
     37          #include "protocolo.h"
     38          #include "..\..\includes.h"
     39          
     40          /***********************************************************************************
     41          *       Definições locais
     42          ***********************************************************************************/
     43          #define TAM_BUF_TX                              128
     44          #define TAM_BUF_RX                              1280
     45          
     46          #define STX                                     0x02
     47          #define ETX                                     0x03
     48          #define DLE                                     0x10
     49          
     50          #define ENDERECO_INICIAL_FLASH                  AREA_ARQUIVOS
     51          /***********************************************************************************
     52          *       Variaveis locais
     53          ***********************************************************************************/

   \                                 In section .bss, align 4
     54          unsigned char PROTOCOLO_bufferTx[TAM_BUF_TX];
   \                     PROTOCOLO_bufferTx:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     55          unsigned char PROTOCOLO_bufferRx[TAM_BUF_RX];
   \                     PROTOCOLO_bufferRx:
   \   00000000                      DS8 1280

   \                                 In section .bss, align 4
     56          unsigned char PROTOCOLO_bufferTmp[TAM_BUF_TX];
   \                     PROTOCOLO_bufferTmp:
   \   00000000                      DS8 128

   \                                 In section .bss, align 1
     57          unsigned char PROTOCOLO_bytesParaEnviar;
   \                     PROTOCOLO_bytesParaEnviar:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     58          unsigned char PROTOCOLO_bytesEnviados;
   \                     PROTOCOLO_bytesEnviados:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     59          unsigned char PROTOCOLO_novoPacote=0;
   \                     PROTOCOLO_novoPacote:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     60          unsigned short int PROTOCOLO_bytesRecebidos;
   \                     PROTOCOLO_bytesRecebidos:
   \   00000000                      DS8 2
     61          
     62          
     63          /***********************************************************************************
     64          *       Funções locais
     65          ***********************************************************************************/
     66          void PROTOCOLO_enviaPacote(unsigned char *pData,unsigned short int tamanho);
     67          
     68          unsigned char PROTOCOLO_checksum(unsigned char*pData,unsigned short int tamanho);
     69          
     70          void PROTOCOLO_get_device(void);
     71          
     72          void PROTOCOLO_decodifica_tamanho_tabela(void);
     73          
     74          void PROTOCOLO_decodifica_le_parametro(unsigned short int indice);
     75          
     76          void PROTOCOLO_decodifica_escreve_parametro(unsigned short int endereco,
     77                                                      unsigned short int tamanho,
     78                                                      unsigned char *pData);
     79          
     80          void PROTOCOLO_decodifica_format(void);
     81          
     82          void PROTOCOLO_decodifica_write_block(unsigned int endereco,unsigned char *pData,
     83                                                unsigned short int size);
     84          /***********************************************************************************
     85          *       Implementação das funções
     86          ***********************************************************************************/
     87          
     88          /***********************************************************************************
     89          *       Descrição       :       Inicialização da biblioteca
     90          *       Parametros      :       nenhum
     91          *       Retorno         :       nenhum
     92          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          void PROTOCOLO_ini(void){
   \                     PROTOCOLO_ini:
   \   00000000   0xB580             PUSH     {R7,LR}
     94            
     95            UART_init(3,119200,NULL,NULL,NULL);    
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable11  ;; 0x1d1a0
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       UART_init
     96          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     97          /***********************************************************************************
     98          *       Descrição       :       Função para tratamento da interrupção
     99          *                               da uart3
    100          *       Parametros      :       nenhum
    101          *       Retorno         :       nenhum
    102          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          void PROTOCOLO_intVect(void){  
    104            static unsigned char ultimoRecebido=0;
    105            unsigned char dummy;
    106            
    107            switch(U3IIR_bit.IID){
   \                     PROTOCOLO_intVect:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x4009c008
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD008             BEQ.N    ??PROTOCOLO_intVect_0
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD023             BEQ.N    ??PROTOCOLO_intVect_1
   \   00000014   0x2803             CMP      R0,#+3
   \   00000016   0xF000 0x80B3      BEQ.W    ??PROTOCOLO_intVect_2
   \   0000001A   0x2806             CMP      R0,#+6
   \   0000001C   0xF000 0x80B7      BEQ.W    ??PROTOCOLO_intVect_3
   \   00000020   0xE0B5             B.N      ??PROTOCOLO_intVect_4
    108              case THRE:
    109                         if(PROTOCOLO_bytesParaEnviar){
   \                     ??PROTOCOLO_intVect_0:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD016             BEQ.N    ??PROTOCOLO_intVect_5
    110                           U3THR = PROTOCOLO_bufferTx[PROTOCOLO_bytesEnviados++];
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   00000036   0x5C40             LDRB     R0,[R0, R1]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable11_5  ;; 0x4009c000
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    111                           PROTOCOLO_bytesParaEnviar--;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    112                         }
    113                         break; 
   \                     ??PROTOCOLO_intVect_5:
   \   0000005A   0xE098             B.N      ??PROTOCOLO_intVect_4
    114              case RDA : dummy = U3RBR;
   \                     ??PROTOCOLO_intVect_1:
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable11_5  ;; 0x4009c000
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
    115                         switch(dummy){
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x0001             MOVS     R1,R0
   \   00000066   0x2902             CMP      R1,#+2
   \   00000068   0xD004             BEQ.N    ??PROTOCOLO_intVect_6
   \   0000006A   0x2903             CMP      R1,#+3
   \   0000006C   0xD029             BEQ.N    ??PROTOCOLO_intVect_7
   \   0000006E   0x2910             CMP      R1,#+16
   \   00000070   0xD04E             BEQ.N    ??PROTOCOLO_intVect_8
   \   00000072   0xE070             B.N      ??PROTOCOLO_intVect_9
    116                           case STX: // Quando receber [DLE]+[STX] - marca inicio de novo pacote
    117                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_6:
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000078   0x7809             LDRB     R1,[R1, #+0]
   \   0000007A   0x2910             CMP      R1,#+16
   \   0000007C   0xD108             BNE.N    ??PROTOCOLO_intVect_10
    118                                       PROTOCOLO_bytesRecebidos = 0;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x8001             STRH     R1,[R0, #+0]
    119                                       ultimoRecebido = 255;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   0000008A   0x21FF             MOVS     R1,#+255
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
   \   0000008E   0xE017             B.N      ??PROTOCOLO_intVect_11
    120                                     }
    121                                     else{
    122                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_10:
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000094   0x8809             LDRH     R1,[R1, #+0]
   \   00000096   0xF240 0x42FF      MOVW     R2,#+1279
   \   0000009A   0x4291             CMP      R1,R2
   \   0000009C   0xDA0C             BGE.N    ??PROTOCOLO_intVect_12
    123                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                         
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   000000A2   0x8809             LDRH     R1,[R1, #+0]
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable11_8
   \   000000A8   0x5488             STRB     R0,[R1, R2]
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000AE   0x8800             LDRH     R0,[R0, #+0]
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   000000B6   0x8008             STRH     R0,[R1, #+0]
    124                                       
    125                                       ultimoRecebido = STX;
   \                     ??PROTOCOLO_intVect_12:
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000000BC   0x2102             MOVS     R1,#+2
   \   000000BE   0x7001             STRB     R1,[R0, #+0]
    126                                     }
    127                                     
    128                                     break;
   \                     ??PROTOCOLO_intVect_11:
   \   000000C0   0xE05D             B.N      ??PROTOCOLO_intVect_13
    129                           case ETX: // Quando receber [DLE]+[ETX] - marca fim do novo pacote
    130                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_7:
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000000C6   0x7809             LDRB     R1,[R1, #+0]
   \   000000C8   0x2910             CMP      R1,#+16
   \   000000CA   0xD108             BNE.N    ??PROTOCOLO_intVect_14
    131                                       PROTOCOLO_novoPacote = 255;
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   000000D0   0x21FF             MOVS     R1,#+255
   \   000000D2   0x7001             STRB     R1,[R0, #+0]
    132                                       ultimoRecebido = 255;
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000000D8   0x21FF             MOVS     R1,#+255
   \   000000DA   0x7001             STRB     R1,[R0, #+0]
   \   000000DC   0xE017             B.N      ??PROTOCOLO_intVect_15
    133                                     }
    134                                     else{
    135                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_14:
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   000000E2   0x8809             LDRH     R1,[R1, #+0]
   \   000000E4   0xF240 0x42FF      MOVW     R2,#+1279
   \   000000E8   0x4291             CMP      R1,R2
   \   000000EA   0xDA0C             BGE.N    ??PROTOCOLO_intVect_16
    136                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                         
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   000000F0   0x8809             LDRH     R1,[R1, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R2,??DataTable11_8
   \   000000F6   0x5488             STRB     R0,[R1, R2]
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000FC   0x8800             LDRH     R0,[R0, #+0]
   \   000000FE   0x1C40             ADDS     R0,R0,#+1
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000104   0x8008             STRH     R0,[R1, #+0]
    137                                       
    138                                       ultimoRecebido = ETX;
   \                     ??PROTOCOLO_intVect_16:
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   0000010A   0x2103             MOVS     R1,#+3
   \   0000010C   0x7001             STRB     R1,[R0, #+0]
    139                                     }                   
    140                                     break;
   \                     ??PROTOCOLO_intVect_15:
   \   0000010E   0xE036             B.N      ??PROTOCOLO_intVect_13
    141                           case DLE: // Quando receber [DLE]+[DLE] recebe 0x10 dentro do buffer
    142                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_8:
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000114   0x7809             LDRB     R1,[R1, #+0]
   \   00000116   0x2910             CMP      R1,#+16
   \   00000118   0xD118             BNE.N    ??PROTOCOLO_intVect_17
    143                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1))
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000011E   0x8809             LDRH     R1,[R1, #+0]
   \   00000120   0xF240 0x42FF      MOVW     R2,#+1279
   \   00000124   0x4291             CMP      R1,R2
   \   00000126   0xDA0C             BGE.N    ??PROTOCOLO_intVect_18
    144                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000012C   0x8809             LDRH     R1,[R1, #+0]
   \   0000012E   0x.... 0x....      LDR.W    R2,??DataTable11_8
   \   00000132   0x5488             STRB     R0,[R1, R2]
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000138   0x8800             LDRH     R0,[R0, #+0]
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000140   0x8008             STRH     R0,[R1, #+0]
    145                                       ultimoRecebido = 255;
   \                     ??PROTOCOLO_intVect_18:
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000146   0x21FF             MOVS     R1,#+255
   \   00000148   0x7001             STRB     R1,[R0, #+0]
   \   0000014A   0xE003             B.N      ??PROTOCOLO_intVect_19
    146                                     }                      
    147                                     else
    148                                       ultimoRecebido = DLE;
   \                     ??PROTOCOLO_intVect_17:
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000150   0x2110             MOVS     R1,#+16
   \   00000152   0x7001             STRB     R1,[R0, #+0]
    149                                     break;
   \                     ??PROTOCOLO_intVect_19:
   \   00000154   0xE013             B.N      ??PROTOCOLO_intVect_13
    150                           default :
    151                                     if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_9:
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000015A   0x8809             LDRH     R1,[R1, #+0]
   \   0000015C   0xF240 0x42FF      MOVW     R2,#+1279
   \   00000160   0x4291             CMP      R1,R2
   \   00000162   0xDA0C             BGE.N    ??PROTOCOLO_intVect_20
    152                                       PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                                            
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000168   0x8809             LDRH     R1,[R1, #+0]
   \   0000016A   0x.... 0x....      LDR.W    R2,??DataTable11_8
   \   0000016E   0x5488             STRB     R0,[R1, R2]
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000174   0x8800             LDRH     R0,[R0, #+0]
   \   00000176   0x1C40             ADDS     R0,R0,#+1
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000017C   0x8008             STRH     R0,[R1, #+0]
    153                                     break;
    154                         }
    155                         
    156                         //ultimoRecebido = dummy;
    157                         break;      
   \                     ??PROTOCOLO_intVect_20:
   \                     ??PROTOCOLO_intVect_13:
   \   0000017E   0xE006             B.N      ??PROTOCOLO_intVect_4
    158              case RLS : 
    159                         dummy = U3LSR;
   \                     ??PROTOCOLO_intVect_2:
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable11_10  ;; 0x4009c014
   \   00000184   0x7800             LDRB     R0,[R0, #+0]
    160                         dummy = U3RBR;               
   \   00000186   0x....             LDR.N    R1,??DataTable11_5  ;; 0x4009c000
   \   00000188   0x7809             LDRB     R1,[R1, #+0]
   \   0000018A   0x0008             MOVS     R0,R1
    161                         break;      
   \   0000018C   0xE7FF             B.N      ??PROTOCOLO_intVect_4
    162              case CTI :
    163                         break;      
    164            }  
    165            
    166            //Apaga o flag de interrupção pendente
    167            CLRPEND0 |= (0x01)<<5;       
   \                     ??PROTOCOLO_intVect_3:
   \                     ??PROTOCOLO_intVect_4:
   \   0000018E   0x....             LDR.N    R0,??DataTable11_11  ;; 0xe000e280
   \   00000190   0x6800             LDR      R0,[R0, #+0]
   \   00000192   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000196   0x....             LDR.N    R1,??DataTable11_11  ;; 0xe000e280
   \   00000198   0x6008             STR      R0,[R1, #+0]
    168          }
   \   0000019A   0x4770             BX       LR               ;; return
   \   0000019C                      REQUIRE U3RBRTHR
   \   0000019C                      REQUIRE _A_U3LSR
   \   0000019C                      REQUIRE _A_U3FCR
   \   0000019C                      REQUIRE _A_CLRPEND0

   \                                 In section .bss, align 1
   \                     ??ultimoRecebido:
   \   00000000                      DS8 1
    169          /***********************************************************************************
    170          *       Descrição       :       Tick de timer para a biblioteca do protocolo
    171          *       Parametros      :       nenhum
    172          *       Retorno         :       nenhum
    173          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    174          void PROTOCOLO_timerTick(void){
    175            
    176            
    177            
    178          }
   \                     PROTOCOLO_timerTick:
   \   00000000   0x4770             BX       LR               ;; return
    179          /***********************************************************************************
    180          *       Descrição       :       Calcula o checksum de um pacote de dados
    181          *       Parametros      :       (unsigned char*) ponteiro para o início do pacote
    182          *                               (unsigned short int) tamanho do pacote
    183          *       Retorno         :       (unsigned char) checksum do pacote
    184          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    185          unsigned char PROTOCOLO_checksum(unsigned char*pData,unsigned short int tamanho){
   \                     PROTOCOLO_checksum:
   \   00000000   0xB410             PUSH     {R4}
    186            unsigned short int soma=0;
   \   00000002   0x2200             MOVS     R2,#+0
    187          
    188            for(unsigned short int i=0;i<tamanho;i++)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??PROTOCOLO_checksum_0
    189              soma+= pData[i];
   \                     ??PROTOCOLO_checksum_1:
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??PROTOCOLO_checksum_0:
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??PROTOCOLO_checksum_1
    190            
    191            return (unsigned char)(256-soma);    
   \   00000018   0x4250             RSBS     R0,R2,#+0
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    192          }
    193          /***********************************************************************************
    194          *       Descrição       :       Thread do protocolo
    195          *       Protocolo       :       (void*) pPar
    196          *       Retorno         :       nenhum
    197          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    198          void PROTOCOLO_main(void*pPar){
   \                     PROTOCOLO_main:
   \   00000000   0xB580             PUSH     {R7,LR}
    199            
    200            PROTOCOLO_ini();
   \   00000002   0x.... 0x....      BL       PROTOCOLO_ini
   \   00000006   0xE002             B.N      ??PROTOCOLO_main_0
    201            
    202            for(;;){        
    203              
    204              if(PROTOCOLO_novoPacote){
    205                
    206                PROTOCOLO_novoPacote = 0;
    207                if(PROTOCOLO_checksum(PROTOCOLO_bufferRx,PROTOCOLO_bufferRx[1]-1)==PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos-1]){      
    208                  switch(PROTOCOLO_bufferRx[0]){      
    209                    case DXTNET_GET_DEVICE:
    210                         PROTOCOLO_get_device();
    211                         break;
    212                    case DXTNET_READ_PARAMETERS_TABLE_SIZE:
    213                         PROTOCOLO_decodifica_tamanho_tabela();
    214                         break;
    215                    case DXTNET_READ_PARAMETERS:
    216                         PROTOCOLO_decodifica_le_parametro(PROTOCOLO_bufferRx[2]<<8 | PROTOCOLO_bufferRx[3]);
    217                         break;
    218                    case DXTNET_WRITE_PARAMETERS:
    219                         PROTOCOLO_decodifica_escreve_parametro(PROTOCOLO_bufferRx[2]<<8 | PROTOCOLO_bufferRx[3],PROTOCOLO_bufferRx[4]<<8 | PROTOCOLO_bufferRx[5],&PROTOCOLO_bufferRx[6]);
    220                         break;
    221                    case DXTNET_FILE_FORMAT:
    222                         PROTOCOLO_decodifica_format();
    223                         break;
    224                    case DXTNET_WRITE_BLOCK:
    225                         PROTOCOLO_decodifica_write_block(PROTOCOLO_bufferRx[2]<<24 | PROTOCOLO_bufferRx[3]<<16 | PROTOCOLO_bufferRx[4]<<8 | PROTOCOLO_bufferRx[5],
    226                                                          &PROTOCOLO_bufferRx[8],
    227                                                          PROTOCOLO_bufferRx[6]<<8 | PROTOCOLO_bufferRx[7]);
    228                         break;
    229                    case DXTNET_READ_BLOCK:
    230                      
    231                         break;
    232                  }    
    233                }
    234              }
    235              vTaskDelay(1);
   \                     ??PROTOCOLO_main_1:
   \                     ??PROTOCOLO_main_2:
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       vTaskDelay
   \                     ??PROTOCOLO_main_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable11_9
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD0F8             BEQ.N    ??PROTOCOLO_main_2
   \   00000016   0x....             LDR.N    R0,??DataTable11_9
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x....             LDR.N    R0,??DataTable11_8
   \   0000001E   0x7840             LDRB     R0,[R0, #+1]
   \   00000020   0x1E41             SUBS     R1,R0,#+1
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x....             LDR.N    R0,??DataTable11_8
   \   00000026   0x.... 0x....      BL       PROTOCOLO_checksum
   \   0000002A   0x....             LDR.N    R1,??DataTable11_7
   \   0000002C   0x8809             LDRH     R1,[R1, #+0]
   \   0000002E   0x....             LDR.N    R2,??DataTable11_8
   \   00000030   0x1889             ADDS     R1,R1,R2
   \   00000032   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD1E5             BNE.N    ??PROTOCOLO_main_2
   \   0000003C   0x....             LDR.N    R0,??DataTable11_8
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x2810             CMP      R0,#+16
   \   00000042   0xD00A             BEQ.N    ??PROTOCOLO_main_3
   \   00000044   0xD3E0             BCC.N    ??PROTOCOLO_main_2
   \   00000046   0x2812             CMP      R0,#+18
   \   00000048   0xD00D             BEQ.N    ??PROTOCOLO_main_4
   \   0000004A   0xD309             BCC.N    ??PROTOCOLO_main_5
   \   0000004C   0x2814             CMP      R0,#+20
   \   0000004E   0xD026             BEQ.N    ??PROTOCOLO_main_6
   \   00000050   0xD313             BCC.N    ??PROTOCOLO_main_7
   \   00000052   0x2816             CMP      R0,#+22
   \   00000054   0xD0D8             BEQ.N    ??PROTOCOLO_main_1
   \   00000056   0xD325             BCC.N    ??PROTOCOLO_main_8
   \   00000058   0xE7D6             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_3:
   \   0000005A   0x.... 0x....      BL       PROTOCOLO_get_device
   \   0000005E   0xE7D3             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_5:
   \   00000060   0x.... 0x....      BL       PROTOCOLO_decodifica_tamanho_tabela
   \   00000064   0xE7D0             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_4:
   \   00000066   0x....             LDR.N    R0,??DataTable11_8
   \   00000068   0x7880             LDRB     R0,[R0, #+2]
   \   0000006A   0x....             LDR.N    R1,??DataTable11_8
   \   0000006C   0x78C9             LDRB     R1,[R1, #+3]
   \   0000006E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0x.... 0x....      BL       PROTOCOLO_decodifica_le_parametro
   \   00000078   0xE7C6             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_7:
   \   0000007A   0x....             LDR.N    R2,??DataTable11_12
   \   0000007C   0x....             LDR.N    R0,??DataTable11_8
   \   0000007E   0x7900             LDRB     R0,[R0, #+4]
   \   00000080   0x....             LDR.N    R1,??DataTable11_8
   \   00000082   0x7949             LDRB     R1,[R1, #+5]
   \   00000084   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   00000088   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008A   0x....             LDR.N    R0,??DataTable11_8
   \   0000008C   0x7880             LDRB     R0,[R0, #+2]
   \   0000008E   0x....             LDR.N    R3,??DataTable11_8
   \   00000090   0x78DB             LDRB     R3,[R3, #+3]
   \   00000092   0xEA53 0x2000      ORRS     R0,R3,R0, LSL #+8
   \   00000096   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   0x.... 0x....      BL       PROTOCOLO_decodifica_escreve_parametro
   \   0000009C   0xE7B4             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_6:
   \   0000009E   0x.... 0x....      BL       PROTOCOLO_decodifica_format
   \   000000A2   0xE7B1             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_8:
   \   000000A4   0x....             LDR.N    R0,??DataTable11_8
   \   000000A6   0x7980             LDRB     R0,[R0, #+6]
   \   000000A8   0x....             LDR.N    R1,??DataTable11_8
   \   000000AA   0x79C9             LDRB     R1,[R1, #+7]
   \   000000AC   0xEA51 0x2200      ORRS     R2,R1,R0, LSL #+8
   \   000000B0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B2   0x....             LDR.N    R1,??DataTable11_13
   \   000000B4   0x....             LDR.N    R0,??DataTable11_8
   \   000000B6   0x7880             LDRB     R0,[R0, #+2]
   \   000000B8   0x....             LDR.N    R3,??DataTable11_8
   \   000000BA   0x78DB             LDRB     R3,[R3, #+3]
   \   000000BC   0x041B             LSLS     R3,R3,#+16
   \   000000BE   0xEA53 0x6000      ORRS     R0,R3,R0, LSL #+24
   \   000000C2   0x....             LDR.N    R3,??DataTable11_8
   \   000000C4   0x791B             LDRB     R3,[R3, #+4]
   \   000000C6   0xEA50 0x2003      ORRS     R0,R0,R3, LSL #+8
   \   000000CA   0x....             LDR.N    R3,??DataTable11_8
   \   000000CC   0x795B             LDRB     R3,[R3, #+5]
   \   000000CE   0x4318             ORRS     R0,R3,R0
   \   000000D0   0x.... 0x....      BL       PROTOCOLO_decodifica_write_block
   \   000000D4   0xE798             B.N      ??PROTOCOLO_main_2
    236            }    
    237          }
    238          /***********************************************************************************
    239          *       Descrição       :       Faz a decodificação do comando getdevice
    240          *       Parametros      :       nenhum
    241          *       Retorno         :       nenhum
    242          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    243          void PROTOCOLO_get_device(void){
   \                     PROTOCOLO_get_device:
   \   00000000   0xB580             PUSH     {R7,LR}
    244            
    245            PROTOCOLO_bufferTmp[0]  = DXTNET_GET_DEVICE;
   \   00000002   0x....             LDR.N    R0,??DataTable11_14
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x7001             STRB     R1,[R0, #+0]
    246            PROTOCOLO_bufferTmp[2]  = DXTNET_MAIS_PIPOCA_G2;
   \   00000008   0x....             LDR.N    R0,??DataTable11_14
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x7081             STRB     R1,[R0, #+2]
    247            
    248            sprintf((char*)&PROTOCOLO_bufferTmp[3],STRING_VERSAO_PROTOCOLO);
   \   0000000E   0x....             LDR.N    R1,??DataTable11_15
   \   00000010   0x....             LDR.N    R0,??DataTable11_16
   \   00000012   0x.... 0x....      BL       sprintf
    249            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,21);  
   \   00000016   0x2115             MOVS     R1,#+21
   \   00000018   0x....             LDR.N    R0,??DataTable11_14
   \   0000001A   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    250          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    251          /***********************************************************************************
    252          *       Descrição       :       Encapsula os dados que serão enviados
    253          *                               pela rede
    254          *       Parametros      :       (unsigned char*) ponteiro para os dados que serão
    255          *                                               enviados
    256          *       Retorno         :       nenhum
    257          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    258          void PROTOCOLO_enviaPacote(unsigned char *pData,unsigned short int tamanho){
   \                     PROTOCOLO_enviaPacote:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    259            unsigned char indice=0;
   \   00000006   0x2600             MOVS     R6,#+0
    260            
    261            pData[1] = tamanho;
   \   00000008   0x7065             STRB     R5,[R4, #+1]
    262            pData[tamanho-1] = PROTOCOLO_checksum(pData,tamanho-1);
   \   0000000A   0x1E69             SUBS     R1,R5,#+1
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000014   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000016   0x1929             ADDS     R1,R5,R4
   \   00000018   0xF801 0x0C01      STRB     R0,[R1, #-1]
    263            
    264            PROTOCOLO_bufferTx[indice++] = DLE;
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable11_4
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0x5431             STRB     R1,[R6, R0]
   \   00000024   0x1C76             ADDS     R6,R6,#+1
    265            PROTOCOLO_bufferTx[indice++] = STX;
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable11_4
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x5431             STRB     R1,[R6, R0]
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
    266            for(unsigned char i=0;i<tamanho;i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE006             B.N      ??PROTOCOLO_enviaPacote_0
    267              if(pData[i]==DLE){
    268                PROTOCOLO_bufferTx[indice++] = DLE;
    269                PROTOCOLO_bufferTx[indice++] = DLE;
    270              }
    271              else
    272                PROTOCOLO_bufferTx[indice++] = pData[i];
   \                     ??PROTOCOLO_enviaPacote_1:
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x5D01             LDRB     R1,[R0, R4]
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0x....             LDR.N    R2,??DataTable11_4
   \   0000003C   0x54B1             STRB     R1,[R6, R2]
   \   0000003E   0x1C76             ADDS     R6,R6,#+1
   \                     ??PROTOCOLO_enviaPacote_2:
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \                     ??PROTOCOLO_enviaPacote_0:
   \   00000042   0x0001             MOVS     R1,R0
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x42A9             CMP      R1,R5
   \   0000004C   0xD20E             BCS.N    ??PROTOCOLO_enviaPacote_3
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x5D01             LDRB     R1,[R0, R4]
   \   00000052   0x2910             CMP      R1,#+16
   \   00000054   0xD1EE             BNE.N    ??PROTOCOLO_enviaPacote_1
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0x....             LDR.N    R1,??DataTable11_4
   \   0000005A   0x2210             MOVS     R2,#+16
   \   0000005C   0x5472             STRB     R2,[R6, R1]
   \   0000005E   0x1C76             ADDS     R6,R6,#+1
   \   00000060   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000062   0x....             LDR.N    R1,??DataTable11_4
   \   00000064   0x2210             MOVS     R2,#+16
   \   00000066   0x5472             STRB     R2,[R6, R1]
   \   00000068   0x1C76             ADDS     R6,R6,#+1
   \   0000006A   0xE7E9             B.N      ??PROTOCOLO_enviaPacote_2
    273            
    274            PROTOCOLO_bufferTx[indice++] = DLE;
   \                     ??PROTOCOLO_enviaPacote_3:
   \   0000006C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable11_4
   \   00000070   0x2110             MOVS     R1,#+16
   \   00000072   0x5431             STRB     R1,[R6, R0]
   \   00000074   0x1C76             ADDS     R6,R6,#+1
    275            PROTOCOLO_bufferTx[indice++] = ETX;
   \   00000076   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000078   0x....             LDR.N    R0,??DataTable11_4
   \   0000007A   0x2103             MOVS     R1,#+3
   \   0000007C   0x5431             STRB     R1,[R6, R0]
   \   0000007E   0x1C76             ADDS     R6,R6,#+1
    276            
    277            PROTOCOLO_bytesParaEnviar = indice-1;
   \   00000080   0x1E70             SUBS     R0,R6,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable11_2
   \   00000084   0x7008             STRB     R0,[R1, #+0]
    278            PROTOCOLO_bytesEnviados = 1;
   \   00000086   0x....             LDR.N    R0,??DataTable11_3
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
    279            U3THR = PROTOCOLO_bufferTx[0];  
   \   0000008C   0x....             LDR.N    R0,??DataTable11_5  ;; 0x4009c000
   \   0000008E   0x....             LDR.N    R1,??DataTable11_4
   \   00000090   0x7809             LDRB     R1,[R1, #+0]
   \   00000092   0x7001             STRB     R1,[R0, #+0]
    280          }
   \   00000094   0xBD70             POP      {R4-R6,PC}       ;; return
   \   00000096                      REQUIRE U3RBRTHR
    281          /***********************************************************************************
    282          *       Descrição       :       Verifica se o buffer de transmissão está vazio
    283          *       Parametros      :       nenhum
    284          *       Retorno         :       Tamanho do buffer de transmissão
    285          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    286          unsigned short int PROTOCOLO_bytesNoBufferTx(void){
    287            
    288            return PROTOCOLO_bytesParaEnviar;
   \                     PROTOCOLO_bytesNoBufferTx:
   \   00000000   0x....             LDR.N    R0,??DataTable11_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x4770             BX       LR               ;; return
    289          }
    290          /***********************************************************************************
    291          *       Descrição       :       envia data direto
    292          *       Parametros      :       nenhum
    293          *       Retorno         :       nenhum
    294          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    295          void PROTOCOLO_enviaDadosDireto(unsigned char *buffer,unsigned char tamanho){
   \                     PROTOCOLO_enviaDadosDireto:
   \   00000000   0xB410             PUSH     {R4}
    296            
    297            for(unsigned char i=0;i<tamanho;i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE005             B.N      ??PROTOCOLO_enviaDadosDireto_0
    298              PROTOCOLO_bufferTx[i] = buffer[i];
   \                     ??PROTOCOLO_enviaDadosDireto_1:
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x....             LDR.N    R4,??DataTable11_4
   \   0000000E   0x5513             STRB     R3,[R2, R4]
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \                     ??PROTOCOLO_enviaDadosDireto_0:
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x428A             CMP      R2,R1
   \   00000018   0xD3F5             BCC.N    ??PROTOCOLO_enviaDadosDireto_1
    299            
    300            PROTOCOLO_bytesParaEnviar = tamanho-1;
   \   0000001A   0x1E49             SUBS     R1,R1,#+1
   \   0000001C   0x....             LDR.N    R2,??DataTable11_2
   \   0000001E   0x7011             STRB     R1,[R2, #+0]
    301            PROTOCOLO_bytesEnviados = 1;
   \   00000020   0x....             LDR.N    R1,??DataTable11_3
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x700A             STRB     R2,[R1, #+0]
    302            U3THR = buffer[0];    
   \   00000026   0x....             LDR.N    R1,??DataTable11_5  ;; 0x4009c000
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    303          }
   \   0000002C   0xBC10             POP      {R4}
   \   0000002E   0x4770             BX       LR               ;; return
   \   00000030                      REQUIRE U3RBRTHR
    304          /***********************************************************************************
    305          *       Descrição       :       Lê a quantidade de parâmetros existentes
    306          *                               na tabela de parâmetros do sistema
    307          *       Parametros      :       nenhum
    308          *       Retorno         :       nenhum
    309          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          void PROTOCOLO_decodifica_tamanho_tabela(void){
   \                     PROTOCOLO_decodifica_tamanho_tabela:
   \   00000000   0xB580             PUSH     {R7,LR}
    311            unsigned short int quantidade = PARAMETROS_get_tamanho_lista();
                                                   ^
Warning[Pe223]: function "PARAMETROS_get_tamanho_lista" declared implicitly
   \   00000002   0x.... 0x....      BL       PARAMETROS_get_tamanho_lista
    312            
    313            PROTOCOLO_bufferTmp[0]  = DXTNET_READ_PARAMETERS_TABLE_SIZE;
   \   00000006   0x....             LDR.N    R1,??DataTable11_14
   \   00000008   0x2211             MOVS     R2,#+17
   \   0000000A   0x700A             STRB     R2,[R1, #+0]
    314            PROTOCOLO_bufferTmp[2]  = quantidade>>8;
   \   0000000C   0x....             LDR.N    R1,??DataTable11_14
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x0A02             LSRS     R2,R0,#+8
   \   00000012   0x708A             STRB     R2,[R1, #+2]
    315            PROTOCOLO_bufferTmp[3]  = quantidade;
   \   00000014   0x....             LDR.N    R1,??DataTable11_14
   \   00000016   0x70C8             STRB     R0,[R1, #+3]
    316            
    317            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,5);    
   \   00000018   0x2105             MOVS     R1,#+5
   \   0000001A   0x....             LDR.N    R0,??DataTable11_14
   \   0000001C   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    318          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    319          /***********************************************************************************
    320          *       Descrição       :       Decodifica o comando para leitura
    321          *                               de um dos parâmetros da tabela
    322          *       Parametros      :       (unsigned short int) indice
    323          *       Retorno         :       nenhum
    324          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    325          void PROTOCOLO_decodifica_le_parametro(unsigned short int indice){
   \                     PROTOCOLO_decodifica_le_parametro:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    326            unsigned short int tamanho;
    327            
    328            PROTOCOLO_bufferTmp[0] =  DXTNET_READ_PARAMETERS;      
   \   00000004   0x....             LDR.N    R1,??DataTable11_14
   \   00000006   0x2212             MOVS     R2,#+18
   \   00000008   0x700A             STRB     R2,[R1, #+0]
    329            PARAMETROS_get_parametro_rec(indice,&tamanho,&PROTOCOLO_bufferTmp[4],&PROTOCOLO_bufferTmp[20],&PROTOCOLO_bufferTmp[23]);
                   ^
Warning[Pe223]: function "PARAMETROS_get_parametro_rec" declared implicitly
   \   0000000A   0x....             LDR.N    R1,??DataTable11_17
   \   0000000C   0x9100             STR      R1,[SP, #+0]
   \   0000000E   0x....             LDR.N    R3,??DataTable11_18
   \   00000010   0x....             LDR.N    R2,??DataTable11_19
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      BL       PARAMETROS_get_parametro_rec
    330            PROTOCOLO_bufferTmp[2] = tamanho>>8;
   \   0000001A   0x....             LDR.N    R0,??DataTable11_14
   \   0000001C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x0A09             LSRS     R1,R1,#+8
   \   00000024   0x7081             STRB     R1,[R0, #+2]
    331            PROTOCOLO_bufferTmp[3] = tamanho;
   \   00000026   0x....             LDR.N    R0,??DataTable11_14
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x70C1             STRB     R1,[R0, #+3]
    332            
    333            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,24+tamanho);
   \   0000002E   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000032   0xF110 0x0118      ADDS     R1,R0,#+24
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x....             LDR.N    R0,??DataTable11_14
   \   0000003A   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    334          }
   \   0000003E   0xBD07             POP      {R0-R2,PC}       ;; return
    335          /***********************************************************************************
    336          *       Descrição       :       Decodifica o comando de escrita em um 
    337          *                               dos parâmetro da tabela de leitura
    338          *       Parametros      :       (unsigned short int) endereço
    339          *                               (unsigned short int) tamanho do parâmetro
    340          *                               (unsigned char*) ponteiro para o stream
    341          *
    342          *       Retorno         :       nenhum
    343          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    344          void PROTOCOLO_decodifica_escreve_parametro(unsigned short int endereco,
    345                                                      unsigned short int tamanho,
    346                                                      unsigned char *pData){
   \                     PROTOCOLO_decodifica_escreve_parametro:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    347                                                              
    348            PROTOCOLO_bufferTmp[0] = DXTNET_WRITE_PARAMETERS;
   \   00000006   0x....             LDR.N    R0,??DataTable11_14
   \   00000008   0x2113             MOVS     R1,#+19
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    349            
    350            PARAMETROS_set_parametro_rec(endereco,tamanho,pData);
                   ^
Warning[Pe223]: function "PARAMETROS_set_parametro_rec" declared implicitly
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       PARAMETROS_set_parametro_rec
    351            
    352            PROTOCOLO_bufferTmp[2] = endereco>>8;
   \   00000018   0x....             LDR.N    R0,??DataTable11_14
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x0A29             LSRS     R1,R5,#+8
   \   0000001E   0x7081             STRB     R1,[R0, #+2]
    353            PROTOCOLO_bufferTmp[3] = endereco;
   \   00000020   0x....             LDR.N    R0,??DataTable11_14
   \   00000022   0x70C5             STRB     R5,[R0, #+3]
    354            PROTOCOLO_bufferTmp[4] = tamanho>>8;
   \   00000024   0x....             LDR.N    R0,??DataTable11_14
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x0A21             LSRS     R1,R4,#+8
   \   0000002A   0x7101             STRB     R1,[R0, #+4]
    355            PROTOCOLO_bufferTmp[5] = tamanho;
   \   0000002C   0x....             LDR.N    R0,??DataTable11_14
   \   0000002E   0x7144             STRB     R4,[R0, #+5]
    356            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,7);
   \   00000030   0x2107             MOVS     R1,#+7
   \   00000032   0x....             LDR.N    R0,??DataTable11_14
   \   00000034   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    357          }
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    358          /***********************************************************************************
    359          *       Descrição       :       Decodifica o comando format
    360          *       Parametros      :       nenhum
    361          *       Retorno         :       nenhum
    362          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    363          void PROTOCOLO_decodifica_format(void){  
   \                     PROTOCOLO_decodifica_format:
   \   00000000   0xB580             PUSH     {R7,LR}
    364            
    365            PROTOCOLO_bufferTmp[0] = DXTNET_FILE_FORMAT;
   \   00000002   0x....             LDR.N    R0,??DataTable11_14
   \   00000004   0x2114             MOVS     R1,#+20
   \   00000006   0x7001             STRB     R1,[R0, #+0]
    366            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,3);  
   \   00000008   0x2103             MOVS     R1,#+3
   \   0000000A   0x....             LDR.N    R0,??DataTable11_14
   \   0000000C   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    367            
    368            FSA_format_audio_memory();  
                   ^
Warning[Pe223]: function "FSA_format_audio_memory" declared implicitly
   \   00000010   0x.... 0x....      BL       FSA_format_audio_memory
    369          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    370          /***********************************************************************************
    371          *       Descrição       :       Decodifica o comando para escrita de um bloco
    372          *                               na memória flash de dados
    373          *       Parametros      :       (unsigned int) endereço
    374          *                               (unsigned char*) ponteiro para os dados
    375          *                               (unsigned short int) tamanho do bloco de dados
    376          *       Retorno         :       nenhum
    377          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    378          void PROTOCOLO_decodifica_write_block(unsigned int endereco,unsigned char *pData,
    379                                                unsigned short int size){
   \                     PROTOCOLO_decodifica_write_block:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    380                                                  
    381            PROTOCOLO_bufferTmp[0] = DXTNET_WRITE_BLOCK;
   \   00000008   0x....             LDR.N    R0,??DataTable11_14
   \   0000000A   0x2115             MOVS     R1,#+21
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    382            PROTOCOLO_bufferTmp[2] = (endereco>>24);
   \   0000000E   0x0E20             LSRS     R0,R4,#+24
   \   00000010   0x....             LDR.N    R1,??DataTable11_14
   \   00000012   0x7088             STRB     R0,[R1, #+2]
    383            PROTOCOLO_bufferTmp[3] = (endereco>>16);
   \   00000014   0x0C20             LSRS     R0,R4,#+16
   \   00000016   0x....             LDR.N    R1,??DataTable11_14
   \   00000018   0x70C8             STRB     R0,[R1, #+3]
    384            PROTOCOLO_bufferTmp[4] = (endereco>>8);
   \   0000001A   0x0A20             LSRS     R0,R4,#+8
   \   0000001C   0x....             LDR.N    R1,??DataTable11_14
   \   0000001E   0x7108             STRB     R0,[R1, #+4]
    385            PROTOCOLO_bufferTmp[5] = endereco;
   \   00000020   0x....             LDR.N    R0,??DataTable11_14
   \   00000022   0x7144             STRB     R4,[R0, #+5]
    386            PROTOCOLO_bufferTmp[6] = size>>8;
   \   00000024   0x....             LDR.N    R0,??DataTable11_14
   \   00000026   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000028   0x0A31             LSRS     R1,R6,#+8
   \   0000002A   0x7181             STRB     R1,[R0, #+6]
    387            PROTOCOLO_bufferTmp[7] = size;
   \   0000002C   0x....             LDR.N    R0,??DataTable11_14
   \   0000002E   0x71C6             STRB     R6,[R0, #+7]
    388            
    389            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,9);  
   \   00000030   0x2109             MOVS     R1,#+9
   \   00000032   0x....             LDR.N    R0,??DataTable11_14
   \   00000034   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    390            SST_writeAutoAddressInc(endereco+ENDERECO_INICIAL_FLASH,pData,size);                                        
   \   00000038   0x0032             MOVS     R2,R6
   \   0000003A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0xF514 0x5000      ADDS     R0,R4,#+8192
   \   00000042   0x.... 0x....      BL       SST_writeAutoAddressInc
    391          }
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x0001D1A0         DC32     0x1d1a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x4009C008         DC32     0x4009c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     PROTOCOLO_bytesParaEnviar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     PROTOCOLO_bytesEnviados

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x4009C000         DC32     0x4009c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     ??ultimoRecebido

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     PROTOCOLO_bytesRecebidos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     PROTOCOLO_novoPacote

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x4009C014         DC32     0x4009c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     `?<Constant "MPG2-2.1.0-BR-MA">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp+0x3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp+0x17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp+0x14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp+0x4

   \                                 In section .rodata, align 4
   \                     `?<Constant "MPG2-2.1.0-BR-MA">`:
   \   00000000   0x4D 0x50          DC8 "MPG2-2.1.0-BR-MA"
   \              0x47 0x32    
   \              0x2D 0x32    
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x2D 0x42    
   \              0x52 0x2D    
   \              0x4D 0x41    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    392          /***********************************************************************************
    393          *       Fim do arquivo
    394          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PROTOCOLO_bytesNoBufferTx
       4   PROTOCOLO_checksum
      16   PROTOCOLO_decodifica_escreve_parametro
        16   -> PARAMETROS_set_parametro_rec
        16   -> PROTOCOLO_enviaPacote
       8   PROTOCOLO_decodifica_format
         8   -> FSA_format_audio_memory
         8   -> PROTOCOLO_enviaPacote
      16   PROTOCOLO_decodifica_le_parametro
        16   -> PARAMETROS_get_parametro_rec
        16   -> PROTOCOLO_enviaPacote
       8   PROTOCOLO_decodifica_tamanho_tabela
         8   -> PARAMETROS_get_tamanho_lista
         8   -> PROTOCOLO_enviaPacote
      16   PROTOCOLO_decodifica_write_block
        16   -> PROTOCOLO_enviaPacote
        16   -> SST_writeAutoAddressInc
       4   PROTOCOLO_enviaDadosDireto
      16   PROTOCOLO_enviaPacote
        16   -> PROTOCOLO_checksum
       8   PROTOCOLO_get_device
         8   -> PROTOCOLO_enviaPacote
         8   -> sprintf
       8   PROTOCOLO_ini
         8   -> UART_init
       0   PROTOCOLO_intVect
       8   PROTOCOLO_main
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_decodifica_escreve_parametro
         8   -> PROTOCOLO_decodifica_format
         8   -> PROTOCOLO_decodifica_le_parametro
         8   -> PROTOCOLO_decodifica_tamanho_tabela
         8   -> PROTOCOLO_decodifica_write_block
         8   -> PROTOCOLO_get_device
         8   -> PROTOCOLO_ini
         8   -> vTaskDelay
       0   PROTOCOLO_timerTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "MPG2-2.1.0-BR-MA">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
    1280  PROTOCOLO_bufferRx
     128  PROTOCOLO_bufferTmp
     128  PROTOCOLO_bufferTx
       1  PROTOCOLO_bytesEnviados
       8  PROTOCOLO_bytesNoBufferTx
       1  PROTOCOLO_bytesParaEnviar
       2  PROTOCOLO_bytesRecebidos
      32  PROTOCOLO_checksum
      58  PROTOCOLO_decodifica_escreve_parametro
      22  PROTOCOLO_decodifica_format
      64  PROTOCOLO_decodifica_le_parametro
      34  PROTOCOLO_decodifica_tamanho_tabela
      72  PROTOCOLO_decodifica_write_block
      48  PROTOCOLO_enviaDadosDireto
     150  PROTOCOLO_enviaPacote
      32  PROTOCOLO_get_device
      22  PROTOCOLO_ini
     412  PROTOCOLO_intVect
     214  PROTOCOLO_main
       1  PROTOCOLO_novoPacote
       2  PROTOCOLO_timerTick
       1  U3RBRTHR
       4  _A_CLRPEND0
       4  _A_U3FCR
       1  _A_U3LSR
       1  ultimoRecebido

 
 1 542 bytes in section .bss
    10 bytes in section .noinit (abs)
    20 bytes in section .rodata
 1 250 bytes in section .text
 
 1 250 bytes of CODE  memory
    20 bytes of CONST memory
 1 542 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: 4

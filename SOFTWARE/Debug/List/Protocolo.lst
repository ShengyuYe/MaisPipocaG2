###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      20/Jul/2017  13:55:20 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c             #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c -lC         #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\Protocolo.lst                  #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\Protocolo.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\Protocolo\Protocolo.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Protocolo.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  21/02/2014
     21          |
     22          |       Revisões           :  1.0.0.0
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0xe000e280
   \   __absolute union <unnamed> volatile _A_CLRPEND0
   \                     _A_CLRPEND0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009c000
   \   __absolute unsigned char volatile U3RBRTHR
   \                     U3RBRTHR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0x4009c008
   \   __absolute union <unnamed> volatile _A_U3FCR
   \                     _A_U3FCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009c014
   \   __absolute union <unnamed> const volatile _A_U3LSR
   \                     _A_U3LSR:
   \   00000000                      DS8 1
     32          #include "protocolo.h"
     33          #include "..\..\includes.h"
     34          
     35          /***********************************************************************************
     36          *       Definições locais
     37          ***********************************************************************************/
     38          #define TAM_BUF_TX                              256
     39          #define TAM_BUF_RX                              256
     40          
     41          #define STX                                     0x02
     42          #define ETX                                     0x03
     43          #define DLE                                     0x10
     44          
     45          /***********************************************************************************
     46          *       Variaveis locais
     47          ***********************************************************************************/

   \                                 In section .bss, align 4
     48          unsigned char PROTOCOLO_bufferTx[TAM_BUF_TX];
   \                     PROTOCOLO_bufferTx:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     49          unsigned char PROTOCOLO_bufferRx[TAM_BUF_RX];
   \                     PROTOCOLO_bufferRx:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
     50          unsigned char PROTOCOLO_bufferTmp[TAM_BUF_TX];
   \                     PROTOCOLO_bufferTmp:
   \   00000000                      DS8 256

   \                                 In section .bss, align 1
     51          unsigned char PROTOCOLO_bytesRecebidos;
   \                     PROTOCOLO_bytesRecebidos:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     52          unsigned char PROTOCOLO_bytesParaEnviar;
   \                     PROTOCOLO_bytesParaEnviar:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     53          unsigned char PROTOCOLO_bytesEnviados;
   \                     PROTOCOLO_bytesEnviados:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     54          unsigned char PROTOCOLO_novoPacote=0;
   \                     PROTOCOLO_novoPacote:
   \   00000000                      DS8 1
     55          
     56          
     57          /***********************************************************************************
     58          *       Funções locais
     59          ***********************************************************************************/
     60          void PROTOCOLO_enviaPacote(unsigned char *pData,unsigned short int tamanho);
     61          unsigned char PROTOCOLO_checksum(unsigned char*pData,unsigned short int tamanho);
     62          void PROTOCOLO_decodeLeBloco(unsigned long int endereco,unsigned char tamanho);
     63          void PROTOCOLO_decodeEscreveBloco(unsigned long int endereco,unsigned char tamanho,unsigned char *dados);
     64          void PROTOCOLO_decodeFormataAudioFlash(void);
     65          void PROTOCOLO_decodeEscreveTabelaMusicas(unsigned char musica,
     66                                                    unsigned long int enderecoInicial,
     67                                                    unsigned long int tamanho);
     68          void PROTOCOLO_decodeLeituraTabelaMusicas(unsigned char musica);
     69          void PROTOCOLO_decodeEscreveParametro(unsigned char indice,unsigned short int valor);
     70          void PROTOCOLO_decodeLeParametro(unsigned char indice);
     71          void PROTOCOLO_decodeMensagemUsuario(unsigned char indice,unsigned char *msg);
     72          void PROTOCOLO_decodeAssinaPlaca(void);
     73          void PROTOCOLO_decodifica_tamanho_parametros(void);
     74          void PROTOCOLO_decodifica_info_sobre_parametro(unsigned short int parametro);
     75          void PROTOCOLO_decodifica_leitura_valor_parametro(unsigned short int parametro);
     76          void PROTOCOLO_decodifica_escrita_valor_parametro(unsigned short int parametro,
     77                                                            unsigned char tipo,
     78                                                            unsigned char *valor);
     79          
     80          /***********************************************************************************
     81          *       Implementação das funções
     82          ***********************************************************************************/
     83          
     84          /***********************************************************************************
     85          *       Descrição       :       Inicialização da biblioteca
     86          *       Parametros      :       nenhum
     87          *       Retorno         :       nenhum
     88          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     89          void PROTOCOLO_ini(void){
   \                     PROTOCOLO_ini:
   \   00000000   0xB580             PUSH     {R7,LR}
     90            
     91            UART_init(3,36600,NULL,NULL,NULL);    
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xF648 0x61F8      MOVW     R1,#+36600
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       UART_init
     92          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     93          /***********************************************************************************
     94          *       Descrição       :       Função para tratamento da interrupção
     95          *                               da uart3
     96          *       Parametros      :       nenhum
     97          *       Retorno         :       nenhum
     98          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     99          void PROTOCOLO_intVect(void){  
    100            static unsigned char ultimoRecebido=0;
    101            unsigned char dummy;
    102            
    103            switch(U3IIR_bit.IID){
   \                     PROTOCOLO_intVect:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x4009c008
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD008             BEQ.N    ??PROTOCOLO_intVect_0
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD023             BEQ.N    ??PROTOCOLO_intVect_1
   \   00000014   0x2803             CMP      R0,#+3
   \   00000016   0xF000 0x80AB      BEQ.W    ??PROTOCOLO_intVect_2
   \   0000001A   0x2806             CMP      R0,#+6
   \   0000001C   0xF000 0x80B0      BEQ.W    ??PROTOCOLO_intVect_3
   \   00000020   0xE0AE             B.N      ??PROTOCOLO_intVect_4
    104              case THRE:
    105                         if(PROTOCOLO_bytesParaEnviar){
   \                     ??PROTOCOLO_intVect_0:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD016             BEQ.N    ??PROTOCOLO_intVect_5
    106                           U3THR = PROTOCOLO_bufferTx[PROTOCOLO_bytesEnviados++];
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000036   0x5C40             LDRB     R0,[R0, R1]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable11_4  ;; 0x4009c000
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    107                           PROTOCOLO_bytesParaEnviar--;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    108                         }
    109                         break; 
   \                     ??PROTOCOLO_intVect_5:
   \   0000005A   0xE091             B.N      ??PROTOCOLO_intVect_4
    110              case RDA : dummy = U3RBR;
   \                     ??PROTOCOLO_intVect_1:
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x4009c000
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
    111                         switch(dummy){
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x0001             MOVS     R1,R0
   \   00000066   0x2902             CMP      R1,#+2
   \   00000068   0xD004             BEQ.N    ??PROTOCOLO_intVect_6
   \   0000006A   0x2903             CMP      R1,#+3
   \   0000006C   0xD027             BEQ.N    ??PROTOCOLO_intVect_7
   \   0000006E   0x2910             CMP      R1,#+16
   \   00000070   0xD04A             BEQ.N    ??PROTOCOLO_intVect_8
   \   00000072   0xE06A             B.N      ??PROTOCOLO_intVect_9
    112                           case STX: // Quando receber [DLE]+[STX] - marca inicio de novo pacote
    113                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_6:
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   00000078   0x7809             LDRB     R1,[R1, #+0]
   \   0000007A   0x2910             CMP      R1,#+16
   \   0000007C   0xD108             BNE.N    ??PROTOCOLO_intVect_10
    114                                       PROTOCOLO_bytesRecebidos = 0;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    115                                       ultimoRecebido = 255;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   0000008A   0x21FF             MOVS     R1,#+255
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
   \   0000008E   0xE015             B.N      ??PROTOCOLO_intVect_11
    116                                     }
    117                                     else{
    118                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_10:
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000094   0x7809             LDRB     R1,[R1, #+0]
   \   00000096   0x29FF             CMP      R1,#+255
   \   00000098   0xD00C             BEQ.N    ??PROTOCOLO_intVect_12
    119                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                         
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   0000009E   0x7809             LDRB     R1,[R1, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   000000A4   0x5488             STRB     R0,[R1, R2]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0x1C40             ADDS     R0,R0,#+1
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000000B2   0x7008             STRB     R0,[R1, #+0]
    120                                       
    121                                       ultimoRecebido = STX;
   \                     ??PROTOCOLO_intVect_12:
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   000000B8   0x2102             MOVS     R1,#+2
   \   000000BA   0x7001             STRB     R1,[R0, #+0]
    122                                     }
    123                                     
    124                                     break;
   \                     ??PROTOCOLO_intVect_11:
   \   000000BC   0xE057             B.N      ??PROTOCOLO_intVect_13
    125                           case ETX: // Quando receber [DLE]+[ETX] - marca fim do novo pacote
    126                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_7:
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   000000C2   0x7809             LDRB     R1,[R1, #+0]
   \   000000C4   0x2910             CMP      R1,#+16
   \   000000C6   0xD108             BNE.N    ??PROTOCOLO_intVect_14
    127                                       PROTOCOLO_novoPacote = 255;
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000000CC   0x21FF             MOVS     R1,#+255
   \   000000CE   0x7001             STRB     R1,[R0, #+0]
    128                                       ultimoRecebido = 255;
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   000000D4   0x21FF             MOVS     R1,#+255
   \   000000D6   0x7001             STRB     R1,[R0, #+0]
   \   000000D8   0xE015             B.N      ??PROTOCOLO_intVect_15
    129                                     }
    130                                     else{
    131                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_14:
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000000DE   0x7809             LDRB     R1,[R1, #+0]
   \   000000E0   0x29FF             CMP      R1,#+255
   \   000000E2   0xD00C             BEQ.N    ??PROTOCOLO_intVect_16
    132                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                         
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000000E8   0x7809             LDRB     R1,[R1, #+0]
   \   000000EA   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   000000EE   0x5488             STRB     R0,[R1, R2]
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000000F4   0x7800             LDRB     R0,[R0, #+0]
   \   000000F6   0x1C40             ADDS     R0,R0,#+1
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000000FC   0x7008             STRB     R0,[R1, #+0]
    133                                       
    134                                       ultimoRecebido = ETX;
   \                     ??PROTOCOLO_intVect_16:
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   00000102   0x2103             MOVS     R1,#+3
   \   00000104   0x7001             STRB     R1,[R0, #+0]
    135                                     }                   
    136                                     break;
   \                     ??PROTOCOLO_intVect_15:
   \   00000106   0xE032             B.N      ??PROTOCOLO_intVect_13
    137                           case DLE: // Quando receber [DLE]+[DLE] recebe 0x10 dentro do buffer
    138                                     if(ultimoRecebido == DLE){
   \                     ??PROTOCOLO_intVect_8:
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000010C   0x7809             LDRB     R1,[R1, #+0]
   \   0000010E   0x2910             CMP      R1,#+16
   \   00000110   0xD116             BNE.N    ??PROTOCOLO_intVect_17
    139                                       if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1))
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000116   0x7809             LDRB     R1,[R1, #+0]
   \   00000118   0x29FF             CMP      R1,#+255
   \   0000011A   0xD00C             BEQ.N    ??PROTOCOLO_intVect_18
    140                                         PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000120   0x7809             LDRB     R1,[R1, #+0]
   \   00000122   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   00000126   0x5488             STRB     R0,[R1, R2]
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x1C40             ADDS     R0,R0,#+1
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000134   0x7008             STRB     R0,[R1, #+0]
    141                                       ultimoRecebido = 255;
   \                     ??PROTOCOLO_intVect_18:
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   0000013A   0x21FF             MOVS     R1,#+255
   \   0000013C   0x7001             STRB     R1,[R0, #+0]
   \   0000013E   0xE003             B.N      ??PROTOCOLO_intVect_19
    142                                     }                      
    143                                     else
    144                                       ultimoRecebido = DLE;
   \                     ??PROTOCOLO_intVect_17:
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   00000144   0x2110             MOVS     R1,#+16
   \   00000146   0x7001             STRB     R1,[R0, #+0]
    145                                     break;
   \                     ??PROTOCOLO_intVect_19:
   \   00000148   0xE011             B.N      ??PROTOCOLO_intVect_13
    146                           default :
    147                                     if(PROTOCOLO_bytesRecebidos<(TAM_BUF_RX-1)) 
   \                     ??PROTOCOLO_intVect_9:
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   0000014E   0x7809             LDRB     R1,[R1, #+0]
   \   00000150   0x29FF             CMP      R1,#+255
   \   00000152   0xD00C             BEQ.N    ??PROTOCOLO_intVect_20
    148                                       PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos++] = dummy;                                                                            
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000158   0x7809             LDRB     R1,[R1, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   0000015E   0x5488             STRB     R0,[R1, R2]
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000164   0x7800             LDRB     R0,[R0, #+0]
   \   00000166   0x1C40             ADDS     R0,R0,#+1
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   0000016C   0x7008             STRB     R0,[R1, #+0]
    149                                     break;
    150                         }
    151                         
    152                         //ultimoRecebido = dummy;
    153                         break;      
   \                     ??PROTOCOLO_intVect_20:
   \                     ??PROTOCOLO_intVect_13:
   \   0000016E   0xE007             B.N      ??PROTOCOLO_intVect_4
    154              case RLS : 
    155                         dummy = U3LSR;
   \                     ??PROTOCOLO_intVect_2:
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable11_9  ;; 0x4009c014
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
    156                         dummy = U3RBR;               
   \   00000176   0x.... 0x....      LDR.W    R1,??DataTable11_4  ;; 0x4009c000
   \   0000017A   0x7809             LDRB     R1,[R1, #+0]
   \   0000017C   0x0008             MOVS     R0,R1
    157                         break;      
   \   0000017E   0xE7FF             B.N      ??PROTOCOLO_intVect_4
    158              case CTI :
    159                         break;      
    160            }  
    161            
    162            //Apaga o flag de interrupção pendente
    163            CLRPEND0 |= (0x01)<<5;       
   \                     ??PROTOCOLO_intVect_3:
   \                     ??PROTOCOLO_intVect_4:
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable11_10  ;; 0xe000e280
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable11_10  ;; 0xe000e280
   \   0000018E   0x6008             STR      R0,[R1, #+0]
    164          }
   \   00000190   0x4770             BX       LR               ;; return
   \   00000192                      REQUIRE U3RBRTHR
   \   00000192                      REQUIRE _A_U3LSR
   \   00000192                      REQUIRE _A_U3FCR
   \   00000192                      REQUIRE _A_CLRPEND0

   \                                 In section .bss, align 1
   \                     ??ultimoRecebido:
   \   00000000                      DS8 1
    165          /***********************************************************************************
    166          *       Descrição       :       Tick de timer para a biblioteca do protocolo
    167          *       Parametros      :       nenhum
    168          *       Retorno         :       nenhum
    169          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    170          void PROTOCOLO_timerTick(void){
    171            
    172            
    173            
    174          }
   \                     PROTOCOLO_timerTick:
   \   00000000   0x4770             BX       LR               ;; return
    175          /***********************************************************************************
    176          *       Descrição       :       Calcula o checksum de um pacote de dados
    177          *       Parametros      :       (unsigned char*) ponteiro para o início do pacote
    178          *                               (unsigned short int) tamanho do pacote
    179          *       Retorno         :       (unsigned char) checksum do pacote
    180          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          unsigned char PROTOCOLO_checksum(unsigned char*pData,unsigned short int tamanho){
   \                     PROTOCOLO_checksum:
   \   00000000   0xB410             PUSH     {R4}
    182            unsigned short int soma=0;
   \   00000002   0x2200             MOVS     R2,#+0
    183          
    184            for(unsigned short int i=0;i<tamanho;i++)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??PROTOCOLO_checksum_0
    185              soma+= pData[i];
   \                     ??PROTOCOLO_checksum_1:
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??PROTOCOLO_checksum_0:
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??PROTOCOLO_checksum_1
    186            
    187            return (unsigned char)(256-soma);    
   \   00000018   0x4250             RSBS     R0,R2,#+0
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    188          }
    189          /***********************************************************************************
    190          *       Descrição       :       Thread do protocolo
    191          *       Protocolo       :       (void*) pPar
    192          *       Retorno         :       nenhum
    193          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          void PROTOCOLO_main(void*pPar){
   \                     PROTOCOLO_main:
   \   00000000   0xB580             PUSH     {R7,LR}
    195            
    196            PROTOCOLO_ini();
   \   00000002   0x.... 0x....      BL       PROTOCOLO_ini
   \   00000006   0xE012             B.N      ??PROTOCOLO_main_0
    197            //WATCHDOG_init(0);  
    198            
    199            for(;;){
    200                  
    201              //FEEDS_THE_DOG();
    202              
    203              if(PROTOCOLO_novoPacote){
    204                PROTOCOLO_novoPacote = 0;        
    205                if(PROTOCOLO_checksum(PROTOCOLO_bufferRx,PROTOCOLO_bufferRx[1]-1)==PROTOCOLO_bufferRx[PROTOCOLO_bytesRecebidos-1]){      
    206                  switch(PROTOCOLO_bufferRx[0]){
    207                   case READ_DATA_FLASH_BLOCK:              
    208                        PROTOCOLO_decodeLeBloco     (PROTOCOLO_bufferRx[2]<<24 | PROTOCOLO_bufferRx[3]<<16 | PROTOCOLO_bufferRx[4]<<8 | PROTOCOLO_bufferRx[5],PROTOCOLO_bufferRx[6]);
    209                        break;
    210                   case WRITE_DATA_FLASH_BLOCK:
    211                        PROTOCOLO_decodeEscreveBloco(PROTOCOLO_bufferRx[2]<<24 | PROTOCOLO_bufferRx[3]<<16 | PROTOCOLO_bufferRx[4]<<8 | PROTOCOLO_bufferRx[5],PROTOCOLO_bufferRx[6],&PROTOCOLO_bufferRx[7]);
    212                        break;
    213                   case FORMAT_AUDIO_FLASH:
    214                        PROTOCOLO_decodeFormataAudioFlash();
    215                        break;
    216                   case WRITE_MUSIC_TABLE:
    217                        PROTOCOLO_decodeEscreveTabelaMusicas(PROTOCOLO_bufferRx[2],
    218                                                             PROTOCOLO_bufferRx[3]<<16 | PROTOCOLO_bufferRx[4]<<8 | PROTOCOLO_bufferRx[5],
    219                                                             PROTOCOLO_bufferRx[6]<<16 | PROTOCOLO_bufferRx[7]<<8 | PROTOCOLO_bufferRx[8]);
    220                        break;
    221                   case READ_MUSIC_TABLE:
    222                        PROTOCOLO_decodeLeituraTabelaMusicas(PROTOCOLO_bufferRx[2]);
    223                        break;          
    224                   case GET_PARAMETERS_LENGHT:
    225                        PROTOCOLO_decodifica_tamanho_parametros();
    226                        break;
    227                   case GET_PARAMETER_INFO:
    228                        PROTOCOLO_decodifica_info_sobre_parametro(PROTOCOLO_bufferRx[2]<<8 | PROTOCOLO_bufferRx[3]);
    229                        break;
    230                   case GET_PARAMETER_DATA:
    231                        PROTOCOLO_decodifica_leitura_valor_parametro(PROTOCOLO_bufferRx[2]<<8 | PROTOCOLO_bufferRx[3]);
    232                        break;
    233                   case SET_PARAMETER_DATA:
    234                        PROTOCOLO_decodifica_escrita_valor_parametro(PROTOCOLO_bufferRx[2]<<8 | PROTOCOLO_bufferRx[3],
    235                                                                     PROTOCOLO_bufferRx[4],
    236                                                                    &PROTOCOLO_bufferRx[5]);
   \                     ??PROTOCOLO_main_1:
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable11_11
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000010   0x7901             LDRB     R1,[R0, #+4]
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000016   0x7880             LDRB     R0,[R0, #+2]
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable11_7
   \   0000001C   0x78DB             LDRB     R3,[R3, #+3]
   \   0000001E   0xEA53 0x2000      ORRS     R0,R3,R0, LSL #+8
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x.... 0x....      BL       PROTOCOLO_decodifica_escrita_valor_parametro
    237                        break;
    238                  }
    239                }      
    240              }
    241              vTaskDelay(1);
   \                     ??PROTOCOLO_main_2:
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       vTaskDelay
   \                     ??PROTOCOLO_main_0:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD0F7             BEQ.N    ??PROTOCOLO_main_2
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x1E41             SUBS     R1,R0,#+1
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000004E   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000056   0x7809             LDRB     R1,[R1, #+0]
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   0000005C   0x1889             ADDS     R1,R1,R2
   \   0000005E   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x4288             CMP      R0,R1
   \   00000066   0xD1DF             BNE.N    ??PROTOCOLO_main_2
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD00D             BEQ.N    ??PROTOCOLO_main_3
   \   00000072   0xD3D9             BCC.N    ??PROTOCOLO_main_2
   \   00000074   0x2803             CMP      R0,#+3
   \   00000076   0xD03C             BEQ.N    ??PROTOCOLO_main_4
   \   00000078   0xD321             BCC.N    ??PROTOCOLO_main_5
   \   0000007A   0x2805             CMP      R0,#+5
   \   0000007C   0xD05D             BEQ.N    ??PROTOCOLO_main_6
   \   0000007E   0xD33B             BCC.N    ??PROTOCOLO_main_7
   \   00000080   0x2807             CMP      R0,#+7
   \   00000082   0xD063             BEQ.N    ??PROTOCOLO_main_8
   \   00000084   0xD35F             BCC.N    ??PROTOCOLO_main_9
   \   00000086   0x2809             CMP      R0,#+9
   \   00000088   0xD0BE             BEQ.N    ??PROTOCOLO_main_1
   \   0000008A   0xD36B             BCC.N    ??PROTOCOLO_main_10
   \   0000008C   0xE7CC             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_3:
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000092   0x7981             LDRB     R1,[R0, #+6]
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000098   0x7880             LDRB     R0,[R0, #+2]
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   0000009E   0x78D2             LDRB     R2,[R2, #+3]
   \   000000A0   0x0412             LSLS     R2,R2,#+16
   \   000000A2   0xEA52 0x6000      ORRS     R0,R2,R0, LSL #+24
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   000000AA   0x7912             LDRB     R2,[R2, #+4]
   \   000000AC   0xEA50 0x2002      ORRS     R0,R0,R2, LSL #+8
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable11_7
   \   000000B4   0x7952             LDRB     R2,[R2, #+5]
   \   000000B6   0x4310             ORRS     R0,R2,R0
   \   000000B8   0x.... 0x....      BL       PROTOCOLO_decodeLeBloco
   \   000000BC   0xE7B4             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_5:
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable11_12
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000C6   0x7981             LDRB     R1,[R0, #+6]
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000CC   0x7880             LDRB     R0,[R0, #+2]
   \   000000CE   0x.... 0x....      LDR.W    R3,??DataTable11_7
   \   000000D2   0x78DB             LDRB     R3,[R3, #+3]
   \   000000D4   0x041B             LSLS     R3,R3,#+16
   \   000000D6   0xEA53 0x6000      ORRS     R0,R3,R0, LSL #+24
   \   000000DA   0x.... 0x....      LDR.W    R3,??DataTable11_7
   \   000000DE   0x791B             LDRB     R3,[R3, #+4]
   \   000000E0   0xEA50 0x2003      ORRS     R0,R0,R3, LSL #+8
   \   000000E4   0x.... 0x....      LDR.W    R3,??DataTable11_7
   \   000000E8   0x795B             LDRB     R3,[R3, #+5]
   \   000000EA   0x4318             ORRS     R0,R3,R0
   \   000000EC   0x.... 0x....      BL       PROTOCOLO_decodeEscreveBloco
   \   000000F0   0xE79A             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_4:
   \   000000F2   0x.... 0x....      BL       PROTOCOLO_decodeFormataAudioFlash
   \   000000F6   0xE797             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_7:
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000FC   0x7980             LDRB     R0,[R0, #+6]
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000102   0x79C9             LDRB     R1,[R1, #+7]
   \   00000104   0x0209             LSLS     R1,R1,#+8
   \   00000106   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000010E   0x7A09             LDRB     R1,[R1, #+8]
   \   00000110   0xEA51 0x0200      ORRS     R2,R1,R0
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000118   0x78C0             LDRB     R0,[R0, #+3]
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000011E   0x7909             LDRB     R1,[R1, #+4]
   \   00000120   0x0209             LSLS     R1,R1,#+8
   \   00000122   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000012A   0x7949             LDRB     R1,[R1, #+5]
   \   0000012C   0x4301             ORRS     R1,R1,R0
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000132   0x7880             LDRB     R0,[R0, #+2]
   \   00000134   0x.... 0x....      BL       PROTOCOLO_decodeEscreveTabelaMusicas
   \   00000138   0xE776             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_6:
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000013E   0x7880             LDRB     R0,[R0, #+2]
   \   00000140   0x.... 0x....      BL       PROTOCOLO_decodeLeituraTabelaMusicas
   \   00000144   0xE770             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_9:
   \   00000146   0x.... 0x....      BL       PROTOCOLO_decodifica_tamanho_parametros
   \   0000014A   0xE76D             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_8:
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000150   0x7880             LDRB     R0,[R0, #+2]
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000156   0x78C9             LDRB     R1,[R1, #+3]
   \   00000158   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000015C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015E   0x.... 0x....      BL       PROTOCOLO_decodifica_info_sobre_parametro
   \   00000162   0xE761             B.N      ??PROTOCOLO_main_2
   \                     ??PROTOCOLO_main_10:
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000168   0x7880             LDRB     R0,[R0, #+2]
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   0000016E   0x78C9             LDRB     R1,[R1, #+3]
   \   00000170   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000174   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000176   0x.... 0x....      BL       PROTOCOLO_decodifica_leitura_valor_parametro
   \   0000017A   0xE755             B.N      ??PROTOCOLO_main_2
    242            }    
    243          }
    244          /***********************************************************************************
    245          *       Descrição       :       Encapsula os dados que serão enviados
    246          *                               pela rede
    247          *       Parametros      :       (unsigned char*) ponteiro para os dados que serão
    248          *                                               enviados
    249          *       Retorno         :       nenhum
    250          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    251          void PROTOCOLO_enviaPacote(unsigned char *pData,unsigned short int tamanho){
   \                     PROTOCOLO_enviaPacote:
   \   00000000   0xB430             PUSH     {R4,R5}
    252            unsigned char indice=0;
   \   00000002   0x2200             MOVS     R2,#+0
    253            
    254            PROTOCOLO_bufferTx[indice++] = DLE;
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable11_3
   \   0000000A   0x2410             MOVS     R4,#+16
   \   0000000C   0x54D4             STRB     R4,[R2, R3]
   \   0000000E   0x1C52             ADDS     R2,R2,#+1
    255            PROTOCOLO_bufferTx[indice++] = STX;
   \   00000010   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable11_3
   \   00000016   0x2402             MOVS     R4,#+2
   \   00000018   0x54D4             STRB     R4,[R2, R3]
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
    256            for(unsigned char i=0;i<tamanho;i++)
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0xE007             B.N      ??PROTOCOLO_enviaPacote_0
    257              if(pData[i]==DLE){
    258                PROTOCOLO_bufferTx[indice++] = DLE;
    259                PROTOCOLO_bufferTx[indice++] = DLE;
    260              }
    261              else
    262                PROTOCOLO_bufferTx[indice++] = pData[i];
   \                     ??PROTOCOLO_enviaPacote_1:
   \   00000020   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000022   0x5C1C             LDRB     R4,[R3, R0]
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable11_3
   \   0000002A   0x5554             STRB     R4,[R2, R5]
   \   0000002C   0x1C52             ADDS     R2,R2,#+1
   \                     ??PROTOCOLO_enviaPacote_2:
   \   0000002E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??PROTOCOLO_enviaPacote_0:
   \   00000030   0x001C             MOVS     R4,R3
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x428C             CMP      R4,R1
   \   0000003A   0xD210             BCS.N    ??PROTOCOLO_enviaPacote_3
   \   0000003C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003E   0x5C1C             LDRB     R4,[R3, R0]
   \   00000040   0x2C10             CMP      R4,#+16
   \   00000042   0xD1ED             BNE.N    ??PROTOCOLO_enviaPacote_1
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x.... 0x....      LDR.W    R4,??DataTable11_3
   \   0000004A   0x2510             MOVS     R5,#+16
   \   0000004C   0x5515             STRB     R5,[R2, R4]
   \   0000004E   0x1C52             ADDS     R2,R2,#+1
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable11_3
   \   00000056   0x2510             MOVS     R5,#+16
   \   00000058   0x5515             STRB     R5,[R2, R4]
   \   0000005A   0x1C52             ADDS     R2,R2,#+1
   \   0000005C   0xE7E7             B.N      ??PROTOCOLO_enviaPacote_2
    263            
    264            PROTOCOLO_bufferTx[indice++] = DLE;
   \                     ??PROTOCOLO_enviaPacote_3:
   \   0000005E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000064   0x2110             MOVS     R1,#+16
   \   00000066   0x5411             STRB     R1,[R2, R0]
   \   00000068   0x1C52             ADDS     R2,R2,#+1
    265            PROTOCOLO_bufferTx[indice++] = ETX;
   \   0000006A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000070   0x2103             MOVS     R1,#+3
   \   00000072   0x5411             STRB     R1,[R2, R0]
   \   00000074   0x1C52             ADDS     R2,R2,#+1
    266            
    267            PROTOCOLO_bytesParaEnviar = indice-1;
   \   00000076   0x1E50             SUBS     R0,R2,#+1
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
    268            PROTOCOLO_bytesEnviados = 1;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    269            U3THR = PROTOCOLO_bufferTx[0];  
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x4009c000
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000008E   0x7809             LDRB     R1,[R1, #+0]
   \   00000090   0x7001             STRB     R1,[R0, #+0]
    270          }
   \   00000092   0xBC30             POP      {R4,R5}
   \   00000094   0x4770             BX       LR               ;; return
   \   00000096                      REQUIRE U3RBRTHR
    271          /***********************************************************************************
    272          *       Descrição       :       Lê um bloco de dados da dataflash
    273          *       Parametros      :       nenhum
    274          *       Retorno         :       nenhum
    275          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    276          void PROTOCOLO_decodeLeBloco(unsigned long int endereco,unsigned char tamanho){
   \                     PROTOCOLO_decodeLeBloco:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    277                                              
    278            if(tamanho>128){     
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C81             CMP      R4,#+129
   \   00000008   0xDB19             BLT.N    ??PROTOCOLO_decodeLeBloco_0
    279              PROTOCOLO_bufferTmp[0] = READ_DATA_FLASH_BLOCK | 0x80;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   0000000E   0x2181             MOVS     R1,#+129
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    280              PROTOCOLO_bufferTmp[1] = 4;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0x7041             STRB     R1,[R0, #+1]
    281              PROTOCOLO_bufferTmp[2] = 1;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x7081             STRB     R1,[R0, #+2]
    282              PROTOCOLO_bufferTmp[3] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,3);
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000028   0x.... 0x....      BL       PROTOCOLO_checksum
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   00000030   0x70C8             STRB     R0,[R1, #+3]
    283              
    284              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,4);  
   \   00000032   0x2104             MOVS     R1,#+4
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000038   0x.... 0x....      BL       PROTOCOLO_enviaPacote
   \   0000003C   0xE037             B.N      ??PROTOCOLO_decodeLeBloco_1
    285            }
    286            else{
    287              PROTOCOLO_bufferTmp[0] = READ_DATA_FLASH_BLOCK;
   \                     ??PROTOCOLO_decodeLeBloco_0:
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x700A             STRB     R2,[R1, #+0]
    288              PROTOCOLO_bufferTmp[1] = tamanho+8;
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   0000004A   0xF114 0x0208      ADDS     R2,R4,#+8
   \   0000004E   0x704A             STRB     R2,[R1, #+1]
    289              PROTOCOLO_bufferTmp[2] = endereco>>24;
   \   00000050   0x0E01             LSRS     R1,R0,#+24
   \   00000052   0x.... 0x....      LDR.W    R2,??DataTable11_13
   \   00000056   0x7091             STRB     R1,[R2, #+2]
    290              PROTOCOLO_bufferTmp[3] = endereco>>16;
   \   00000058   0x0C01             LSRS     R1,R0,#+16
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable11_13
   \   0000005E   0x70D1             STRB     R1,[R2, #+3]
    291              PROTOCOLO_bufferTmp[4] = endereco>>8;
   \   00000060   0x0A01             LSRS     R1,R0,#+8
   \   00000062   0x.... 0x....      LDR.W    R2,??DataTable11_13
   \   00000066   0x7111             STRB     R1,[R2, #+4]
    292              PROTOCOLO_bufferTmp[5] = endereco;
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   0000006C   0x7148             STRB     R0,[R1, #+5]
    293              PROTOCOLO_bufferTmp[6] = tamanho;
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   00000072   0x718C             STRB     R4,[R1, #+6]
    294             
    295              SST_highSpeedRead(endereco+AREA_AUDIO,&PROTOCOLO_bufferTmp[7],tamanho);
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x0022             MOVS     R2,R4
   \   00000078   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable11_14
   \   0000007E   0xF510 0x5040      ADDS     R0,R0,#+12288
   \   00000082   0x.... 0x....      BL       SST_highSpeedRead
    296            
    297              PROTOCOLO_bufferTmp[7+tamanho] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,7+tamanho);
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x1DE1             ADDS     R1,R4,#+7
   \   0000008A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000090   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   0000009A   0x1861             ADDS     R1,R4,R1
   \   0000009C   0x71C8             STRB     R0,[R1, #+7]
    298              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,tamanho+8);  
   \   0000009E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A0   0xF114 0x0108      ADDS     R1,R4,#+8
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   000000AA   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    299            }
    300          }
   \                     ??PROTOCOLO_decodeLeBloco_1:
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    301          /***********************************************************************************
    302          *       Descrição       :       Escreve um bloco de dados
    303          *                               na memória de dados
    304          *       Parametros      :       (unsigned int) endereco inicial da escrita
    305          *                               (unsigned char) tamanho do bloco
    306          *                               (unsigned char*) ponteiro para os dados
    307          *       Retorno         :       nenhum
    308          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    309          void PROTOCOLO_decodeEscreveBloco(unsigned long int endereco,unsigned char tamanho,
    310                                            unsigned char *dados){
   \                     PROTOCOLO_decodeEscreveBloco:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0013             MOVS     R3,R2
    311            
    312            if(tamanho>128){    
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x2981             CMP      R1,#+129
   \   00000008   0xDB14             BLT.N    ??PROTOCOLO_decodeEscreveBloco_0
    313              PROTOCOLO_bufferTmp[0] = WRITE_DATA_FLASH_BLOCK | 0x80;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   0000000E   0x2182             MOVS     R1,#+130
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    314              PROTOCOLO_bufferTmp[1] = 4;
   \   00000012   0x....             LDR.N    R0,??DataTable11_13
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x7041             STRB     R1,[R0, #+1]
    315              PROTOCOLO_bufferTmp[2] = 1;
   \   00000018   0x....             LDR.N    R0,??DataTable11_13
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    316              PROTOCOLO_bufferTmp[3] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,3);
   \   0000001E   0x2103             MOVS     R1,#+3
   \   00000020   0x....             LDR.N    R0,??DataTable11_13
   \   00000022   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000026   0x....             LDR.N    R1,??DataTable11_13
   \   00000028   0x70C8             STRB     R0,[R1, #+3]
    317              
    318              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,4);      
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0x....             LDR.N    R0,??DataTable11_13
   \   0000002E   0x.... 0x....      BL       PROTOCOLO_enviaPacote
   \   00000032   0xE024             B.N      ??PROTOCOLO_decodeEscreveBloco_1
    319            }
    320            else{
    321              PROTOCOLO_bufferTmp[0] = WRITE_DATA_FLASH_BLOCK;
   \                     ??PROTOCOLO_decodeEscreveBloco_0:
   \   00000034   0x....             LDR.N    R2,??DataTable11_13
   \   00000036   0x2402             MOVS     R4,#+2
   \   00000038   0x7014             STRB     R4,[R2, #+0]
    322              PROTOCOLO_bufferTmp[1] = 8;
   \   0000003A   0x....             LDR.N    R2,??DataTable11_13
   \   0000003C   0x2408             MOVS     R4,#+8
   \   0000003E   0x7054             STRB     R4,[R2, #+1]
    323              PROTOCOLO_bufferTmp[2] = endereco>>24;
   \   00000040   0x0E02             LSRS     R2,R0,#+24
   \   00000042   0x....             LDR.N    R4,??DataTable11_13
   \   00000044   0x70A2             STRB     R2,[R4, #+2]
    324              PROTOCOLO_bufferTmp[3] = endereco>>16;
   \   00000046   0x0C02             LSRS     R2,R0,#+16
   \   00000048   0x....             LDR.N    R4,??DataTable11_13
   \   0000004A   0x70E2             STRB     R2,[R4, #+3]
    325              PROTOCOLO_bufferTmp[4] = endereco>>8;
   \   0000004C   0x0A02             LSRS     R2,R0,#+8
   \   0000004E   0x....             LDR.N    R4,??DataTable11_13
   \   00000050   0x7122             STRB     R2,[R4, #+4]
    326              PROTOCOLO_bufferTmp[5] = endereco;
   \   00000052   0x....             LDR.N    R2,??DataTable11_13
   \   00000054   0x7150             STRB     R0,[R2, #+5]
    327              PROTOCOLO_bufferTmp[6] = tamanho;
   \   00000056   0x....             LDR.N    R2,??DataTable11_13
   \   00000058   0x7191             STRB     R1,[R2, #+6]
    328             
    329              SST_writeAutoAddressInc(endereco+AREA_AUDIO,dados,tamanho);
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x000A             MOVS     R2,R1
   \   0000005E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000060   0x0019             MOVS     R1,R3
   \   00000062   0xF510 0x5040      ADDS     R0,R0,#+12288
   \   00000066   0x.... 0x....      BL       SST_writeAutoAddressInc
    330            
    331              PROTOCOLO_bufferTmp[7] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,7);
   \   0000006A   0x2107             MOVS     R1,#+7
   \   0000006C   0x....             LDR.N    R0,??DataTable11_13
   \   0000006E   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000072   0x....             LDR.N    R1,??DataTable11_13
   \   00000074   0x71C8             STRB     R0,[R1, #+7]
    332              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,8);  
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x....             LDR.N    R0,??DataTable11_13
   \   0000007A   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    333            }                                    
    334          }
   \                     ??PROTOCOLO_decodeEscreveBloco_1:
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
    335          /***********************************************************************************
    336          *       Descrição       :      Formata a área da flash onde são alocados
    337          *                              os arquivos de audio
    338          *       Parametros      :      nenhum
    339          *       Retorno         :      nenhum
    340          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    341          void PROTOCOLO_decodeFormataAudioFlash(void){
   \                     PROTOCOLO_decodeFormataAudioFlash:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    342            unsigned long int enderecoInicial=AREA_AUDIO;
   \   00000002   0xF44F 0x5440      MOV      R4,#+12288
    343            
    344            for(unsigned short int i=0;i<599;i++){
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE005             B.N      ??PROTOCOLO_decodeFormataAudioFlash_0
    345              SST_erase4kbSector(enderecoInicial);
   \                     ??PROTOCOLO_decodeFormataAudioFlash_1:
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       SST_erase4kbSector
    346              enderecoInicial+=4096;
   \   00000010   0xF514 0x5480      ADDS     R4,R4,#+4096
    347              //FEEDS_THE_DOG();
    348            }
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PROTOCOLO_decodeFormataAudioFlash_0:
   \   00000016   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000018   0xF240 0x2057      MOVW     R0,#+599
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xDBF4             BLT.N    ??PROTOCOLO_decodeFormataAudioFlash_1
    349              
    350            PROTOCOLO_bufferTmp[0] = FORMAT_AUDIO_FLASH;
   \   00000020   0x....             LDR.N    R0,??DataTable11_13
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x7001             STRB     R1,[R0, #+0]
    351            PROTOCOLO_bufferTmp[1] = 3;
   \   00000026   0x....             LDR.N    R0,??DataTable11_13
   \   00000028   0x2103             MOVS     R1,#+3
   \   0000002A   0x7041             STRB     R1,[R0, #+1]
    352            PROTOCOLO_bufferTmp[2] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,2);
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x....             LDR.N    R0,??DataTable11_13
   \   00000030   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000034   0x....             LDR.N    R1,??DataTable11_13
   \   00000036   0x7088             STRB     R0,[R1, #+2]
    353            
    354            PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,3);  
   \   00000038   0x2103             MOVS     R1,#+3
   \   0000003A   0x....             LDR.N    R0,??DataTable11_13
   \   0000003C   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    355          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    356          /***********************************************************************************
    357          *       Descrição       :       Escreve valores na tabela de musica do sistema
    358          *       Parametros      :       (unsigned char) música
    359          *                               (unsigned long int) endereco inicial
    360          *                               (unsigned long int) tamanho da música
    361          *       Retorno         :       nenhum
    362          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    363          void PROTOCOLO_decodeEscreveTabelaMusicas(unsigned char musica,
    364                                                    unsigned long int enderecoInicial,
    365                                                    unsigned long int tamanho){
   \                     PROTOCOLO_decodeEscreveTabelaMusicas:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    366                                                      
    367            if(musica>3){
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C04             CMP      R4,#+4
   \   0000000E   0xDB13             BLT.N    ??PROTOCOLO_decodeEscreveTabelaMusicas_0
    368              PROTOCOLO_bufferTmp[0] = WRITE_MUSIC_TABLE | 0x80;
   \   00000010   0x....             LDR.N    R0,??DataTable11_13
   \   00000012   0x2184             MOVS     R1,#+132
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    369              PROTOCOLO_bufferTmp[1] = 4;
   \   00000016   0x....             LDR.N    R0,??DataTable11_13
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x7041             STRB     R1,[R0, #+1]
    370              PROTOCOLO_bufferTmp[2] = 1;
   \   0000001C   0x....             LDR.N    R0,??DataTable11_13
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x7081             STRB     R1,[R0, #+2]
    371              PROTOCOLO_bufferTmp[3] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,3);
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x....             LDR.N    R0,??DataTable11_13
   \   00000026   0x.... 0x....      BL       PROTOCOLO_checksum
   \   0000002A   0x....             LDR.N    R1,??DataTable11_13
   \   0000002C   0x70C8             STRB     R0,[R1, #+3]
    372              
    373              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,4);                                                    
   \   0000002E   0x2104             MOVS     R1,#+4
   \   00000030   0x....             LDR.N    R0,??DataTable11_13
   \   00000032   0x.... 0x....      BL       PROTOCOLO_enviaPacote
   \   00000036   0xE031             B.N      ??PROTOCOLO_decodeEscreveTabelaMusicas_1
    374            } 
    375            else{
    376              
    377              unsigned int temp;
    378              
    379              temp = enderecoInicial + AREA_AUDIO;
   \                     ??PROTOCOLO_decodeEscreveTabelaMusicas_0:
   \   00000038   0xF515 0x5040      ADDS     R0,R5,#+12288
   \   0000003C   0x9000             STR      R0,[SP, #+0]
    380              PARAMETROS_grava(ADR_INICIO_BLOCO_MUSICA+musica,(void*)&temp);
   \   0000003E   0xA900             ADD      R1,SP,#+0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0xF114 0x0012      ADDS     R0,R4,#+18
   \   00000046   0x.... 0x....      BL       PARAMETROS_grava
    381              
    382              temp = tamanho;
   \   0000004A   0x9600             STR      R6,[SP, #+0]
    383              PARAMETROS_grava(ADR_TAMANHO_BLOCO_MUSICA+musica,(void*)&temp);
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0xF114 0x0016      ADDS     R0,R4,#+22
   \   00000054   0x.... 0x....      BL       PARAMETROS_grava
    384              
    385              PROTOCOLO_bufferTmp[0] = WRITE_MUSIC_TABLE;
   \   00000058   0x....             LDR.N    R0,??DataTable11_13
   \   0000005A   0x2104             MOVS     R1,#+4
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    386              PROTOCOLO_bufferTmp[1] = 10;
   \   0000005E   0x....             LDR.N    R0,??DataTable11_13
   \   00000060   0x210A             MOVS     R1,#+10
   \   00000062   0x7041             STRB     R1,[R0, #+1]
    387              PROTOCOLO_bufferTmp[2] = musica;
   \   00000064   0x....             LDR.N    R0,??DataTable11_13
   \   00000066   0x7084             STRB     R4,[R0, #+2]
    388              PROTOCOLO_bufferTmp[3] = enderecoInicial>>16;
   \   00000068   0x0C28             LSRS     R0,R5,#+16
   \   0000006A   0x....             LDR.N    R1,??DataTable11_13
   \   0000006C   0x70C8             STRB     R0,[R1, #+3]
    389              PROTOCOLO_bufferTmp[4] = enderecoInicial>>8;
   \   0000006E   0x0A28             LSRS     R0,R5,#+8
   \   00000070   0x....             LDR.N    R1,??DataTable11_13
   \   00000072   0x7108             STRB     R0,[R1, #+4]
    390              PROTOCOLO_bufferTmp[5] = enderecoInicial;
   \   00000074   0x....             LDR.N    R0,??DataTable11_13
   \   00000076   0x7145             STRB     R5,[R0, #+5]
    391              PROTOCOLO_bufferTmp[6] = tamanho>>16;
   \   00000078   0x0C30             LSRS     R0,R6,#+16
   \   0000007A   0x....             LDR.N    R1,??DataTable11_13
   \   0000007C   0x7188             STRB     R0,[R1, #+6]
    392              PROTOCOLO_bufferTmp[7] = tamanho>>8;
   \   0000007E   0x0A30             LSRS     R0,R6,#+8
   \   00000080   0x....             LDR.N    R1,??DataTable11_13
   \   00000082   0x71C8             STRB     R0,[R1, #+7]
    393              PROTOCOLO_bufferTmp[8] = tamanho;
   \   00000084   0x....             LDR.N    R0,??DataTable11_13
   \   00000086   0x7206             STRB     R6,[R0, #+8]
    394              PROTOCOLO_bufferTmp[9] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,9);
   \   00000088   0x2109             MOVS     R1,#+9
   \   0000008A   0x....             LDR.N    R0,??DataTable11_13
   \   0000008C   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000090   0x....             LDR.N    R1,??DataTable11_13
   \   00000092   0x7248             STRB     R0,[R1, #+9]
    395              
    396              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,10);                      
   \   00000094   0x210A             MOVS     R1,#+10
   \   00000096   0x....             LDR.N    R0,??DataTable11_13
   \   00000098   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    397            }                                                                                                                                     
    398          }
   \                     ??PROTOCOLO_decodeEscreveTabelaMusicas_1:
   \   0000009C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    399          /***********************************************************************************
    400          *       Descrição       :       Lê os valores da tabela de música do sistema
    401          *       Parametros      :       (unsigned char) música
    402          *       Retorno         :       nenhum
    403          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    404          void PROTOCOLO_decodeLeituraTabelaMusicas(unsigned char musica){
   \                     PROTOCOLO_decodeLeituraTabelaMusicas:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    405            
    406            if(musica>3){
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xDB13             BLT.N    ??PROTOCOLO_decodeLeituraTabelaMusicas_0
    407              PROTOCOLO_bufferTmp[0] = READ_MUSIC_TABLE | 0x80;
   \   0000000A   0x....             LDR.N    R0,??DataTable11_13
   \   0000000C   0x2185             MOVS     R1,#+133
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    408              PROTOCOLO_bufferTmp[1] = 4;
   \   00000010   0x....             LDR.N    R0,??DataTable11_13
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0x7041             STRB     R1,[R0, #+1]
    409              PROTOCOLO_bufferTmp[2] = 1;
   \   00000016   0x....             LDR.N    R0,??DataTable11_13
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7081             STRB     R1,[R0, #+2]
    410              PROTOCOLO_bufferTmp[3] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,3);
   \   0000001C   0x2103             MOVS     R1,#+3
   \   0000001E   0x....             LDR.N    R0,??DataTable11_13
   \   00000020   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000024   0x....             LDR.N    R1,??DataTable11_13
   \   00000026   0x70C8             STRB     R0,[R1, #+3]
    411              
    412              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,4);   
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x....             LDR.N    R0,??DataTable11_13
   \   0000002C   0x.... 0x....      BL       PROTOCOLO_enviaPacote
   \   00000030   0xE037             B.N      ??PROTOCOLO_decodeLeituraTabelaMusicas_1
    413            }
    414            else{
    415              unsigned int enderecoInicial;
    416              unsigned int tamanho;
    417              
    418              
    419              PARAMETROS_le(ADR_INICIO_BLOCO_MUSICA+musica ,(void*)&enderecoInicial);
   \                     ??PROTOCOLO_decodeLeituraTabelaMusicas_0:
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0xF114 0x0012      ADDS     R0,R4,#+18
   \   0000003A   0x.... 0x....      BL       PARAMETROS_le
    420              PARAMETROS_le(ADR_TAMANHO_BLOCO_MUSICA+musica,(void*)&tamanho);
   \   0000003E   0xA901             ADD      R1,SP,#+4
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0xF114 0x0016      ADDS     R0,R4,#+22
   \   00000046   0x.... 0x....      BL       PARAMETROS_le
    421              
    422              enderecoInicial -= AREA_AUDIO;
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0xF5B0 0x5040      SUBS     R0,R0,#+12288
   \   00000050   0x9000             STR      R0,[SP, #+0]
    423              
    424              PROTOCOLO_bufferTmp[0] = READ_MUSIC_TABLE;
   \   00000052   0x....             LDR.N    R0,??DataTable11_13
   \   00000054   0x2105             MOVS     R1,#+5
   \   00000056   0x7001             STRB     R1,[R0, #+0]
    425              PROTOCOLO_bufferTmp[1] = 10;
   \   00000058   0x....             LDR.N    R0,??DataTable11_13
   \   0000005A   0x210A             MOVS     R1,#+10
   \   0000005C   0x7041             STRB     R1,[R0, #+1]
    426              PROTOCOLO_bufferTmp[2] = musica;
   \   0000005E   0x....             LDR.N    R0,??DataTable11_13
   \   00000060   0x7084             STRB     R4,[R0, #+2]
    427              PROTOCOLO_bufferTmp[3] = enderecoInicial>>16;
   \   00000062   0x9800             LDR      R0,[SP, #+0]
   \   00000064   0x0C00             LSRS     R0,R0,#+16
   \   00000066   0x....             LDR.N    R1,??DataTable11_13
   \   00000068   0x70C8             STRB     R0,[R1, #+3]
    428              PROTOCOLO_bufferTmp[4] = enderecoInicial>>8;
   \   0000006A   0x9800             LDR      R0,[SP, #+0]
   \   0000006C   0x0A00             LSRS     R0,R0,#+8
   \   0000006E   0x....             LDR.N    R1,??DataTable11_13
   \   00000070   0x7108             STRB     R0,[R1, #+4]
    429              PROTOCOLO_bufferTmp[5] = enderecoInicial;
   \   00000072   0x....             LDR.N    R0,??DataTable11_13
   \   00000074   0x9900             LDR      R1,[SP, #+0]
   \   00000076   0x7141             STRB     R1,[R0, #+5]
    430              PROTOCOLO_bufferTmp[6] = tamanho>>16;
   \   00000078   0x9801             LDR      R0,[SP, #+4]
   \   0000007A   0x0C00             LSRS     R0,R0,#+16
   \   0000007C   0x....             LDR.N    R1,??DataTable11_13
   \   0000007E   0x7188             STRB     R0,[R1, #+6]
    431              PROTOCOLO_bufferTmp[7] = tamanho>>8;
   \   00000080   0x9801             LDR      R0,[SP, #+4]
   \   00000082   0x0A00             LSRS     R0,R0,#+8
   \   00000084   0x....             LDR.N    R1,??DataTable11_13
   \   00000086   0x71C8             STRB     R0,[R1, #+7]
    432              PROTOCOLO_bufferTmp[8] = tamanho;
   \   00000088   0x....             LDR.N    R0,??DataTable11_13
   \   0000008A   0x9901             LDR      R1,[SP, #+4]
   \   0000008C   0x7201             STRB     R1,[R0, #+8]
    433              PROTOCOLO_bufferTmp[9] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,9);
   \   0000008E   0x2109             MOVS     R1,#+9
   \   00000090   0x....             LDR.N    R0,??DataTable11_13
   \   00000092   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000096   0x....             LDR.N    R1,??DataTable11_13
   \   00000098   0x7248             STRB     R0,[R1, #+9]
    434              
    435              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,10);   
   \   0000009A   0x210A             MOVS     R1,#+10
   \   0000009C   0x....             LDR.N    R0,??DataTable11_13
   \   0000009E   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    436            }  
    437          }
   \                     ??PROTOCOLO_decodeLeituraTabelaMusicas_1:
   \   000000A2   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    438          /***********************************************************************************
    439          *       Descrição       :       envia data direto
    440          *       Parametros      :       nenhum
    441          *       Retorno         :       nenhum
    442          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    443          void PROTOCOLO_enviaDadosDireto(unsigned char *buffer,unsigned char tamanho){
   \                     PROTOCOLO_enviaDadosDireto:
   \   00000000   0xB410             PUSH     {R4}
    444            
    445            for(unsigned char i=0;i<tamanho;i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE005             B.N      ??PROTOCOLO_enviaDadosDireto_0
    446              PROTOCOLO_bufferTx[i] = buffer[i];
   \                     ??PROTOCOLO_enviaDadosDireto_1:
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x....             LDR.N    R4,??DataTable11_3
   \   0000000E   0x5513             STRB     R3,[R2, R4]
   \   00000010   0x1C52             ADDS     R2,R2,#+1
   \                     ??PROTOCOLO_enviaDadosDireto_0:
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x428A             CMP      R2,R1
   \   00000018   0xD3F5             BCC.N    ??PROTOCOLO_enviaDadosDireto_1
    447            
    448            PROTOCOLO_bytesParaEnviar = tamanho-1;
   \   0000001A   0x1E49             SUBS     R1,R1,#+1
   \   0000001C   0x....             LDR.N    R2,??DataTable11_1
   \   0000001E   0x7011             STRB     R1,[R2, #+0]
    449            PROTOCOLO_bytesEnviados = 1;
   \   00000020   0x....             LDR.N    R1,??DataTable11_2
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x700A             STRB     R2,[R1, #+0]
    450            U3THR = buffer[0];    
   \   00000026   0x....             LDR.N    R1,??DataTable11_4  ;; 0x4009c000
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    451          }
   \   0000002C   0xBC10             POP      {R4}
   \   0000002E   0x4770             BX       LR               ;; return
   \   00000030                      REQUIRE U3RBRTHR
    452          /***********************************************************************************
    453          *       Descrição       :       Verifica se o buffer de transmissão está vazio
    454          *       Parametros      :       nenhum
    455          *       Retorno         :       Tamanho do buffer de transmissão
    456          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    457          unsigned short int PROTOCOLO_bytesNoBufferTx(void){
    458            
    459            return PROTOCOLO_bytesParaEnviar;
   \                     PROTOCOLO_bytesNoBufferTx:
   \   00000000   0x....             LDR.N    R0,??DataTable11_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x4770             BX       LR               ;; return
    460          }
    461          /***********************************************************************************
    462          *       Descrição       :       Decodofica o comando para leitura do tamanho
    463          *                               da listagem de parâmetros
    464          *       Parametros      :       nenhum
    465          *       Retorno         :       nenhum
    466          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    467          void PROTOCOLO_decodifica_tamanho_parametros(void){
   \                     PROTOCOLO_decodifica_tamanho_parametros:
   \   00000000   0xB580             PUSH     {R7,LR}
    468            
    469              PROTOCOLO_bufferTmp[0] = GET_PARAMETERS_LENGHT;
   \   00000002   0x....             LDR.N    R0,??DataTable11_13
   \   00000004   0x2106             MOVS     R1,#+6
   \   00000006   0x7001             STRB     R1,[R0, #+0]
    470              PROTOCOLO_bufferTmp[1] = 6;
   \   00000008   0x....             LDR.N    R0,??DataTable11_13
   \   0000000A   0x2106             MOVS     R1,#+6
   \   0000000C   0x7041             STRB     R1,[R0, #+1]
    471              PROTOCOLO_bufferTmp[2] = TAMANHO_PARAMETROS>>8;    
   \   0000000E   0x....             LDR.N    R0,??DataTable11_13
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7081             STRB     R1,[R0, #+2]
    472              PROTOCOLO_bufferTmp[3] = TAMANHO_PARAMETROS;
   \   00000014   0x....             LDR.N    R0,??DataTable11_13
   \   00000016   0x211A             MOVS     R1,#+26
   \   00000018   0x70C1             STRB     R1,[R0, #+3]
    473              PROTOCOLO_bufferTmp[4] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,4);
   \   0000001A   0x2104             MOVS     R1,#+4
   \   0000001C   0x....             LDR.N    R0,??DataTable11_13
   \   0000001E   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000022   0x....             LDR.N    R1,??DataTable11_13
   \   00000024   0x7108             STRB     R0,[R1, #+4]
    474              PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,5);    
   \   00000026   0x2105             MOVS     R1,#+5
   \   00000028   0x....             LDR.N    R0,??DataTable11_13
   \   0000002A   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    475          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    476          /***********************************************************************************
    477          *       Descrição       :       Decodifica o comando que solocita a informação
    478          *                               sobre um dos parâmetros
    479          *       Parametros      :       (unsigned int) parametro
    480          *       Retorno         :       nenhum
    481          ***********************************************************************************/
    482          extern const sPARAMETROS tabela_parametros[];

   \                                 In section .text, align 2, keep-with-next
    483          void PROTOCOLO_decodifica_info_sobre_parametro(unsigned short int parametro){
   \                     PROTOCOLO_decodifica_info_sobre_parametro:
   \   00000000   0xB580             PUSH     {R7,LR}
    484            
    485             PROTOCOLO_bufferTmp[0] = GET_PARAMETER_INFO;
   \   00000002   0x....             LDR.N    R1,??DataTable11_13
   \   00000004   0x2207             MOVS     R2,#+7
   \   00000006   0x700A             STRB     R2,[R1, #+0]
    486             PROTOCOLO_bufferTmp[1] = parametro;
   \   00000008   0x....             LDR.N    R1,??DataTable11_13
   \   0000000A   0x7048             STRB     R0,[R1, #+1]
    487             PROTOCOLO_bufferTmp[2] = tabela_parametros[parametro].length;
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x212C             MOVS     R1,#+44
   \   00000010   0x....             LDR.N    R2,??DataTable11_15
   \   00000012   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000016   0x8889             LDRH     R1,[R1, #+4]
   \   00000018   0x....             LDR.N    R2,??DataTable11_13
   \   0000001A   0x7091             STRB     R1,[R2, #+2]
    488             
    489             for(unsigned char i=0;i<32;i++)    
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xE00C             B.N      ??PROTOCOLO_decodifica_info_sobre_parametro_0
    490               PROTOCOLO_bufferTmp[3+i] = tabela_parametros[parametro].nome[i];
   \                     ??PROTOCOLO_decodifica_info_sobre_parametro_1:
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x222C             MOVS     R2,#+44
   \   00000026   0x....             LDR.N    R3,??DataTable11_15
   \   00000028   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   0000002C   0x188A             ADDS     R2,R1,R2
   \   0000002E   0x7992             LDRB     R2,[R2, #+6]
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x....             LDR.N    R3,??DataTable11_13
   \   00000034   0x18CB             ADDS     R3,R1,R3
   \   00000036   0x70DA             STRB     R2,[R3, #+3]
   \   00000038   0x1C49             ADDS     R1,R1,#+1
   \                     ??PROTOCOLO_decodifica_info_sobre_parametro_0:
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x2920             CMP      R1,#+32
   \   0000003E   0xDBEF             BLT.N    ??PROTOCOLO_decodifica_info_sobre_parametro_1
    491             
    492             PROTOCOLO_bufferTmp[36] = tabela_parametros[parametro].ext[0];
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x212C             MOVS     R1,#+44
   \   00000044   0x....             LDR.N    R2,??DataTable11_15
   \   00000046   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   0000004A   0xF891 0x1026      LDRB     R1,[R1, #+38]
   \   0000004E   0x....             LDR.N    R2,??DataTable11_13
   \   00000050   0xF882 0x1024      STRB     R1,[R2, #+36]
    493             PROTOCOLO_bufferTmp[37] = tabela_parametros[parametro].ext[1];
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x212C             MOVS     R1,#+44
   \   00000058   0x....             LDR.N    R2,??DataTable11_15
   \   0000005A   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   0000005E   0xF891 0x1027      LDRB     R1,[R1, #+39]
   \   00000062   0x....             LDR.N    R2,??DataTable11_13
   \   00000064   0xF882 0x1025      STRB     R1,[R2, #+37]
    494             PROTOCOLO_bufferTmp[38] = tabela_parametros[parametro].ext[2];
   \   00000068   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   0x212C             MOVS     R1,#+44
   \   0000006C   0x....             LDR.N    R2,??DataTable11_15
   \   0000006E   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000072   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000076   0x....             LDR.N    R1,??DataTable11_13
   \   00000078   0xF881 0x0026      STRB     R0,[R1, #+38]
    495             PROTOCOLO_bufferTmp[39] = PROTOCOLO_checksum(PROTOCOLO_bufferTmp,39);
   \   0000007C   0x2127             MOVS     R1,#+39
   \   0000007E   0x....             LDR.N    R0,??DataTable11_13
   \   00000080   0x.... 0x....      BL       PROTOCOLO_checksum
   \   00000084   0x....             LDR.N    R1,??DataTable11_13
   \   00000086   0xF881 0x0027      STRB     R0,[R1, #+39]
    496             PROTOCOLO_enviaPacote(PROTOCOLO_bufferTmp,40);
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x....             LDR.N    R0,??DataTable11_13
   \   0000008E   0x.... 0x....      BL       PROTOCOLO_enviaPacote
    497          }
   \   00000092   0xBD01             POP      {R0,PC}          ;; return
    498          /***********************************************************************************
    499          *       Descrição       :       Decodifica o comando que solicita a leitura
    500          *                               de um dos parâmetros do sistema
    501          *       Parametros      :       (unsigned short int) parâmetro
    502          8       Retorno         :       nenhum
    503          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    504          void PROTOCOLO_decodifica_leitura_valor_parametro(unsigned short int parametro){
    505            
    506            
    507          }
   \                     PROTOCOLO_decodifica_leitura_valor_parametro:
   \   00000000   0x4770             BX       LR               ;; return
    508          /***********************************************************************************
    509          *       Descrição       :       Decodifica o comando que solicita a escrita
    510          *                               de um dos parâmetros do sistema
    511          *       Parametro       :       (unsigned int) parametro
    512          *                               (unsigned char) tipo
    513          *                               (unsigned char*) dados do parâmetro
    514          *       Retorno         :       nenhum
    515          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    516          void PROTOCOLO_decodifica_escrita_valor_parametro(unsigned short int parametro,
    517                                                            unsigned char tipo,
    518                                                            unsigned char *valor){
    519                                                      
    520                                                              
    521                                                              
    522                                                              
    523                                                              
    524          }
   \                     PROTOCOLO_decodifica_escrita_valor_parametro:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x4009C008         DC32     0x4009c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     PROTOCOLO_bytesParaEnviar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     PROTOCOLO_bytesEnviados

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x4009C000         DC32     0x4009c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     ??ultimoRecebido

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     PROTOCOLO_bytesRecebidos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     PROTOCOLO_novoPacote

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x4009C014         DC32     0x4009c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx+0x5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     PROTOCOLO_bufferRx+0x7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     PROTOCOLO_bufferTmp+0x7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     tabela_parametros
    525          /***********************************************************************************
    526          *       Fim do arquivo
    527          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PROTOCOLO_bytesNoBufferTx
       4   PROTOCOLO_checksum
       8   PROTOCOLO_decodeEscreveBloco
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_enviaPacote
         8   -> SST_writeAutoAddressInc
      24   PROTOCOLO_decodeEscreveTabelaMusicas
        24   -> PARAMETROS_grava
        24   -> PROTOCOLO_checksum
        24   -> PROTOCOLO_enviaPacote
      16   PROTOCOLO_decodeFormataAudioFlash
        16   -> PROTOCOLO_checksum
        16   -> PROTOCOLO_enviaPacote
        16   -> SST_erase4kbSector
       8   PROTOCOLO_decodeLeBloco
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_enviaPacote
         8   -> SST_highSpeedRead
      16   PROTOCOLO_decodeLeituraTabelaMusicas
        16   -> PARAMETROS_le
        16   -> PROTOCOLO_checksum
        16   -> PROTOCOLO_enviaPacote
       0   PROTOCOLO_decodifica_escrita_valor_parametro
       8   PROTOCOLO_decodifica_info_sobre_parametro
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_enviaPacote
       0   PROTOCOLO_decodifica_leitura_valor_parametro
       8   PROTOCOLO_decodifica_tamanho_parametros
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_enviaPacote
       4   PROTOCOLO_enviaDadosDireto
       8   PROTOCOLO_enviaPacote
       8   PROTOCOLO_ini
         8   -> UART_init
       0   PROTOCOLO_intVect
       8   PROTOCOLO_main
         8   -> PROTOCOLO_checksum
         8   -> PROTOCOLO_decodeEscreveBloco
         8   -> PROTOCOLO_decodeEscreveTabelaMusicas
         8   -> PROTOCOLO_decodeFormataAudioFlash
         8   -> PROTOCOLO_decodeLeBloco
         8   -> PROTOCOLO_decodeLeituraTabelaMusicas
         8   -> PROTOCOLO_decodifica_escrita_valor_parametro
         8   -> PROTOCOLO_decodifica_info_sobre_parametro
         8   -> PROTOCOLO_decodifica_leitura_valor_parametro
         8   -> PROTOCOLO_decodifica_tamanho_parametros
         8   -> PROTOCOLO_ini
         8   -> vTaskDelay
       0   PROTOCOLO_timerTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
     256  PROTOCOLO_bufferRx
     256  PROTOCOLO_bufferTmp
     256  PROTOCOLO_bufferTx
       1  PROTOCOLO_bytesEnviados
       8  PROTOCOLO_bytesNoBufferTx
       1  PROTOCOLO_bytesParaEnviar
       1  PROTOCOLO_bytesRecebidos
      32  PROTOCOLO_checksum
     128  PROTOCOLO_decodeEscreveBloco
     158  PROTOCOLO_decodeEscreveTabelaMusicas
      66  PROTOCOLO_decodeFormataAudioFlash
     176  PROTOCOLO_decodeLeBloco
     164  PROTOCOLO_decodeLeituraTabelaMusicas
       2  PROTOCOLO_decodifica_escrita_valor_parametro
     148  PROTOCOLO_decodifica_info_sobre_parametro
       2  PROTOCOLO_decodifica_leitura_valor_parametro
      48  PROTOCOLO_decodifica_tamanho_parametros
      48  PROTOCOLO_enviaDadosDireto
     150  PROTOCOLO_enviaPacote
      22  PROTOCOLO_ini
     402  PROTOCOLO_intVect
     380  PROTOCOLO_main
       1  PROTOCOLO_novoPacote
       2  PROTOCOLO_timerTick
       1  U3RBRTHR
       4  _A_CLRPEND0
       4  _A_U3FCR
       1  _A_U3LSR
       1  ultimoRecebido

 
   773 bytes in section .bss
    10 bytes in section .noinit (abs)
 2 000 bytes in section .text
 
 2 000 bytes of CODE memory
   773 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: none

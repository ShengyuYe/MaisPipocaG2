###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  16:35:07 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\MDB\mdb_co #
#                    in.c                                                     #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\MDB\mdb_co #
#                    in.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Lis #
#                    t\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\ #
#                     -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\mdb_coi #
#                    n.lst                                                    #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\mdb_coin #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\MDB\mdb_coin.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  mdb_coin.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  27/02/2017
     21          |
     22          |       Revisões           :  001
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     34          #include "mdb_uart.h"
     35          #include "mdb.h"
     36          #include "mdb_coin.h"
     37          
     38          /***********************************************************************************
     39          *       Definições locais
     40          ***********************************************************************************/
     41          
     42          
     43          /***********************************************************************************
     44          *       Variaveis locais
     45          ***********************************************************************************/
     46          
     47          
     48          /***********************************************************************************
     49          *       Funções locais
     50          ***********************************************************************************/
     51          
     52          
     53          /***********************************************************************************
     54          *       Implementação das funções
     55          ***********************************************************************************/
     56          
     57          /***********************************************************************************
     58          *       Descrição       :       Força o reset do moedeiro
     59          *       Parametros      :       nenhum
     60          *       Retorno         :       (eMDB_reply) resultado da operação
     61          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     62          eMDB_reply MDBCOIN_get_device(void){
   \                     MDBCOIN_get_device:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     63            unsigned char buffer[2];
     64            unsigned char recebidos;
     65            
     66            buffer[0] = MDB_CHANGER;
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0xF88D 0x0008      STRB     R0,[SP, #+8]
     67            if(MDB_send_package(1,buffer,1,0,buffer,&recebidos)==MDB_OK){
   \   00000008   0xF10D 0x000A      ADD      R0,SP,#+10
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       MDB_send_package
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD107             BNE.N    ??MDBCOIN_get_device_0
     68                  
     69              if(buffer[0]==MDB_RESP_ACK)
   \   00000022   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??MDBCOIN_get_device_1
     70                return MDB_OK;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE002             B.N      ??MDBCOIN_get_device_2
     71              
     72              return MDB_ERROR;
   \                     ??MDBCOIN_get_device_1:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??MDBCOIN_get_device_2
     73            }
     74              
     75            return  MDB_TIMEOUT; 
   \                     ??MDBCOIN_get_device_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_get_device_2:
   \   00000034   0xBD0E             POP      {R1-R3,PC}       ;; return
     76          }
     77          /***********************************************************************************
     78          *       Descrição       :       Força o reset do moedeiro
     79          *       Parametros      :       nenhum
     80          *       Retorno         :       (eMDB_reply) resultado da operação
     81          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          eMDB_reply MDBCOIN_reset_device(void){
   \                     MDBCOIN_reset_device:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     83            unsigned char buffer[2];
     84            unsigned char recebidos;
     85            
     86            buffer[0] = COIN_RESET;
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0xF88D 0x0008      STRB     R0,[SP, #+8]
     87            if(MDB_send_package(1,buffer,1,0,buffer,&recebidos)==MDB_OK){
   \   00000008   0xF10D 0x000A      ADD      R0,SP,#+10
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       MDB_send_package
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD107             BNE.N    ??MDBCOIN_reset_device_0
     88                  
     89              if(buffer[0]==MDB_RESP_ACK)
   \   00000022   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??MDBCOIN_reset_device_1
     90                return MDB_OK;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE002             B.N      ??MDBCOIN_reset_device_2
     91              
     92              return MDB_ERROR;
   \                     ??MDBCOIN_reset_device_1:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??MDBCOIN_reset_device_2
     93            }
     94              
     95            return  MDB_TIMEOUT; 
   \                     ??MDBCOIN_reset_device_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_reset_device_2:
   \   00000034   0xBD0E             POP      {R1-R3,PC}       ;; return
     96          }
     97          /***********************************************************************************
     98          *       Descrição       :       Verifica as configurações do moedeiro
     99          *       Parametros      :       (unsigned char) nivel de implementação MDB
    100          *                               (unsigned short int) código do pai
    101          *                               (unsigned char) fator de escala
    102          *                               (unsigned char) casas decimais
    103          *                               (unsigned short int) direcionamento de moedas
    104          *                               (unsigned short int) valor dos canais
    105          *       Retorno         :       (eMDB_reply) resultado da operação
    106          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          eMDB_reply MDBCOIN_get_setup_from_device(unsigned char *mdb_message_leve,
    108                                                   unsigned short int *country,
    109                                                   unsigned char *scale_factor,
    110                                                   unsigned char *decimal_places,
    111                                                   unsigned short int *coin_type_routing,
    112                                                   unsigned char *coin_credit){
   \                     MDBCOIN_get_setup_from_device:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8050      LDR      R8,[SP, #+80]
   \   00000012   0xF8DD 0x9054      LDR      R9,[SP, #+84]
    113            unsigned char setup[36];
    114            unsigned char size;
    115            
    116            setup[0] = COIN_SETUP;
   \   00000016   0x2009             MOVS     R0,#+9
   \   00000018   0xF88D 0x000C      STRB     R0,[SP, #+12]
    117              
    118            if(MDB_send_package(1,setup,1,1,setup,&size)==MDB_OK){
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x2301             MOVS     R3,#+1
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0xA903             ADD      R1,SP,#+12
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       MDB_send_package
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD12D             BNE.N    ??MDBCOIN_get_setup_from_device_0
    119              
    120              if(mdb_message_leve!=NULL)
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD002             BEQ.N    ??MDBCOIN_get_setup_from_device_1
    121                *mdb_message_leve = setup[Z1];
   \   00000038   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
    122               
    123              if(country!=NULL)
   \                     ??MDBCOIN_get_setup_from_device_1:
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD006             BEQ.N    ??MDBCOIN_get_setup_from_device_2
    124                *country = setup[Z2]<<8 | setup[Z3];
   \   00000042   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   00000046   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   0000004A   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000004E   0x8028             STRH     R0,[R5, #+0]
    125              
    126              if(scale_factor!=NULL)
   \                     ??MDBCOIN_get_setup_from_device_2:
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD002             BEQ.N    ??MDBCOIN_get_setup_from_device_3
    127                *scale_factor = setup[Z4];
   \   00000054   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000058   0x7030             STRB     R0,[R6, #+0]
    128              
    129              if(decimal_places!=NULL)
   \                     ??MDBCOIN_get_setup_from_device_3:
   \   0000005A   0x2F00             CMP      R7,#+0
   \   0000005C   0xD002             BEQ.N    ??MDBCOIN_get_setup_from_device_4
    130                *decimal_places = setup[Z5];
   \   0000005E   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000062   0x7038             STRB     R0,[R7, #+0]
    131              
    132              if(coin_type_routing!=NULL)
   \                     ??MDBCOIN_get_setup_from_device_4:
   \   00000064   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000068   0xD007             BEQ.N    ??MDBCOIN_get_setup_from_device_5
    133                *coin_type_routing = setup[Z6]<<8 | setup[Z7];
   \   0000006A   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   0000006E   0xF89D 0x1012      LDRB     R1,[SP, #+18]
   \   00000072   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000076   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    134              
    135              if(coin_credit!=NULL)
   \                     ??MDBCOIN_get_setup_from_device_5:
   \   0000007A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000007E   0xD005             BEQ.N    ??MDBCOIN_get_setup_from_device_6
    136                memcpy(coin_credit,&setup[Z8],16);    
   \   00000080   0x2210             MOVS     R2,#+16
   \   00000082   0xF10D 0x0113      ADD      R1,SP,#+19
   \   00000086   0x4648             MOV      R0,R9
   \   00000088   0x.... 0x....      BL       memcpy
    137              
    138              return MDB_OK;
   \                     ??MDBCOIN_get_setup_from_device_6:
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xE000             B.N      ??MDBCOIN_get_setup_from_device_7
    139            }              
    140            
    141            return MDB_TIMEOUT;                                        
   \                     ??MDBCOIN_get_setup_from_device_0:
   \   00000090   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_get_setup_from_device_7:
   \   00000092   0xB00D             ADD      SP,SP,#+52
   \   00000094   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    142          }
    143          /***********************************************************************************
    144          *       Descrição       :      getter para a quantidade de moedas dentro
    145          *                              dos tubos
    146          *       Parametros      :      (unsiged short int) flag que indica se há 
    147          *                                                  moedas dentro dos tubos
    148          *                              (unsigned char*) contagem com as moedas do 16 tubos
    149          *       Retorno         :      (eMDB_reply) resultado da operação
    150          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          eMDB_reply MDBCOIN_get_tube_status_from_device(unsigned short int*tube_full_status,
    152                                                         unsigned char *tubes_counter){
   \                     MDBCOIN_get_tube_status_from_device:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    153            unsigned char tubes[36];
    154            unsigned char size;
    155            
    156            tubes[0] = COIN_TUBE_STATUS;
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0xF88D 0x000C      STRB     R0,[SP, #+12]
    157              
    158            if(MDB_send_package(1,tubes,1,1,tubes,&size)==MDB_OK){
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0xA803             ADD      R0,SP,#+12
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       MDB_send_package
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD112             BNE.N    ??MDBCOIN_get_tube_status_from_device_0
    159              
    160              if(tube_full_status!=NULL)
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD006             BEQ.N    ??MDBCOIN_get_tube_status_from_device_1
    161                *tube_full_status = tubes[Z1]<<8 | tubes[Z2];
   \   0000002A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000002E   0xF89D 0x100D      LDRB     R1,[SP, #+13]
   \   00000032   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000036   0x8020             STRH     R0,[R4, #+0]
    162              
    163              if(tubes_counter!=NULL)
   \                     ??MDBCOIN_get_tube_status_from_device_1:
   \   00000038   0x2D00             CMP      R5,#+0
   \   0000003A   0xD005             BEQ.N    ??MDBCOIN_get_tube_status_from_device_2
    164                memcpy(tubes_counter,&tubes[Z3],16);
   \   0000003C   0x2210             MOVS     R2,#+16
   \   0000003E   0xF10D 0x010E      ADD      R1,SP,#+14
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       memcpy
    165              
    166              return MDB_OK;
   \                     ??MDBCOIN_get_tube_status_from_device_2:
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE000             B.N      ??MDBCOIN_get_tube_status_from_device_3
    167            }              
    168            
    169            return MDB_TIMEOUT;                                              
   \                     ??MDBCOIN_get_tube_status_from_device_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_get_tube_status_from_device_3:
   \   0000004E   0xB00D             ADD      SP,SP,#+52
   \   00000050   0xBD30             POP      {R4,R5,PC}       ;; return
    170          }
    171          /***********************************************************************************
    172          *       Descrição       :       Habilita os canais do moedeiro e a 
    173          *                               liberação manual das moedas através 
    174          *                               do teclado
    175          *       Parametros      :       (unsigned short int) canais habilitados
    176          *                               (unsigned short int) canais com permissão para
    177          *                                                    dispenser manual
    178          *       Retorno         :       (eMDB_reply) resultado da operação
    179          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          eMDB_reply MDBCOIN_coin_type_setup(unsigned short int channels,unsigned short int manual_dispense){
   \                     MDBCOIN_coin_type_setup:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    181            unsigned char types[5];  
    182            unsigned char size;
    183            
    184            types[0] = COIN_TYPE;
   \   00000008   0x200C             MOVS     R0,#+12
   \   0000000A   0xF88D 0x000C      STRB     R0,[SP, #+12]
    185            types[1] = (unsigned char)(channels>>8);
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0A20             LSRS     R0,R4,#+8
   \   00000012   0xF88D 0x000D      STRB     R0,[SP, #+13]
    186            types[2] = (unsigned char)channels;
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xF88D 0x000E      STRB     R0,[SP, #+14]
    187            types[3] = (unsigned char)(manual_dispense>>8);
   \   0000001C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   0x0A28             LSRS     R0,R5,#+8
   \   00000020   0xF88D 0x000F      STRB     R0,[SP, #+15]
    188            types[4] = (unsigned char)manual_dispense;
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xF88D 0x0010      STRB     R0,[SP, #+16]
    189            
    190            if(MDB_send_package_long(1,types,5,0,types,&size)==MDB_OK){
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0xA803             ADD      R0,SP,#+12
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x2205             MOVS     R2,#+5
   \   00000036   0xA903             ADD      R1,SP,#+12
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       MDB_send_package_long
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE.N    ??MDBCOIN_coin_type_setup_0
    191                     
    192              return MDB_OK;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE000             B.N      ??MDBCOIN_coin_type_setup_1
    193            }              
    194            
    195            return MDB_TIMEOUT;   
   \                     ??MDBCOIN_coin_type_setup_0:
   \   00000046   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_coin_type_setup_1:
   \   00000048   0xB005             ADD      SP,SP,#+20
   \   0000004A   0xBD30             POP      {R4,R5,PC}       ;; return
    196          }
    197          /***********************************************************************************
    198          *       Descrição       :       Envia o comando para dispensar uma moeda
    199          *                               para o cliente
    200          *       Parametros      :       (unsigned char) moeda
    201          *       Retorno         :       (eMDB_reply) resultado da operação
    202          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          eMDB_reply MDBCOIN_coin_dispense(unsigned char quantidade,unsigned char coin_code){
   \                     MDBCOIN_coin_dispense:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    204            unsigned char coin[2];
    205            unsigned char size;
    206            
    207            coin[0] = COIN_DISPENSE;
   \   00000006   0x200D             MOVS     R0,#+13
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
    208            coin[1] = ((quantidade&0x0F)<<4) | (coin_code&0x0F);
   \   0000000C   0xF015 0x000F      ANDS     R0,R5,#0xF
   \   00000010   0xEA50 0x1004      ORRS     R0,R0,R4, LSL #+4
   \   00000014   0xF88D 0x0009      STRB     R0,[SP, #+9]
    209              
    210            if(MDB_send_package_long(1,coin,2,0,coin,&size)==MDB_OK){
   \   00000018   0xF10D 0x000A      ADD      R0,SP,#+10
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x2202             MOVS     R2,#+2
   \   00000026   0xA902             ADD      R1,SP,#+8
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       MDB_send_package_long
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD101             BNE.N    ??MDBCOIN_coin_dispense_0
    211                     
    212              return MDB_OK;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??MDBCOIN_coin_dispense_1
    213            }              
    214            
    215            return MDB_TIMEOUT;  
   \                     ??MDBCOIN_coin_dispense_0:
   \   00000036   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_coin_dispense_1:
   \   00000038   0xBD3E             POP      {R1-R5,PC}       ;; return
    216          }
    217          /***********************************************************************************
    218          *       Descrição       :       Solicita os eventos para o moedeiro
    219          *       Parametros      :       (eMDB_COIN_POOL_TYPE*) tipo do evento
    220          *                               (eMDB_COIN_POOL_STATUS*) status do evento
    221          *                               (unsigned char*) tipo da moeda
    222          *                               (unsigned char*) quantidade de moedas no tubo
    223          *       Retorno         :       (eMDB_reply) resultado da operação
    224          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    225          eMDB_reply MDBCOIN_poll(eMDB_COIN_POOL_TYPE *tipo_evento,
    226                                  eMDB_COIN_POOL_STATUS *status,
    227                                  unsigned char *tipo_moeda,unsigned char *quantidade_tubo){
   \                     MDBCOIN_poll:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    228            unsigned char poll[18];                          
    229            unsigned char size;                     
    230            
    231            poll[0] = COIN_POLL;  
   \   0000000C   0x200B             MOVS     R0,#+11
   \   0000000E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    232                                    
    233            if(MDB_send_package(1,poll,1,1,poll,&size)==MDB_OK){
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       MDB_send_package
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD13C             BNE.N    ??MDBCOIN_poll_0
    234              
    235              if(!size){
   \   0000002A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD103             BNE.N    ??MDBCOIN_poll_1
    236                *tipo_evento = COIN_ACK;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x7020             STRB     R0,[R4, #+0]
    237                return MDB_OK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE035             B.N      ??MDBCOIN_poll_2
    238              }
    239              
    240                if(size==2 || size==1){
   \                     ??MDBCOIN_poll_1:
   \   0000003A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000003E   0x2802             CMP      R0,#+2
   \   00000040   0xD003             BEQ.N    ??MDBCOIN_poll_3
   \   00000042   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD12C             BNE.N    ??MDBCOIN_poll_0
    241                // Evento de moeda dispensada
    242                // pelo teclado do moedeiro
    243                if(poll[0]&0x80){
   \                     ??MDBCOIN_poll_3:
   \   0000004A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000004E   0x0600             LSLS     R0,R0,#+24
   \   00000050   0xD50C             BPL.N    ??MDBCOIN_poll_4
    244                  *tipo_evento = COIN_DISPENSE_MANUALLY;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x7020             STRB     R0,[R4, #+0]
    245                  *status = COIN_POSSIBLE_CREDIT_REMOVAL;
   \   00000056   0x200D             MOVS     R0,#+13
   \   00000058   0x7028             STRB     R0,[R5, #+0]
    246                  *tipo_moeda = (poll[0]&0x70)>>4;
   \   0000005A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000005E   0xF3C0 0x1002      UBFX     R0,R0,#+4,#+3
   \   00000062   0x7030             STRB     R0,[R6, #+0]
    247                  *quantidade_tubo = poll[1];
   \   00000064   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   00000068   0x7038             STRB     R0,[R7, #+0]
   \   0000006A   0xE019             B.N      ??MDBCOIN_poll_5
    248                }
    249                else
    250                  // Evento de crédito da moeda
    251                  if(poll[0]&0x40){
   \                     ??MDBCOIN_poll_4:
   \   0000006C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000070   0x0640             LSLS     R0,R0,#+25
   \   00000072   0xD50C             BPL.N    ??MDBCOIN_poll_6
    252                    *tipo_evento = COIN_DEPOSITED;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x7020             STRB     R0,[R4, #+0]
    253                    *status = (eMDB_COIN_POOL_STATUS)((poll[0]&0x03)>>4);
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x7028             STRB     R0,[R5, #+0]
    254                    *tipo_moeda = poll[0]&0x0F;
   \   0000007C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000080   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000084   0x7030             STRB     R0,[R6, #+0]
    255                    *quantidade_tubo = poll[1];
   \   00000086   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000008A   0x7038             STRB     R0,[R7, #+0]
   \   0000008C   0xE008             B.N      ??MDBCOIN_poll_5
    256                  }      
    257                  else{
    258                    // Evento com alteração
    259                    // no status do moedeiro
    260                    *tipo_evento = COIN_STATUS;
   \                     ??MDBCOIN_poll_6:
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0x7020             STRB     R0,[R4, #+0]
    261                    *status = (eMDB_COIN_POOL_STATUS)poll[0];
   \   00000092   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000096   0x7028             STRB     R0,[R5, #+0]
    262                    *tipo_moeda = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x7030             STRB     R0,[R6, #+0]
    263                    *quantidade_tubo = 0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x7038             STRB     R0,[R7, #+0]
    264                  }              
    265                
    266                return MDB_OK;        
   \                     ??MDBCOIN_poll_5:
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE000             B.N      ??MDBCOIN_poll_2
    267              }    
    268              
    269            }              
    270            
    271            return MDB_TIMEOUT;                            
   \                     ??MDBCOIN_poll_0:
   \   000000A4   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_poll_2:
   \   000000A6   0xB009             ADD      SP,SP,#+36
   \   000000A8   0xBDF0             POP      {R4-R7,PC}       ;; return
    272          }
    273          /***********************************************************************************
    274          *       Descrição       :       Faz o dispensamento do troco 
    275          *       Parametros      :       (unsigned short int) valor
    276          *                               (unsigned char) escala
    277          *       Retorno         :       (eMDB_reply) resultado da operação
    278          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    279          eMDB_reply MDBCOIN_alternative_payout(unsigned short int value,unsigned char scale){
   \                     MDBCOIN_alternative_payout:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    280            unsigned char payout[3];
    281            unsigned char size;
    282          
    283            payout[0] = COIN_EXPANSION_COMMAND;
   \   00000008   0x200F             MOVS     R0,#+15
   \   0000000A   0xF88D 0x000C      STRB     R0,[SP, #+12]
    284            payout[1] = 0x02; // alternativa payout code
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xF88D 0x000D      STRB     R0,[SP, #+13]
    285            payout[2] = (value/scale);
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0xFB94 0xF0F5      SDIV     R0,R4,R5
   \   0000001C   0xF88D 0x000E      STRB     R0,[SP, #+14]
    286           
    287            vTaskDelay(1000);
                   ^
Warning[Pe223]: function "vTaskDelay" declared implicitly
   \   00000020   0xF44F 0x707A      MOV      R0,#+1000
   \   00000024   0x.... 0x....      BL       vTaskDelay
    288            if(MDB_send_package_long(1,payout,3,0,payout,&size)==MDB_OK){
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0xA803             ADD      R0,SP,#+12
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x2203             MOVS     R2,#+3
   \   00000034   0xA903             ADD      R1,SP,#+12
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       MDB_send_package_long
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD105             BNE.N    ??MDBCOIN_alternative_payout_0
    289              vTaskDelay(10000);         
   \   00000040   0xF242 0x7010      MOVW     R0,#+10000
   \   00000044   0x.... 0x....      BL       vTaskDelay
    290              return MDB_OK;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE000             B.N      ??MDBCOIN_alternative_payout_1
    291            }                 
    292            
    293            return MDB_TIMEOUT;          
   \                     ??MDBCOIN_alternative_payout_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_alternative_payout_1:
   \   0000004E   0xB005             ADD      SP,SP,#+20
   \   00000050   0xBD30             POP      {R4,R5,PC}       ;; return
    294          }
    295          /***********************************************************************************
    296          *       Descrição       :       Verifica as moedas que foram liberas 
    297          *       Parametros      :       (unsigned char*) moedas
    298          *       Retorno         :       (eMDB_reply) resultado da operação
    299          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    300          eMDB_reply MDBCOIN_get_payout_status(unsigned char *coins_per_channel){
   \                     MDBCOIN_get_payout_status:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    301            unsigned char payout_status[19];
    302            unsigned char size;
    303            
    304            payout_status[0] = COIN_EXPANSION_COMMAND;
   \   00000006   0x200F             MOVS     R0,#+15
   \   00000008   0xF88D 0x000C      STRB     R0,[SP, #+12]
    305            payout_status[1]= 0x03; // payout status code
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0xF88D 0x000D      STRB     R0,[SP, #+13]
    306            
    307            
    308            if(MDB_send_package(1,payout_status,2,1,payout_status,&size)==MDB_OK){
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2202             MOVS     R2,#+2
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       MDB_send_package
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD10A             BNE.N    ??MDBCOIN_get_payout_status_0
    309                     
    310              if(size==16){      
   \   0000002A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002E   0x2810             CMP      R0,#+16
   \   00000030   0xD106             BNE.N    ??MDBCOIN_get_payout_status_0
    311                memcpy(coins_per_channel,&payout_status[Z1],16);             
   \   00000032   0x2210             MOVS     R2,#+16
   \   00000034   0xA903             ADD      R1,SP,#+12
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       memcpy
    312                return MDB_OK;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??MDBCOIN_get_payout_status_1
    313              }
    314              
    315            }                 
    316            
    317            return MDB_TIMEOUT;            
   \                     ??MDBCOIN_get_payout_status_0:
   \   00000040   0x2002             MOVS     R0,#+2
   \                     ??MDBCOIN_get_payout_status_1:
   \   00000042   0xB008             ADD      SP,SP,#+32
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    318          }
    319          /***********************************************************************************
    320          *       Fim do arquivo
    321          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   MDBCOIN_alternative_payout
        32   -> MDB_send_package_long
        32   -> vTaskDelay
      24   MDBCOIN_coin_dispense
        24   -> MDB_send_package_long
      32   MDBCOIN_coin_type_setup
        32   -> MDB_send_package_long
      16   MDBCOIN_get_device
        16   -> MDB_send_package
      40   MDBCOIN_get_payout_status
        40   -> MDB_send_package
        40   -> memcpy
      80   MDBCOIN_get_setup_from_device
        80   -> MDB_send_package
        80   -> memcpy
      64   MDBCOIN_get_tube_status_from_device
        64   -> MDB_send_package
        64   -> memcpy
      56   MDBCOIN_poll
        56   -> MDB_send_package
      16   MDBCOIN_reset_device
        16   -> MDB_send_package
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      82  MDBCOIN_alternative_payout
      58  MDBCOIN_coin_dispense
      76  MDBCOIN_coin_type_setup
      54  MDBCOIN_get_device
      70  MDBCOIN_get_payout_status
     152  MDBCOIN_get_setup_from_device
      82  MDBCOIN_get_tube_status_from_device
     170  MDBCOIN_poll
      54  MDBCOIN_reset_device
      22  memcpy

 
 820 bytes in section .text
 
 798 bytes of CODE memory (+ 22 bytes shared)

Errors: none
Warnings: 1

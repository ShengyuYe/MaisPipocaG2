###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  16:35:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\Pagamentos #
#                    \Supervisao_mdb_bill.c                                   #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\Pagamentos #
#                    \Supervisao_mdb_bill.c -lC C:\repositorios\MaisPipocaG2\ #
#                    SOFTWARE\Debug\List\ -lA C:\repositorios\MaisPipocaG2\SO #
#                    FTWARE\Debug\List\ -o C:\repositorios\MaisPipocaG2\SOFTW #
#                    ARE\Debug\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\Supervi #
#                    sao_mdb_bill.lst                                         #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\Supervis #
#                    ao_mdb_bill.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\Pagamentos\Supervisao_mdb_bill.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  supervisao_mdb_bill.c
     18          |       Descrição          :  Máquina de estados que gerencia o meio de pagamento
     19          |                             MDB BILL
     20          | 
     21          |       Autor              :  Marcos Aquino
     22          |       Data criação       :  28/02/2017
     23          |
     24          |       Revisões           :  1.0.0.0
     25          |
     26          |
     27          | __________________________________________________________________________________
     28          */
     29          
     30          /***********************************************************************************
     31          *       Includes
     32          ***********************************************************************************/
     33          #include <stdio.h>
     34          #include <stdlib.h>
     35          #include <string.h>
     36          #include "..\..\includes.h"
     37          #include "supervisao_mdb_bill.h"
     38          
     39          /***********************************************************************************
     40          *       Definições
     41          ***********************************************************************************/
     42          #define RELOAD_TIMEOUT_BILL                     100
     43          #define CICLOS_RESET                            2
     44          /***********************************************************************************
     45          *       Variaveis locais
     46          ***********************************************************************************/

   \                                 In section .data, align 1
     47          unsigned char SMDBILL_bloqueio=0xFF;
   \                     SMDBILL_bloqueio:
   \   00000000   0xFF               DC8 255
     48          

   \                                 In section .bss, align 2
     49          unsigned short SMDBILL_time_out=0;
   \                     SMDBILL_time_out:
   \   00000000                      DS8 2
     50          

   \                                 In section .bss, align 1
     51          eBILL_POLL_STATE SMDBILL_estado_atual=BILL_DESABILITADO;
   \                     SMDBILL_estado_atual:
   \   00000000                      DS8 1
     52          

   \                                 In section .bss, align 4
     53          sBILL_event SMDBILL_eventos[16];
   \                     SMDBILL_eventos:
   \   00000000                      DS8 32
     54          

   \                                 In section .data, align 4
     55          unsigned char SMDBILL_valor_canais[16]={1,2,5,10,20,50,100,7};
   \                     SMDBILL_valor_canais:
   \   00000000   0x01 0x02          DC8 1, 2, 5, 10, 20, 50, 100, 7, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x05 0x0A    
   \              0x14 0x32    
   \              0x64 0x07    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     56          

   \                                 In section .bss, align 2
     57          unsigned short int SMDBILL_country;
   \                     SMDBILL_country:
   \   00000000                      DS8 2
     58          

   \                                 In section .data, align 2
     59          unsigned short int SMDBILL_escala=1;
   \                     SMDBILL_escala:
   \   00000000   0x0001             DC16 1
     60          

   \                                 In section .bss, align 1
     61          unsigned char SMDBILL_casas_decimais;
   \                     SMDBILL_casas_decimais:
   \   00000000                      DS8 1
     62          

   \                                 In section .bss, align 2
     63          unsigned short int SMDBILL_capacidade_stacker;
   \                     SMDBILL_capacidade_stacker:
   \   00000000                      DS8 2
     64          

   \                                 In section .bss, align 1
     65          unsigned char SMDBILL_scroll_capacide;
   \                     SMDBILL_scroll_capacide:
   \   00000000                      DS8 1
     66          

   \                                 In section .bss, align 2
     67          unsigned short int SMDBILL_nivel_seguranca;
   \                     SMDBILL_nivel_seguranca:
   \   00000000                      DS8 2
     68          

   \                                 In section .data, align 1
     69          unsigned char SMDBILL_reset_counter=CICLOS_RESET;
   \                     SMDBILL_reset_counter:
   \   00000000   0x02               DC8 2
     70          
     71          /***********************************************************************************
     72          *       Funções locais
     73          ***********************************************************************************/
     74          eBILL_POLL_STATE SMDBILL_estado_desabilitado(eBILL_POLL_STATE estado);
     75          
     76          eBILL_POLL_STATE SMDBILL_estado_bloqueado(eBILL_POLL_STATE estado);
     77          
     78          eBILL_POLL_STATE SMDBILL_estado_reset(eBILL_POLL_STATE estado);
     79          
     80          eBILL_POLL_STATE SMDBILL_estado_inicializa(eBILL_POLL_STATE estado);
     81          
     82          eBILL_POLL_STATE SMDBILL_estado_supervisao(eBILL_POLL_STATE estado);
     83          
     84          eBILL_POLL_STATE SMDBILL_estado_offline(eBILL_POLL_STATE estado);
     85          
     86          eBILL_POLL_STATE SMDBILL_estado_falha_dispositivo(eBILL_POLL_STATE estado);
     87          
     88          unsigned char SMDBILL_trata_eventos(unsigned char quantidade);
     89          
     90          unsigned char SMDBILL_envia_comando_scroll(void);
     91          
     92          /***********************************************************************************
     93          *       tabela de funções
     94          ***********************************************************************************/

   \                                 In section .rodata, align 4
     95          eBILL_POLL_STATE(*const MDBILL_funcs[])(eBILL_POLL_STATE)={
   \                     MDBILL_funcs:
   \   00000000   0x........         DC32 SMDBILL_estado_desabilitado, SMDBILL_estado_bloqueado
   \              0x........   
   \   00000008   0x........         DC32 SMDBILL_estado_reset, SMDBILL_estado_inicializa
   \              0x........   
   \   00000010   0x........         DC32 SMDBILL_estado_supervisao, SMDBILL_estado_offline
   \              0x........   
   \   00000018   0x........         DC32 SMDBILL_estado_falha_dispositivo
     96            SMDBILL_estado_desabilitado,
     97            SMDBILL_estado_bloqueado,
     98            SMDBILL_estado_reset,
     99            SMDBILL_estado_inicializa,
    100            SMDBILL_estado_supervisao,
    101            SMDBILL_estado_offline,
    102            SMDBILL_estado_falha_dispositivo
    103          };
    104          
    105          /***********************************************************************************
    106          *       Implementação das funções
    107          ***********************************************************************************/
    108          
    109          /***********************************************************************************
    110          *       Descrição       :       Setter para o flag de bloqueio da máquina
    111          *                               de estados que indica que o dispositivo
    112          *                               deve ser inibido
    113          *       Parametros      :       (unsigned char) flag
    114          *       Retorno         :       nenhum
    115          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    116          void SMDBILL_set_bloqueio(unsigned char bloqueio){
    117            
    118            SMDBILL_bloqueio = bloqueio;
   \                     SMDBILL_set_bloqueio:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable9
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    119          
    120          }
   \   00000006   0x4770             BX       LR               ;; return
    121          /***********************************************************************************
    122          *       Descrição       :       Função principal da máquiina de estados da
    123          *                               supervisão do noteiro MDB
    124          *       Parametros      :       nenhum
    125          *       Retorno         :       nenhum
    126          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          void SMDBILL_tick(void){
   \                     SMDBILL_tick:
   \   00000000   0xB580             PUSH     {R7,LR}
    128            
    129            SMDBILL_estado_atual = MDBILL_funcs[SMDBILL_estado_atual](SMDBILL_estado_atual);  
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   0000000C   0x7809             LDRB     R1,[R1, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable9_2
   \   00000012   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   00000016   0x4788             BLX      R1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    130          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    131          /***********************************************************************************
    132          *       Descrição       :       Função para o estado onde o noteiro
    133          *                               está desabilitado
    134          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    135          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    136          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    137          eBILL_POLL_STATE SMDBILL_estado_desabilitado(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_desabilitado:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    138            unsigned char flag;
    139            
    140            PARAMETROS_le(ADR_FLAG_MDB_BIL,(void*)&flag);
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       PARAMETROS_le
    141            
    142            if(flag)
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??SMDBILL_estado_desabilitado_0
    143              return BILL_BLOQUEADO;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE000             B.N      ??SMDBILL_estado_desabilitado_1
    144            
    145            
    146            return BILL_DESABILITADO;  
   \                     ??SMDBILL_estado_desabilitado_0:
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??SMDBILL_estado_desabilitado_1:
   \   0000001C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    147          }
    148          /***********************************************************************************
    149          *       Descrição       :       Função para o estado onde o noteiro está
    150          *                               bloqueado
    151          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    152          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    153          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    154          eBILL_POLL_STATE SMDBILL_estado_bloqueado(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_bloqueado:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    155            unsigned char tentativas=5;
   \   00000006   0x2505             MOVS     R5,#+5
    156            eMDB_reply flag;    
    157            
    158            SMDBILL_reset_counter=CICLOS_RESET;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable9_3
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    159            
    160            if(MDBILL_verifica_dispositivo()==MDB_OK){
   \   00000010   0x.... 0x....      BL       MDBILL_verifica_dispositivo
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD140             BNE.N    ??SMDBILL_estado_bloqueado_0
    161              SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000001C   0x2164             MOVS     R1,#+100
   \   0000001E   0x8001             STRH     R1,[R0, #+0]
    162              
    163              do{
    164                flag = MDBILL_set_bill_type_on_device(0,0);
   \                     ??SMDBILL_estado_bloqueado_1:
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       MDBILL_set_bill_type_on_device
   \   00000028   0x0006             MOVS     R6,R0
    165                MDBAURT_sleep(1);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       MDBAURT_sleep
    166              
    167                if(SMDBILL_time_out)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD006             BEQ.N    ??SMDBILL_estado_bloqueado_2
    168                  SMDBILL_time_out--;      
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   00000046   0x8008             STRH     R0,[R1, #+0]
    169              }
    170              while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_bloqueado_2:
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xD004             BEQ.N    ??SMDBILL_estado_bloqueado_3
   \   0000004E   0x1E6D             SUBS     R5,R5,#+1
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD1E3             BNE.N    ??SMDBILL_estado_bloqueado_1
    171              
    172              if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_bloqueado_3:
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000005C   0x8800             LDRH     R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD101             BNE.N    ??SMDBILL_estado_bloqueado_4
    173                return BILL_OFFLINE;
   \   00000062   0x2005             MOVS     R0,#+5
   \   00000064   0xE029             B.N      ??SMDBILL_estado_bloqueado_5
    174              else
    175                SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_bloqueado_4:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000006A   0x2164             MOVS     R1,#+100
   \   0000006C   0x8001             STRH     R1,[R0, #+0]
    176              
    177              unsigned char enb;  
    178              // Pula para o desabilitado
    179              // caso não esteja habilitado
    180              PARAMETROS_le(ADR_FLAG_MDB_BIL,(void*)&enb);
   \   0000006E   0xA900             ADD      R1,SP,#+0
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0x.... 0x....      BL       PARAMETROS_le
    181              if(!enb)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD101             BNE.N    ??SMDBILL_estado_bloqueado_6
    182                return BILL_DESABILITADO; 
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE01B             B.N      ??SMDBILL_estado_bloqueado_5
    183            
    184              if(flag!=MDB_OK)
   \                     ??SMDBILL_estado_bloqueado_6:
   \   00000082   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000084   0x2E00             CMP      R6,#+0
   \   00000086   0xD001             BEQ.N    ??SMDBILL_estado_bloqueado_7
    185                return BILL_OFFLINE;     
   \   00000088   0x2005             MOVS     R0,#+5
   \   0000008A   0xE016             B.N      ??SMDBILL_estado_bloqueado_5
    186              
    187              if(!SMDBILL_bloqueio)
   \                     ??SMDBILL_estado_bloqueado_7:
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable9
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD110             BNE.N    ??SMDBILL_estado_bloqueado_8
    188                return BILL_RESET_AND_CHECK;
   \   00000096   0x2002             MOVS     R0,#+2
   \   00000098   0xE00F             B.N      ??SMDBILL_estado_bloqueado_5
    189            }
    190            else{
    191              if(SMDBILL_time_out)
   \                     ??SMDBILL_estado_bloqueado_0:
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000009E   0x8800             LDRH     R0,[R0, #+0]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD007             BEQ.N    ??SMDBILL_estado_bloqueado_9
    192                SMDBILL_time_out--;
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   000000A8   0x8800             LDRH     R0,[R0, #+0]
   \   000000AA   0x1E40             SUBS     R0,R0,#+1
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   000000B0   0x8008             STRH     R0,[R1, #+0]
   \   000000B2   0xE001             B.N      ??SMDBILL_estado_bloqueado_8
    193              else
    194                return BILL_OFFLINE;
   \                     ??SMDBILL_estado_bloqueado_9:
   \   000000B4   0x2005             MOVS     R0,#+5
   \   000000B6   0xE000             B.N      ??SMDBILL_estado_bloqueado_5
    195            }  
    196            
    197            return BILL_BLOQUEADO;
   \                     ??SMDBILL_estado_bloqueado_8:
   \   000000B8   0x2001             MOVS     R0,#+1
   \                     ??SMDBILL_estado_bloqueado_5:
   \   000000BA   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    198          }
    199          /***********************************************************************************
    200          *       Descrição       :       Função para o teste de reset
    201          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    202          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    203          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    204          eBILL_POLL_STATE SMDBILL_estado_reset(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_reset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    205            unsigned char tentativas=5;
   \   00000006   0x2505             MOVS     R5,#+5
    206            eMDB_reply flag;
    207            
    208            do{
    209              
    210              flag = MDBILL_reset_device();
   \                     ??SMDBILL_estado_reset_0:
   \   00000008   0x.... 0x....      BL       MDBILL_reset_device
   \   0000000C   0x0006             MOVS     R6,R0
    211              MDBAURT_sleep(1);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       MDBAURT_sleep
    212              
    213              if(SMDBILL_time_out)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD006             BEQ.N    ??SMDBILL_estado_reset_1
    214                SMDBILL_time_out--;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
    215              
    216            }
    217            while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_reset_1:
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD004             BEQ.N    ??SMDBILL_estado_reset_2
   \   00000032   0x1E6D             SUBS     R5,R5,#+1
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E5             BNE.N    ??SMDBILL_estado_reset_0
    218            
    219            // Recomeça o ciclo de timeout se não chegou a zero
    220            // ou então vai pra o estado bloqueado caso chegou
    221            if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_reset_2:
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD101             BNE.N    ??SMDBILL_estado_reset_3
    222              return BILL_BLOQUEADO;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE04D             B.N      ??SMDBILL_estado_reset_4
    223            else
    224              SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_reset_3:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000004E   0x2164             MOVS     R1,#+100
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    225              
    226            // O reset ocorreu com sucesso
    227            if(flag==MDB_OK){
   \   00000052   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD145             BNE.N    ??SMDBILL_estado_reset_5
    228              
    229              unsigned char tamanho;
    230              tentativas = 5;
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0x0005             MOVS     R5,R0
    231              
    232              do{       
    233                 flag = MDBILL_get_poll_from_device((sBILL_event*)SMDBILL_eventos,&tamanho);
   \                     ??SMDBILL_estado_reset_6:
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   00000062   0x.... 0x....      BL       MDBILL_get_poll_from_device
   \   00000066   0x0006             MOVS     R6,R0
    234                 MDBAURT_sleep(10);
   \   00000068   0x200A             MOVS     R0,#+10
   \   0000006A   0x.... 0x....      BL       MDBAURT_sleep
    235              
    236                 if(SMDBILL_time_out)
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000072   0x8800             LDRH     R0,[R0, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD006             BEQ.N    ??SMDBILL_estado_reset_7
    237                   SMDBILL_time_out--;                  
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000007C   0x8800             LDRH     R0,[R0, #+0]
   \   0000007E   0x1E40             SUBS     R0,R0,#+1
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   00000084   0x8008             STRH     R0,[R1, #+0]
    238              }
    239              while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_reset_7:
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0x2E00             CMP      R6,#+0
   \   0000008A   0xD004             BEQ.N    ??SMDBILL_estado_reset_8
   \   0000008C   0x1E6D             SUBS     R5,R5,#+1
   \   0000008E   0x0028             MOVS     R0,R5
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD1E2             BNE.N    ??SMDBILL_estado_reset_6
    240              
    241              
    242              if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_reset_8:
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000009A   0x8800             LDRH     R0,[R0, #+0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD101             BNE.N    ??SMDBILL_estado_reset_9
    243                return BILL_BLOQUEADO;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE020             B.N      ??SMDBILL_estado_reset_4
    244              else
    245                SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_reset_9:
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   000000A8   0x2164             MOVS     R1,#+100
   \   000000AA   0x8001             STRH     R1,[R0, #+0]
    246              
    247              if(flag==MDB_OK){      
   \   000000AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000AE   0x2E00             CMP      R6,#+0
   \   000000B0   0xD118             BNE.N    ??SMDBILL_estado_reset_5
    248                  for(unsigned char i=0;i<tamanho;i++)
   \   000000B2   0x2000             MOVS     R0,#+0
   \                     ??SMDBILL_estado_reset_10:
   \   000000B4   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x4288             CMP      R0,R1
   \   000000BC   0xD212             BCS.N    ??SMDBILL_estado_reset_5
    249                    if(SMDBILL_eventos[i].tipo == BILL_STATUS &&  SMDBILL_eventos[i].args == VALIDATOR_WAS_RESET)
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   000000C4   0xF811 0x1010      LDRB     R1,[R1, R0, LSL #+1]
   \   000000C8   0x2900             CMP      R1,#+0
   \   000000CA   0xD109             BNE.N    ??SMDBILL_estado_reset_11
   \   000000CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   000000D2   0xEB11 0x0140      ADDS     R1,R1,R0, LSL #+1
   \   000000D6   0x7849             LDRB     R1,[R1, #+1]
   \   000000D8   0x2906             CMP      R1,#+6
   \   000000DA   0xD101             BNE.N    ??SMDBILL_estado_reset_11
    250                      return BILL_INICIALIZA;
   \   000000DC   0x2003             MOVS     R0,#+3
   \   000000DE   0xE002             B.N      ??SMDBILL_estado_reset_4
   \                     ??SMDBILL_estado_reset_11:
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xE7E7             B.N      ??SMDBILL_estado_reset_10
    251              }    
    252            }  
    253            
    254            return BILL_RESET_AND_CHECK;
   \                     ??SMDBILL_estado_reset_5:
   \   000000E4   0x2002             MOVS     R0,#+2
   \                     ??SMDBILL_estado_reset_4:
   \   000000E6   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    255          }
    256          /***********************************************************************************
    257          *       Descrição       :       Função para o estado onde está inicializando
    258          *                               o noteiro
    259          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    260          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    261          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    262          eBILL_POLL_STATE SMDBILL_estado_inicializa(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_inicializa:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    263            unsigned char tentativas=5;
   \   00000006   0x2505             MOVS     R5,#+5
    264            eMDB_reply flag;
    265            
    266            // Faz o reset do dispositivo
    267            do {
    268              
    269              flag = MDBILL_reset_device();
   \                     ??SMDBILL_estado_inicializa_0:
   \   00000008   0x.... 0x....      BL       MDBILL_reset_device
   \   0000000C   0x0006             MOVS     R6,R0
    270              
    271              MDBAURT_sleep(1);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       MDBAURT_sleep
    272              
    273              if(SMDBILL_time_out)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD006             BEQ.N    ??SMDBILL_estado_inicializa_1
    274                SMDBILL_time_out--;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
    275              
    276            }
    277            while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_inicializa_1:
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD004             BEQ.N    ??SMDBILL_estado_inicializa_2
   \   00000032   0x1E6D             SUBS     R5,R5,#+1
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E5             BNE.N    ??SMDBILL_estado_inicializa_0
    278            
    279            // Saída para o caso de não receber
    280            // comunicação do dispositivo
    281            if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_inicializa_2:
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD101             BNE.N    ??SMDBILL_estado_inicializa_3
    282              return BILL_OFFLINE;
   \   00000046   0x2005             MOVS     R0,#+5
   \   00000048   0xE073             B.N      ??SMDBILL_estado_inicializa_4
    283            else
    284              SMDBILL_time_out = RELOAD_TIMEOUT_BILL;// se recebeu, inicializa o contador
   \                     ??SMDBILL_estado_inicializa_3:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   0000004E   0x2164             MOVS     R1,#+100
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    285            
    286            if(flag==MDB_OK){
   \   00000052   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD16B             BNE.N    ??SMDBILL_estado_inicializa_5
    287              
    288              unsigned char notas;
    289              PARAMETROS_le(ADR_NOTAS,(void*)&notas);    
   \   00000058   0xA904             ADD      R1,SP,#+16
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x.... 0x....      BL       PARAMETROS_le
    290              
    291              unsigned short int notas_i = notas;
   \   00000060   0xF89D 0x7010      LDRB     R7,[SP, #+16]
    292              
    293              tentativas=5;
   \   00000064   0x2005             MOVS     R0,#+5
   \   00000066   0x0005             MOVS     R5,R0
    294              do{
    295                flag = MDBILL_set_bill_type_on_device(notas_i,notas_i);
   \                     ??SMDBILL_estado_inicializa_6:
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0x.... 0x....      BL       MDBILL_set_bill_type_on_device
   \   00000074   0x0006             MOVS     R6,R0
    296                
    297                MDBAURT_sleep(1);
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x.... 0x....      BL       MDBAURT_sleep
    298                
    299                if(SMDBILL_time_out)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000080   0x8800             LDRH     R0,[R0, #+0]
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD004             BEQ.N    ??SMDBILL_estado_inicializa_7
    300                  SMDBILL_time_out--;
   \   00000086   0x....             LDR.N    R0,??DataTable9_4
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x1E40             SUBS     R0,R0,#+1
   \   0000008C   0x....             LDR.N    R1,??DataTable9_4
   \   0000008E   0x8008             STRH     R0,[R1, #+0]
    301              }
    302              while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_inicializa_7:
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E00             CMP      R6,#+0
   \   00000094   0xD004             BEQ.N    ??SMDBILL_estado_inicializa_8
   \   00000096   0x1E6D             SUBS     R5,R5,#+1
   \   00000098   0x0028             MOVS     R0,R5
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD1E3             BNE.N    ??SMDBILL_estado_inicializa_6
    303              
    304              if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_inicializa_8:
   \   000000A0   0x....             LDR.N    R0,??DataTable9_4
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD101             BNE.N    ??SMDBILL_estado_inicializa_9
    305                return BILL_OFFLINE;    
   \   000000A8   0x2005             MOVS     R0,#+5
   \   000000AA   0xE042             B.N      ??SMDBILL_estado_inicializa_4
    306              else
    307                SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_inicializa_9:
   \   000000AC   0x....             LDR.N    R0,??DataTable9_4
   \   000000AE   0x2164             MOVS     R1,#+100
   \   000000B0   0x8001             STRH     R1,[R0, #+0]
    308              
    309              tentativas=5;
   \   000000B2   0x2005             MOVS     R0,#+5
   \   000000B4   0x0005             MOVS     R5,R0
    310              unsigned char nivel;
    311              
    312              do{
    313                
    314                flag = MDBILL_get_setup_from_device(&nivel,&SMDBILL_country,&SMDBILL_escala,
    315                                                    &SMDBILL_casas_decimais,&SMDBILL_capacidade_stacker,
    316                                                    &SMDBILL_scroll_capacide,&SMDBILL_nivel_seguranca,SMDBILL_valor_canais);
   \                     ??SMDBILL_estado_inicializa_10:
   \   000000B6   0x....             LDR.N    R0,??DataTable9_6
   \   000000B8   0x9003             STR      R0,[SP, #+12]
   \   000000BA   0x....             LDR.N    R0,??DataTable9_7
   \   000000BC   0x9002             STR      R0,[SP, #+8]
   \   000000BE   0x....             LDR.N    R0,??DataTable9_8
   \   000000C0   0x9001             STR      R0,[SP, #+4]
   \   000000C2   0x....             LDR.N    R0,??DataTable9_9
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x....             LDR.N    R3,??DataTable9_10
   \   000000C8   0x....             LDR.N    R2,??DataTable9_11
   \   000000CA   0x....             LDR.N    R1,??DataTable9_12
   \   000000CC   0xF10D 0x0011      ADD      R0,SP,#+17
   \   000000D0   0x.... 0x....      BL       MDBILL_get_setup_from_device
   \   000000D4   0x0006             MOVS     R6,R0
    317                  
    318                MDBAURT_sleep(1);
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x.... 0x....      BL       MDBAURT_sleep
    319                
    320                if(SMDBILL_time_out)
   \   000000DC   0x....             LDR.N    R0,??DataTable9_4
   \   000000DE   0x8800             LDRH     R0,[R0, #+0]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD004             BEQ.N    ??SMDBILL_estado_inicializa_11
    321                  SMDBILL_time_out--;
   \   000000E4   0x....             LDR.N    R0,??DataTable9_4
   \   000000E6   0x8800             LDRH     R0,[R0, #+0]
   \   000000E8   0x1E40             SUBS     R0,R0,#+1
   \   000000EA   0x....             LDR.N    R1,??DataTable9_4
   \   000000EC   0x8008             STRH     R0,[R1, #+0]
    322              }
    323              while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_inicializa_11:
   \   000000EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F0   0x2E00             CMP      R6,#+0
   \   000000F2   0xD004             BEQ.N    ??SMDBILL_estado_inicializa_12
   \   000000F4   0x1E6D             SUBS     R5,R5,#+1
   \   000000F6   0x0028             MOVS     R0,R5
   \   000000F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD1DB             BNE.N    ??SMDBILL_estado_inicializa_10
    324              
    325              if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_inicializa_12:
   \   000000FE   0x....             LDR.N    R0,??DataTable9_4
   \   00000100   0x8800             LDRH     R0,[R0, #+0]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD101             BNE.N    ??SMDBILL_estado_inicializa_13
    326                return BILL_OFFLINE;
   \   00000106   0x2005             MOVS     R0,#+5
   \   00000108   0xE013             B.N      ??SMDBILL_estado_inicializa_4
    327              else
    328                SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_inicializa_13:
   \   0000010A   0x....             LDR.N    R0,??DataTable9_4
   \   0000010C   0x2164             MOVS     R1,#+100
   \   0000010E   0x8001             STRH     R1,[R0, #+0]
    329              
    330              if(flag!=MDB_OK){
   \   00000110   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000112   0x2E00             CMP      R6,#+0
   \   00000114   0xD00C             BEQ.N    ??SMDBILL_estado_inicializa_5
    331                // Em caso de falha inicializa os canais com zero
    332                // para evitar crédito em algum
    333                // evento que receba da serial
    334                SMDBILL_valor_canais[0]=SMDBILL_valor_canais[1]=SMDBILL_valor_canais[2]=SMDBILL_valor_canais[3]=SMDBILL_valor_canais[4]=SMDBILL_valor_canais[5] = 0x00;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x....             LDR.N    R1,??DataTable9_6
   \   0000011A   0x7148             STRB     R0,[R1, #+5]
   \   0000011C   0x....             LDR.N    R1,??DataTable9_6
   \   0000011E   0x7108             STRB     R0,[R1, #+4]
   \   00000120   0x....             LDR.N    R1,??DataTable9_6
   \   00000122   0x70C8             STRB     R0,[R1, #+3]
   \   00000124   0x....             LDR.N    R1,??DataTable9_6
   \   00000126   0x7088             STRB     R0,[R1, #+2]
   \   00000128   0x....             LDR.N    R1,??DataTable9_6
   \   0000012A   0x7048             STRB     R0,[R1, #+1]
   \   0000012C   0x....             LDR.N    R1,??DataTable9_6
   \   0000012E   0x7008             STRB     R0,[R1, #+0]
    335              }
    336              
    337            }
    338            
    339            return BILL_SUPERVISAO;  
   \                     ??SMDBILL_estado_inicializa_5:
   \   00000130   0x2004             MOVS     R0,#+4
   \                     ??SMDBILL_estado_inicializa_4:
   \   00000132   0xB005             ADD      SP,SP,#+20
   \   00000134   0xBDF0             POP      {R4-R7,PC}       ;; return
    340          }
    341          /***********************************************************************************
    342          *       Descrição       :       Função para a supervisão do noteiro
    343          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    344          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    345          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    346          eBILL_POLL_STATE SMDBILL_estado_supervisao(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_supervisao:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    347            unsigned char tentativas=5;
   \   00000006   0x2505             MOVS     R5,#+5
    348            eMDB_reply flag;
    349            unsigned char tamanho;  
    350            
    351            do{
    352              
    353              flag = MDBILL_get_poll_from_device((sBILL_event*)SMDBILL_eventos,&tamanho);
   \                     ??SMDBILL_estado_supervisao_0:
   \   00000008   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000000C   0x....             LDR.N    R0,??DataTable9_5
   \   0000000E   0x.... 0x....      BL       MDBILL_get_poll_from_device
   \   00000012   0x0006             MOVS     R6,R0
    354                
    355              MDBAURT_sleep(1);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       MDBAURT_sleep
    356              
    357              if(SMDBILL_time_out)
   \   0000001A   0x....             LDR.N    R0,??DataTable9_4
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD004             BEQ.N    ??SMDBILL_estado_supervisao_1
    358                SMDBILL_time_out--;
   \   00000022   0x....             LDR.N    R0,??DataTable9_4
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x1E40             SUBS     R0,R0,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable9_4
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
    359              
    360            }
    361            while(flag!=MDB_OK && --tentativas);
   \                     ??SMDBILL_estado_supervisao_1:
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD004             BEQ.N    ??SMDBILL_estado_supervisao_2
   \   00000032   0x1E6D             SUBS     R5,R5,#+1
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E5             BNE.N    ??SMDBILL_estado_supervisao_0
    362            
    363            if(!SMDBILL_time_out)
   \                     ??SMDBILL_estado_supervisao_2:
   \   0000003C   0x....             LDR.N    R0,??DataTable9_4
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD101             BNE.N    ??SMDBILL_estado_supervisao_3
    364              return BILL_OFFLINE;
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0xE023             B.N      ??SMDBILL_estado_supervisao_4
    365            else
    366              SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \                     ??SMDBILL_estado_supervisao_3:
   \   00000048   0x....             LDR.N    R0,??DataTable9_4
   \   0000004A   0x2164             MOVS     R1,#+100
   \   0000004C   0x8001             STRH     R1,[R0, #+0]
    367            
    368            if(flag==MDB_OK){
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD107             BNE.N    ??SMDBILL_estado_supervisao_5
    369              // Foi recebido eventos pelo sistema
    370              if(!SMDBILL_trata_eventos(tamanho))
   \   00000054   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000058   0x.... 0x....      BL       SMDBILL_trata_eventos
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD106             BNE.N    ??SMDBILL_estado_supervisao_6
    371                return BILL_DESABILITADO;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE015             B.N      ??SMDBILL_estado_supervisao_4
    372            }
    373            else
    374              if(flag==MDB_JUST_RESET){
   \                     ??SMDBILL_estado_supervisao_5:
   \   00000064   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   0x2E03             CMP      R6,#+3
   \   00000068   0xD101             BNE.N    ??SMDBILL_estado_supervisao_6
    375                // Houve um reset
    376                // do dispositivo
    377                return BILL_BLOQUEADO;      
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE010             B.N      ??SMDBILL_estado_supervisao_4
    378              }
    379            
    380            unsigned char habilita;  
    381            PARAMETROS_le(ADR_FLAG_MDB_BIL,(void*)&habilita);  
   \                     ??SMDBILL_estado_supervisao_6:
   \   0000006E   0xA900             ADD      R1,SP,#+0
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0x.... 0x....      BL       PARAMETROS_le
    382            if(!habilita)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD101             BNE.N    ??SMDBILL_estado_supervisao_7
    383              return BILL_BLOQUEADO;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0xE006             B.N      ??SMDBILL_estado_supervisao_4
    384            
    385            if(SMDBILL_bloqueio)
   \                     ??SMDBILL_estado_supervisao_7:
   \   00000082   0x....             LDR.N    R0,??DataTable9
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD001             BEQ.N    ??SMDBILL_estado_supervisao_8
    386              return BILL_BLOQUEADO;
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xE000             B.N      ??SMDBILL_estado_supervisao_4
    387            
    388            return BILL_SUPERVISAO;
   \                     ??SMDBILL_estado_supervisao_8:
   \   0000008E   0x2004             MOVS     R0,#+4
   \                     ??SMDBILL_estado_supervisao_4:
   \   00000090   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    389          }
    390          /***********************************************************************************
    391          *       Descrição       :       Função onde o noteiro está offline
    392          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    393          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    394          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    395          eBILL_POLL_STATE SMDBILL_estado_offline(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_offline:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    396            unsigned char tentativas=5;
   \   00000004   0x2505             MOVS     R5,#+5
    397            eMDB_reply flag;
    398            
    399            do{
    400              
    401              flag = MDBILL_verifica_dispositivo();
   \                     ??SMDBILL_estado_offline_0:
   \   00000006   0x.... 0x....      BL       MDBILL_verifica_dispositivo
   \   0000000A   0x0006             MOVS     R6,R0
    402              MDBAURT_sleep(1);           
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       MDBAURT_sleep
    403            }
    404            while(flag!=MDB_OK && --tentativas);
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD004             BEQ.N    ??SMDBILL_estado_offline_1
   \   00000018   0x1E6D             SUBS     R5,R5,#+1
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F1             BNE.N    ??SMDBILL_estado_offline_0
    405            
    406            
    407            if(flag==MDB_OK){
   \                     ??SMDBILL_estado_offline_1:
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x2E00             CMP      R6,#+0
   \   00000026   0xD104             BNE.N    ??SMDBILL_estado_offline_2
    408               SMDBILL_time_out = RELOAD_TIMEOUT_BILL;
   \   00000028   0x....             LDR.N    R0,??DataTable9_4
   \   0000002A   0x2164             MOVS     R1,#+100
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    409               return BILL_BLOQUEADO;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??SMDBILL_estado_offline_3
    410            }
    411            
    412            return BILL_OFFLINE;
   \                     ??SMDBILL_estado_offline_2:
   \   00000032   0x2005             MOVS     R0,#+5
   \                     ??SMDBILL_estado_offline_3:
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    413          }
    414          /***********************************************************************************
    415          *       Descrição       :       Função onde o noteiro está sinalizando
    416          *                               falha
    417          *       Parametros      :       (eBILL_POLL_STATE) estado atual
    418          *       Retorno         :       (eBILL_POLL_STATE) novo estado
    419          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    420          eBILL_POLL_STATE SMDBILL_estado_falha_dispositivo(eBILL_POLL_STATE estado){
   \                     SMDBILL_estado_falha_dispositivo:
   \   00000000   0x0001             MOVS     R1,R0
    421             
    422            
    423             return BILL_OFFLINE;
   \   00000002   0x2005             MOVS     R0,#+5
   \   00000004   0x4770             BX       LR               ;; return
    424          }
    425          /***********************************************************************************
    426          *       Descrição       :       Getter para o contador de timeout
    427          *       Parametros      :       nenhum
    428          *       Retorno         :       (unsigned char) timeout na comunicação
    429          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    430          unsigned char SMDBILL_get_contador_timeout(void){
    431            
    432            return SMDBILL_time_out;
   \                     SMDBILL_get_contador_timeout:
   \   00000000   0x....             LDR.N    R0,??DataTable9_4
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x4770             BX       LR               ;; return
    433          }
    434          /***********************************************************************************
    435          *       Descrição       :       Trata os eventos do MDBILL
    436          *       Parametros      :       (unsigned char) tamanho
    437          *       Retorno         :       nenhum
    438          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    439          unsigned char SMDBILL_trata_eventos(unsigned char quantidade){
   \                     SMDBILL_trata_eventos:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    440            static unsigned char canal;
    441            static unsigned char new_scrow=0;
    442            
    443            if(!quantidade)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD101             BNE.N    ??SMDBILL_trata_eventos_0
    444              return 1;  
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE07B             B.N      ??SMDBILL_trata_eventos_1
    445            
    446            for(unsigned char i=0;i<quantidade;i++){
   \                     ??SMDBILL_trata_eventos_0:
   \   0000000E   0x2500             MOVS     R5,#+0
   \                     ??SMDBILL_trata_eventos_2:
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x42A5             CMP      R5,R4
   \   00000016   0xD275             BCS.N    ??SMDBILL_trata_eventos_3
    447              
    448              if(SMDBILL_eventos[i].tipo==BILL_STATUS){
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x....             LDR.N    R0,??DataTable9_5
   \   0000001C   0xF810 0x0015      LDRB     R0,[R0, R5, LSL #+1]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD132             BNE.N    ??SMDBILL_trata_eventos_4
    449                switch(SMDBILL_eventos[i].args){
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable9_5
   \   00000028   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD012             BEQ.N    ??SMDBILL_trata_eventos_5
   \   00000032   0xD365             BCC.N    ??SMDBILL_trata_eventos_6
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD011             BEQ.N    ??SMDBILL_trata_eventos_7
   \   00000038   0xD30F             BCC.N    ??SMDBILL_trata_eventos_8
   \   0000003A   0x2805             CMP      R0,#+5
   \   0000003C   0xD010             BEQ.N    ??SMDBILL_trata_eventos_9
   \   0000003E   0xD30E             BCC.N    ??SMDBILL_trata_eventos_10
   \   00000040   0x2807             CMP      R0,#+7
   \   00000042   0xD012             BEQ.N    ??SMDBILL_trata_eventos_11
   \   00000044   0xD30D             BCC.N    ??SMDBILL_trata_eventos_12
   \   00000046   0x2809             CMP      R0,#+9
   \   00000048   0xD014             BEQ.N    ??SMDBILL_trata_eventos_13
   \   0000004A   0xD312             BCC.N    ??SMDBILL_trata_eventos_14
   \   0000004C   0x280B             CMP      R0,#+11
   \   0000004E   0xD01A             BEQ.N    ??SMDBILL_trata_eventos_15
   \   00000050   0xD318             BCC.N    ??SMDBILL_trata_eventos_16
   \   00000052   0x280C             CMP      R0,#+12
   \   00000054   0xD018             BEQ.N    ??SMDBILL_trata_eventos_17
   \   00000056   0xE053             B.N      ??SMDBILL_trata_eventos_6
    450                  case DEFECTIVE_MOTOR:
    451                       break;
   \                     ??SMDBILL_trata_eventos_5:
   \   00000058   0xE052             B.N      ??SMDBILL_trata_eventos_6
    452                  case SENSOR_PROBLEM:
    453                       break;
   \                     ??SMDBILL_trata_eventos_8:
   \   0000005A   0xE051             B.N      ??SMDBILL_trata_eventos_6
    454                  case VALIDATOR_BUSY:
    455                       break;
   \                     ??SMDBILL_trata_eventos_7:
   \   0000005C   0xE050             B.N      ??SMDBILL_trata_eventos_6
    456                  case ROM_CHECKSUM_ERROR:
    457                       break;
   \                     ??SMDBILL_trata_eventos_10:
   \   0000005E   0xE04F             B.N      ??SMDBILL_trata_eventos_6
    458                  case VALIDATOR_JAMMED:
    459                       break;
   \                     ??SMDBILL_trata_eventos_9:
   \   00000060   0xE04E             B.N      ??SMDBILL_trata_eventos_6
    460                  case VALIDATOR_WAS_RESET:
    461                       new_scrow = 0;
   \                     ??SMDBILL_trata_eventos_12:
   \   00000062   0x....             LDR.N    R0,??DataTable9_13
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x7001             STRB     R1,[R0, #+0]
    462                       break;
   \   00000068   0xE04A             B.N      ??SMDBILL_trata_eventos_6
    463                  case BILL_REMOVED:
    464                       new_scrow = 0;
   \                     ??SMDBILL_trata_eventos_11:
   \   0000006A   0x....             LDR.N    R0,??DataTable9_13
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
    465                       break;
   \   00000070   0xE046             B.N      ??SMDBILL_trata_eventos_6
    466                  case CASH_BOX_OUT_POSITION:    
    467                       break;
   \                     ??SMDBILL_trata_eventos_14:
   \   00000072   0xE045             B.N      ??SMDBILL_trata_eventos_6
    468                  case UNIT_DISABLED:
    469                       if(canal==255)
   \                     ??SMDBILL_trata_eventos_13:
   \   00000074   0x....             LDR.N    R0,??DataTable9_14
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xD102             BNE.N    ??SMDBILL_trata_eventos_18
    470                         new_scrow = 0;             
   \   0000007C   0x....             LDR.N    R0,??DataTable9_13
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x7001             STRB     R1,[R0, #+0]
    471                       break;
   \                     ??SMDBILL_trata_eventos_18:
   \   00000082   0xE03D             B.N      ??SMDBILL_trata_eventos_6
    472                  case INVALID_ESCROW_REQUEST:
    473                       break;
   \                     ??SMDBILL_trata_eventos_16:
   \   00000084   0xE03C             B.N      ??SMDBILL_trata_eventos_6
    474                  case BILL_REJECTED:
    475                       break;
   \                     ??SMDBILL_trata_eventos_15:
   \   00000086   0xE03B             B.N      ??SMDBILL_trata_eventos_6
    476                  case POSSIBLE_CREDITED_BILL_REMOVAL:
    477                       break;
   \                     ??SMDBILL_trata_eventos_17:
   \   00000088   0xE03A             B.N      ??SMDBILL_trata_eventos_6
    478                }
    479              }
    480              else{
    481                //Switch dos comandos
    482                switch(SMDBILL_eventos[i].tipo){
   \                     ??SMDBILL_trata_eventos_4:
   \   0000008A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008C   0x....             LDR.N    R0,??DataTable9_5
   \   0000008E   0xF810 0x0015      LDRB     R0,[R0, R5, LSL #+1]
   \   00000092   0x2808             CMP      R0,#+8
   \   00000094   0xD007             BEQ.N    ??SMDBILL_trata_eventos_19
   \   00000096   0xD333             BCC.N    ??SMDBILL_trata_eventos_6
   \   00000098   0x280A             CMP      R0,#+10
   \   0000009A   0xD029             BEQ.N    ??SMDBILL_trata_eventos_20
   \   0000009C   0xD317             BCC.N    ??SMDBILL_trata_eventos_21
   \   0000009E   0x280C             CMP      R0,#+12
   \   000000A0   0xD02B             BEQ.N    ??SMDBILL_trata_eventos_22
   \   000000A2   0xD329             BCC.N    ??SMDBILL_trata_eventos_23
   \   000000A4   0xE02C             B.N      ??SMDBILL_trata_eventos_6
    483                  case BILL_STACKED:
    484                       if(new_scrow){
   \                     ??SMDBILL_trata_eventos_19:
   \   000000A6   0x....             LDR.N    R0,??DataTable9_13
   \   000000A8   0x7800             LDRB     R0,[R0, #+0]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD00E             BEQ.N    ??SMDBILL_trata_eventos_24
    485                         PAGAMENTOS_adiciona_valores(SMDBILL_valor_canais[canal]*100);
   \   000000AE   0x....             LDR.N    R0,??DataTable9_14
   \   000000B0   0x7800             LDRB     R0,[R0, #+0]
   \   000000B2   0x....             LDR.N    R1,??DataTable9_6
   \   000000B4   0x5C40             LDRB     R0,[R0, R1]
   \   000000B6   0x2164             MOVS     R1,#+100
   \   000000B8   0x4348             MULS     R0,R1,R0
   \   000000BA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BC   0x.... 0x....      BL       PAGAMENTOS_adiciona_valores
    486                         new_scrow = 0;  
   \   000000C0   0x....             LDR.N    R0,??DataTable9_13
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x7001             STRB     R1,[R0, #+0]
    487                         canal = 255;
   \   000000C6   0x....             LDR.N    R0,??DataTable9_14
   \   000000C8   0x21FF             MOVS     R1,#+255
   \   000000CA   0x7001             STRB     R1,[R0, #+0]
    488                       }             
    489                       break;
   \                     ??SMDBILL_trata_eventos_24:
   \   000000CC   0xE018             B.N      ??SMDBILL_trata_eventos_6
    490                  case ESCROW_POSITION:  
    491                       if(MDBILL_send_escrow_command(STACK_BILL)==MDB_OK){
   \                     ??SMDBILL_trata_eventos_21:
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x.... 0x....      BL       MDBILL_send_escrow_command
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD10A             BNE.N    ??SMDBILL_trata_eventos_25
    492                         //vTaskDelay(100);
    493                         new_scrow = 1;
   \   000000D8   0x....             LDR.N    R0,??DataTable9_13
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x7001             STRB     R1,[R0, #+0]
    494                         canal = (unsigned char)(SMDBILL_eventos[i].args-CANAL_01);               
   \   000000DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E0   0x....             LDR.N    R0,??DataTable9_5
   \   000000E2   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   000000E6   0x7840             LDRB     R0,[R0, #+1]
   \   000000E8   0x380D             SUBS     R0,R0,#+13
   \   000000EA   0x....             LDR.N    R1,??DataTable9_14
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
    495                       }
    496                       //else
    497                         //vTaskDelay(1000);
    498                       
    499                       break;
   \                     ??SMDBILL_trata_eventos_25:
   \   000000EE   0xE007             B.N      ??SMDBILL_trata_eventos_6
    500                  case BILL_RETURNED:
    501                       new_scrow = 0;
   \                     ??SMDBILL_trata_eventos_20:
   \   000000F0   0x....             LDR.N    R0,??DataTable9_13
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x7001             STRB     R1,[R0, #+0]
    502                       break;
   \   000000F6   0xE003             B.N      ??SMDBILL_trata_eventos_6
    503                  case NOT_USED:
    504                       break;
   \                     ??SMDBILL_trata_eventos_23:
   \   000000F8   0xE002             B.N      ??SMDBILL_trata_eventos_6
    505                  case DISABLED_BILL_REJECTED: 
    506                       new_scrow = 0;
   \                     ??SMDBILL_trata_eventos_22:
   \   000000FA   0x....             LDR.N    R0,??DataTable9_13
   \   000000FC   0x2100             MOVS     R1,#+0
   \   000000FE   0x7001             STRB     R1,[R0, #+0]
    507                       break;
    508                }
    509              }
    510            }
   \                     ??SMDBILL_trata_eventos_6:
   \   00000100   0x1C6D             ADDS     R5,R5,#+1
   \   00000102   0xE785             B.N      ??SMDBILL_trata_eventos_2
    511            
    512            return 1;
   \                     ??SMDBILL_trata_eventos_3:
   \   00000104   0x2001             MOVS     R0,#+1
   \                     ??SMDBILL_trata_eventos_1:
   \   00000106   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    513          }

   \                                 In section .bss, align 1
   \                     ??canal:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??new_scrow:
   \   00000000                      DS8 1
    514          /***********************************************************************************
    515          *       Descrição       :       Envia o comando para fazer o armazenamento
    516          *                               da nota
    517          *       Parametros      :       nenhum
    518          *       Retorno         :       (unsigned char) maior do que zero
    519          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    520          unsigned char SMDBILL_envia_comando_scroll(void){
   \                     SMDBILL_envia_comando_scroll:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    521            unsigned char tentativas=5;
   \   00000002   0x2405             MOVS     R4,#+5
    522            eMDB_reply flag;
    523            
    524            
    525            do{
    526              
    527              flag = MDBILL_send_escrow_command(STACK_BILL);
   \                     ??SMDBILL_envia_comando_scroll_0:
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       MDBILL_send_escrow_command
   \   0000000A   0x0005             MOVS     R5,R0
    528              MDBAURT_sleep(1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       MDBAURT_sleep
    529              
    530            }
    531            while(flag!=MDB_OK && --tentativas);
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD004             BEQ.N    ??SMDBILL_envia_comando_scroll_1
   \   00000018   0x1E64             SUBS     R4,R4,#+1
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F0             BNE.N    ??SMDBILL_envia_comando_scroll_0
    532          
    533            if(flag == MDB_OK)
   \                     ??SMDBILL_envia_comando_scroll_1:
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD101             BNE.N    ??SMDBILL_envia_comando_scroll_2
    534              return 1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE000             B.N      ??SMDBILL_envia_comando_scroll_3
    535            
    536            return 0;
   \                     ??SMDBILL_envia_comando_scroll_2:
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??SMDBILL_envia_comando_scroll_3:
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    537          }
    538          /***********************************************************************************
    539          *       Descrição       :       Getter para verificar se o noteiro está
    540          *                               online
    541          *       Parametros      :       nenhum
    542          *       Retorno         :       (unsigned char) maior do que zero se 
    543          *                               estiver online
    544          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    545          unsigned char SMDBILL_get_net_status(void){
    546            
    547            if(SMDBILL_estado_atual != BILL_OFFLINE)
   \                     SMDBILL_get_net_status:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2805             CMP      R0,#+5
   \   00000006   0xD001             BEQ.N    ??SMDBILL_get_net_status_0
    548              return 1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??SMDBILL_get_net_status_1
    549            
    550            return 0;
   \                     ??SMDBILL_get_net_status_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??SMDBILL_get_net_status_1:
   \   0000000E   0x4770             BX       LR               ;; return
    551          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     SMDBILL_bloqueio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     SMDBILL_estado_atual

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     MDBILL_funcs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     SMDBILL_reset_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     SMDBILL_time_out

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     SMDBILL_eventos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     SMDBILL_valor_canais

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     SMDBILL_nivel_seguranca

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     SMDBILL_scroll_capacide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     SMDBILL_capacidade_stacker

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     SMDBILL_casas_decimais

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     SMDBILL_escala

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     SMDBILL_country

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     ??new_scrow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     ??canal
    552          /***********************************************************************************
    553          *       Fim do arquivo
    554          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SMDBILL_envia_comando_scroll
        16   -> MDBAURT_sleep
        16   -> MDBILL_send_escrow_command
      24   SMDBILL_estado_bloqueado
        24   -> MDBAURT_sleep
        24   -> MDBILL_set_bill_type_on_device
        24   -> MDBILL_verifica_dispositivo
        24   -> PARAMETROS_le
      16   SMDBILL_estado_desabilitado
        16   -> PARAMETROS_le
       0   SMDBILL_estado_falha_dispositivo
      40   SMDBILL_estado_inicializa
        40   -> MDBAURT_sleep
        40   -> MDBILL_get_setup_from_device
        40   -> MDBILL_reset_device
        40   -> MDBILL_set_bill_type_on_device
        40   -> PARAMETROS_le
      16   SMDBILL_estado_offline
        16   -> MDBAURT_sleep
        16   -> MDBILL_verifica_dispositivo
      24   SMDBILL_estado_reset
        24   -> MDBAURT_sleep
        24   -> MDBILL_get_poll_from_device
        24   -> MDBILL_reset_device
      24   SMDBILL_estado_supervisao
        24   -> MDBAURT_sleep
        24   -> MDBILL_get_poll_from_device
        24   -> PARAMETROS_le
        24   -> SMDBILL_trata_eventos
       0   SMDBILL_get_contador_timeout
       0   SMDBILL_get_net_status
       0   SMDBILL_set_bloqueio
       8   SMDBILL_tick
         8   -- Indirect call
      16   SMDBILL_trata_eventos
        16   -> MDBILL_send_escrow_command
        16   -> PAGAMENTOS_adiciona_valores


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      28  MDBILL_funcs
       1  SMDBILL_bloqueio
       2  SMDBILL_capacidade_stacker
       1  SMDBILL_casas_decimais
       2  SMDBILL_country
      48  SMDBILL_envia_comando_scroll
       2  SMDBILL_escala
       1  SMDBILL_estado_atual
     188  SMDBILL_estado_bloqueado
      30  SMDBILL_estado_desabilitado
       6  SMDBILL_estado_falha_dispositivo
     310  SMDBILL_estado_inicializa
      54  SMDBILL_estado_offline
     232  SMDBILL_estado_reset
     146  SMDBILL_estado_supervisao
      32  SMDBILL_eventos
       8  SMDBILL_get_contador_timeout
      16  SMDBILL_get_net_status
       2  SMDBILL_nivel_seguranca
       1  SMDBILL_reset_counter
       1  SMDBILL_scroll_capacide
       8  SMDBILL_set_bloqueio
      32  SMDBILL_tick
       2  SMDBILL_time_out
     264  SMDBILL_trata_eventos
      16  SMDBILL_valor_canais
       1  canal
       1  new_scrow

 
    45 bytes in section .bss
    20 bytes in section .data
    28 bytes in section .rodata
 1 402 bytes in section .text
 
 1 402 bytes of CODE  memory
    28 bytes of CONST memory
    65 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  17:11:23 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\PlayerWave #
#                    \PlayerWave.c                                            #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\PlayerWave #
#                    \PlayerWave.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE\ #
#                    Debug\List\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\De #
#                    bug\List\ -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debug #
#                    \Obj\ --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\PlayerW #
#                    ave.lst                                                  #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\PlayerWa #
#                    ve.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\PlayerWave\PlayerWave.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  PlayerWave.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  22/02/2014
     21          |
     22          |       Revisões           :  1.0.0.0
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0xe000e100
   \   __absolute union <unnamed> volatile _A_SETENA0
   \                     _A_SETENA0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000e280
   \   __absolute union <unnamed> volatile _A_CLRPEND0
   \                     _A_CLRPEND0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000e400
   \   __absolute union <unnamed> volatile _A_IP0
   \                     _A_IP0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc1a8
   \   __absolute union <unnamed> volatile _A_PCLKSEL0
   \                     _A_PCLKSEL0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc0c4
   \   __absolute union <unnamed> volatile _A_PCONP
   \                     _A_PCONP:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c004
   \   __absolute union <unnamed> volatile _A_PINSEL1
   \                     _A_PINSEL1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004000
   \   __absolute union <unnamed> volatile _A_T0IR
   \                     _A_T0IR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004004
   \   __absolute union <unnamed> volatile _A_T0TCR
   \                     _A_T0TCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004008
   \   __absolute unsigned long volatile T0TC
   \                     T0TC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4000400c
   \   __absolute unsigned long volatile T0PR
   \                     T0PR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004014
   \   __absolute union <unnamed> volatile _A_T0MCR
   \                     _A_T0MCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004018
   \   __absolute unsigned long volatile T0MR0
   \                     T0MR0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4000403c
   \   __absolute union <unnamed> volatile _A_T0EMR
   \                     _A_T0EMR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40004070
   \   __absolute union <unnamed> volatile _A_T0CTCR
   \                     _A_T0CTCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4008c000
   \   __absolute union <unnamed> volatile _A_DACR
   \                     _A_DACR:
   \   00000000                      DS8 4
     32          #include "playerWave.h"
     33          #include "..\..\includes.h"
     34          
     35          
     36          /***********************************************************************************
     37          *       Definições locais
     38          ***********************************************************************************/
     39          #define PR_TIMER_0                      600
     40          
     41          #define POWER_WAVE_PIN                  //(0x01)<<26
     42          #define POWER_WAVE_INIT()               //FIO3DIR |= POWER_WAVE_PIN
     43          #define POWER_WAVE_SET()                //FIO3SET |= POWER_WAVE_PIN
     44          #define POWER_WAVE_CLR()                //FIO3CLR |= POWER_WAVE_PIN
     45          
     46          #define PINO_DAC                        (0x01)<<26
     47          #define INI_PIN_DAC()                   FIO0DIR|= PINO_DAC
     48          #define SET_PINO_DAC(X)                 X?(FIO0SET|=PINO_DAC):(FIO0CLR|=PINO_DAC)
     49          
     50          /***********************************************************************************
     51          *       Variaveis locais
     52          ***********************************************************************************/

   \                                 In section .data, align 4
     53          unsigned int enderecoInicialMusica=AREA_AUDIO;
   \                     enderecoInicialMusica:
   \   00000000   0x00003000         DC32 12288

   \                                 In section .bss, align 4
     54          unsigned int tamanhoMusica;
   \                     tamanhoMusica:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     55          unsigned short int volume;
   \                     volume:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     56          unsigned short int dadoMusica;
   \                     dadoMusica:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     57          unsigned char bufferMusica;
   \                     bufferMusica:
   \   00000000                      DS8 1
     58          /***********************************************************************************
     59          *       Funções locais
     60          ***********************************************************************************/
     61          extern void SST_writeDisable(void);
     62          extern void SST_highSpeedRead(unsigned int endereco,unsigned char *buffer,
     63                                 unsigned short int size);
     64          
     65          /***********************************************************************************
     66          *       Implementação das funções
     67          ***********************************************************************************/
     68          
     69          /***********************************************************************************
     70          *       Descrição       :       Inicialização do módulo
     71          *       Parametros      :       nenhum
     72          *       Retorno         :       nenhum
     73          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          void PLAYERWAVE_ini(void){
     75            
     76            PCONP_bit.PCTIM0 = 1; // Energiza o periférico
   \                     PLAYERWAVE_ini:
   \   00000000   0x....             LDR.N    R0,??DataTable4  ;; 0x400fc0c4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable4  ;; 0x400fc0c4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     77            PCLKSEL0_bit.PCLK_TIMER0 = 1; // Seleção do clock
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400fc1a8
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xF360 0x0183      BFI      R1,R0,#+2,#+2
   \   00000016   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400fc1a8
   \   00000018   0x6001             STR      R1,[R0, #+0]
     78            
     79            IP0_bit.PRI_1 = 1;  
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable4_2  ;; 0xe000e400
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF360 0x210F      BFI      R1,R0,#+8,#+8
   \   00000024   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000e400
   \   00000026   0x6001             STR      R1,[R0, #+0]
     80            SETENA0_bit.SETENA1 = 1; // Habilitação da interrupção do timer 1
   \   00000028   0x....             LDR.N    R0,??DataTable4_3  ;; 0xe000e100
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000030   0x....             LDR.N    R1,??DataTable4_3  ;; 0xe000e100
   \   00000032   0x6008             STR      R0,[R1, #+0]
     81            
     82            T0TCR_bit.CE = 1;   // Contador Habilitado
   \   00000034   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40004004
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003C   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40004004
   \   0000003E   0x6008             STR      R0,[R1, #+0]
     83            T0TCR_bit.CR = 1;   // Realiza o reset
   \   00000040   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40004004
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000048   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40004004
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     84            T0TCR_bit.CR = 0;   // do contador
   \   0000004C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40004004
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000054   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40004004
   \   00000056   0x6008             STR      R0,[R1, #+0]
     85            
     86            T0CTCR_bit.CTM = 0x00;
   \   00000058   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40004070
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x0880             LSRS     R0,R0,#+2
   \   0000005E   0x0080             LSLS     R0,R0,#+2
   \   00000060   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40004070
   \   00000062   0x6008             STR      R0,[R1, #+0]
     87            T0PR = 12;  
   \   00000064   0x....             LDR.N    R0,??DataTable4_6  ;; 0x4000400c
   \   00000066   0x210C             MOVS     R1,#+12
   \   00000068   0x6001             STR      R1,[R0, #+0]
     88            
     89            T0MCR_bit.MR0I = 0;
   \   0000006A   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x0840             LSRS     R0,R0,#+1
   \   00000070   0x0040             LSLS     R0,R0,#+1
   \   00000072   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   00000074   0x6008             STR      R0,[R1, #+0]
     90            T0MCR_bit.MR0R = 0;
   \   00000076   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF030 0x0002      BICS     R0,R0,#0x2
   \   0000007E   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   00000080   0x6008             STR      R0,[R1, #+0]
     91            T0EMR_bit.EM0  = 0; // Não altera nenhum pino  
   \   00000082   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4000403c
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x0840             LSRS     R0,R0,#+1
   \   00000088   0x0040             LSLS     R0,R0,#+1
   \   0000008A   0x....             LDR.N    R1,??DataTable4_8  ;; 0x4000403c
   \   0000008C   0x6008             STR      R0,[R1, #+0]
     92              
     93            T0EMR_bit.EM0  = 0;
   \   0000008E   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4000403c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0840             LSRS     R0,R0,#+1
   \   00000094   0x0040             LSLS     R0,R0,#+1
   \   00000096   0x....             LDR.N    R1,??DataTable4_8  ;; 0x4000403c
   \   00000098   0x6008             STR      R0,[R1, #+0]
     94            T0EMR_bit.EMC0 = 0;
   \   0000009A   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4000403c
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF030 0x0030      BICS     R0,R0,#0x30
   \   000000A2   0x....             LDR.N    R1,??DataTable4_8  ;; 0x4000403c
   \   000000A4   0x6008             STR      R0,[R1, #+0]
     95            
     96            T0MR0 = T0TC+1000;
   \   000000A6   0x....             LDR.N    R0,??DataTable4_9  ;; 0x40004008
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF510 0x707A      ADDS     R0,R0,#+1000
   \   000000AE   0x....             LDR.N    R1,??DataTable4_10  ;; 0x40004018
   \   000000B0   0x6008             STR      R0,[R1, #+0]
     97              
     98            PINSEL1_bit.P0_26 = 2;
   \   000000B2   0x2002             MOVS     R0,#+2
   \   000000B4   0x....             LDR.N    R1,??DataTable4_11  ;; 0x4002c004
   \   000000B6   0x6809             LDR      R1,[R1, #+0]
   \   000000B8   0xF360 0x5115      BFI      R1,R0,#+20,#+2
   \   000000BC   0x....             LDR.N    R0,??DataTable4_11  ;; 0x4002c004
   \   000000BE   0x6001             STR      R1,[R0, #+0]
     99            PCLKSEL0_bit.PCLK_DAC = 1;  
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400fc1a8
   \   000000C4   0x6809             LDR      R1,[R1, #+0]
   \   000000C6   0xF360 0x5197      BFI      R1,R0,#+22,#+2
   \   000000CA   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400fc1a8
   \   000000CC   0x6001             STR      R1,[R0, #+0]
    100            
    101            POWER_WAVE_INIT();
    102            POWER_WAVE_CLR();
    103          }
   \   000000CE   0x4770             BX       LR               ;; return
   \   000000D0                      REQUIRE _A_PCONP
   \   000000D0                      REQUIRE _A_PCLKSEL0
   \   000000D0                      REQUIRE _A_IP0
   \   000000D0                      REQUIRE _A_SETENA0
   \   000000D0                      REQUIRE _A_T0TCR
   \   000000D0                      REQUIRE _A_T0CTCR
   \   000000D0                      REQUIRE T0PR
   \   000000D0                      REQUIRE _A_T0MCR
   \   000000D0                      REQUIRE _A_T0EMR
   \   000000D0                      REQUIRE T0MR0
   \   000000D0                      REQUIRE T0TC
   \   000000D0                      REQUIRE _A_PINSEL1
    104          /***********************************************************************************
    105          *       Descrição       :      Toca um dos waves salvos na memória
    106          *       Parametros      :     (unsigned char) indice do arquivo
    107          *                             (unsigned char) modo 0 - único
    108          *                                                  1 - loop
    109          *       Retorno         :       nenhum
    110          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    111          void PLAYERWAVE_iniciaMusica(unsigned char indice,unsigned char modo){
   \                     PLAYERWAVE_iniciaMusica:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    112            unsigned int enderecoInicial;
    113            unsigned int tamanho;
    114              
    115            if(indice==1)
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD104             BNE.N    ??PLAYERWAVE_iniciaMusica_0
    116              PARAMETROS_le(ADR_VOLUME_MUSICA,(void*)&volume);
   \   0000000E   0x....             LDR.N    R1,??DataTable4_12
   \   00000010   0x201D             MOVS     R0,#+29
   \   00000012   0x.... 0x....      BL       PARAMETROS_le
   \   00000016   0xE003             B.N      ??PLAYERWAVE_iniciaMusica_1
    117            else
    118              PARAMETROS_le(ADR_VOLUME_VOZ,(void*)&volume);
   \                     ??PLAYERWAVE_iniciaMusica_0:
   \   00000018   0x....             LDR.N    R1,??DataTable4_12
   \   0000001A   0x201E             MOVS     R0,#+30
   \   0000001C   0x.... 0x....      BL       PARAMETROS_le
    119              
    120            if(volume>100)
   \                     ??PLAYERWAVE_iniciaMusica_1:
   \   00000020   0x....             LDR.N    R0,??DataTable4_12
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x2865             CMP      R0,#+101
   \   00000026   0xDB02             BLT.N    ??PLAYERWAVE_iniciaMusica_2
    121              volume = 100;
   \   00000028   0x....             LDR.N    R0,??DataTable4_12
   \   0000002A   0x2164             MOVS     R1,#+100
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    122            
    123            if(!volume)
   \                     ??PLAYERWAVE_iniciaMusica_2:
   \   0000002E   0x....             LDR.N    R0,??DataTable4_12
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD01F             BEQ.N    ??PLAYERWAVE_iniciaMusica_3
    124              return;
    125            
    126            POWER_WAVE_SET();    
    127            
    128            PARAMETROS_le(ADR_INICIO_BLOCO_MUSICA+indice,(void*)&enderecoInicial);
   \                     ??PLAYERWAVE_iniciaMusica_4:
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0xF114 0x0012      ADDS     R0,R4,#+18
   \   0000003E   0x.... 0x....      BL       PARAMETROS_le
    129            PARAMETROS_le(ADR_TAMANHO_BLOCO_MUSICA+indice,(void*)&tamanho);
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xF114 0x0016      ADDS     R0,R4,#+22
   \   0000004A   0x.... 0x....      BL       PARAMETROS_le
    130            
    131            enderecoInicialMusica = enderecoInicial;
   \   0000004E   0x....             LDR.N    R0,??DataTable4_13
   \   00000050   0x9901             LDR      R1,[SP, #+4]
   \   00000052   0x6001             STR      R1,[R0, #+0]
    132            tamanhoMusica = tamanho;
   \   00000054   0x....             LDR.N    R0,??DataTable4_14
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x6001             STR      R1,[R0, #+0]
    133            
    134            MEMORYWRAPPER_wait();
   \   0000005A   0x.... 0x....      BL       MEMORYWRAPPER_wait
    135            
    136            T0MR0 = T0TC+1000;  
   \   0000005E   0x....             LDR.N    R0,??DataTable4_9  ;; 0x40004008
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF510 0x707A      ADDS     R0,R0,#+1000
   \   00000066   0x....             LDR.N    R1,??DataTable4_10  ;; 0x40004018
   \   00000068   0x6008             STR      R0,[R1, #+0]
    137            T0MCR_bit.MR0I = 1;  
   \   0000006A   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000072   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   00000074   0x6008             STR      R0,[R1, #+0]
    138          }
   \                     ??PLAYERWAVE_iniciaMusica_3:
   \   00000076   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   \   00000078                      REQUIRE T0MR0
   \   00000078                      REQUIRE T0TC
   \   00000078                      REQUIRE _A_T0MCR
    139          /***********************************************************************************
    140          *       Descrição       :       Para com a reprodução de uma música
    141          *       Parametros      :       nenhum
    142          *       Retorno         :       nenhum
    143          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void PLAYER_interrompeMusica(void){
   \                     PLAYER_interrompeMusica:
   \   00000000   0xB580             PUSH     {R7,LR}
    145            
    146            T0MCR_bit.MR0I = 0;   
   \   00000002   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0x0040             LSLS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    147            POWER_WAVE_CLR();
    148            tamanhoMusica = 0;
   \   0000000E   0x....             LDR.N    R0,??DataTable4_14
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6001             STR      R1,[R0, #+0]
    149            MEMORYWRAPPER_release();
   \   00000014   0x.... 0x....      BL       MEMORYWRAPPER_release
    150          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
   \   0000001A                      REQUIRE _A_T0MCR
    151          /***********************************************************************************
    152          *       Descrição       :       Função de interrupção 
    153          *       Parametros      :       nenhum
    154          *       Retorno         :       nenhum
    155          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    156          void PLAYRWAVE_rti(void){ 
   \                     PLAYRWAVE_rti:
   \   00000000   0xB580             PUSH     {R7,LR}
    157            
    158            T0MR0 = T0TC+960;
   \   00000002   0x....             LDR.N    R0,??DataTable4_9  ;; 0x40004008
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF510 0x7070      ADDS     R0,R0,#+960
   \   0000000A   0x....             LDR.N    R1,??DataTable4_10  ;; 0x40004018
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    159            
    160            dadoMusica = MEMORYWRAPPER_readSingle(enderecoInicialMusica++)<<2;
   \   0000000E   0x....             LDR.N    R0,??DataTable4_13
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x1C41             ADDS     R1,R0,#+1
   \   00000014   0x....             LDR.N    R2,??DataTable4_13
   \   00000016   0x6011             STR      R1,[R2, #+0]
   \   00000018   0x.... 0x....      BL       MEMORYWRAPPER_readSingle
   \   0000001C   0x0080             LSLS     R0,R0,#+2
   \   0000001E   0x....             LDR.N    R1,??DataTable4_15
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    161            
    162            if(dadoMusica){
   \   00000022   0x....             LDR.N    R0,??DataTable4_15
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD00D             BEQ.N    ??PLAYRWAVE_rti_0
    163              dadoMusica*= volume;
   \   0000002A   0x....             LDR.N    R0,??DataTable4_15
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable4_12
   \   00000030   0x8809             LDRH     R1,[R1, #+0]
   \   00000032   0x4348             MULS     R0,R1,R0
   \   00000034   0x....             LDR.N    R1,??DataTable4_15
   \   00000036   0x8008             STRH     R0,[R1, #+0]
    164              dadoMusica/= 100;
   \   00000038   0x....             LDR.N    R0,??DataTable4_15
   \   0000003A   0x8800             LDRH     R0,[R0, #+0]
   \   0000003C   0x2164             MOVS     R1,#+100
   \   0000003E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000042   0x....             LDR.N    R1,??DataTable4_15
   \   00000044   0x8008             STRH     R0,[R1, #+0]
    165            }
    166            
    167            DACR_bit.VALUE = dadoMusica;
   \                     ??PLAYRWAVE_rti_0:
   \   00000046   0x....             LDR.N    R0,??DataTable4_15
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0x....             LDR.N    R1,??DataTable4_16  ;; 0x4008c000
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0xF360 0x118F      BFI      R1,R0,#+6,#+10
   \   00000052   0x....             LDR.N    R0,??DataTable4_16  ;; 0x4008c000
   \   00000054   0x6001             STR      R1,[R0, #+0]
    168            if(tamanhoMusica){
   \   00000056   0x....             LDR.N    R0,??DataTable4_14
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD00B             BEQ.N    ??PLAYRWAVE_rti_1
    169              tamanhoMusica--;
   \   0000005E   0x....             LDR.N    R0,??DataTable4_14
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x1E40             SUBS     R0,R0,#+1
   \   00000064   0x....             LDR.N    R1,??DataTable4_14
   \   00000066   0x6008             STR      R0,[R1, #+0]
    170              T0MCR_bit.MR0I = 1;    
   \   00000068   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000070   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   00000072   0x6008             STR      R0,[R1, #+0]
   \   00000074   0xE007             B.N      ??PLAYRWAVE_rti_2
    171            }
    172            else{
    173              T0MCR_bit.MR0I = 0;    
   \                     ??PLAYRWAVE_rti_1:
   \   00000076   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004014
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0x0040             LSLS     R0,R0,#+1
   \   0000007E   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004014
   \   00000080   0x6008             STR      R0,[R1, #+0]
    174              MEMORYWRAPPER_release();
   \   00000082   0x.... 0x....      BL       MEMORYWRAPPER_release
    175            }
    176            
    177            T0IR_bit.CR0INT = 1;
   \                     ??PLAYRWAVE_rti_2:
   \   00000086   0xF05F 0x2040      MOVS     R0,#+1073758208
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000090   0xF05F 0x2140      MOVS     R1,#+1073758208
   \   00000094   0x6008             STR      R0,[R1, #+0]
    178            CLRPEND0_bit.CLRPEND4 = 1;  
   \   00000096   0x....             LDR.N    R0,??DataTable4_17  ;; 0xe000e280
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000009E   0x....             LDR.N    R1,??DataTable4_17  ;; 0xe000e280
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    179          }
   \   000000A2   0xBD01             POP      {R0,PC}          ;; return
   \   000000A4                      REQUIRE T0MR0
   \   000000A4                      REQUIRE T0TC
   \   000000A4                      REQUIRE _A_DACR
   \   000000A4                      REQUIRE _A_T0MCR
   \   000000A4                      REQUIRE _A_T0IR
   \   000000A4                      REQUIRE _A_CLRPEND0
    180          /***********************************************************************************
    181          *       Descrição       :       Verifica se uma música ainda está sendo
    182          *                               tocada
    183          *       Parametros      :       (nenhum)
    184          *       Retorno         :       (unsigned char) maior do que zero se a música
    185          *                                               ainda estiver sendo tocada
    186          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    187          unsigned char PLAYERWAVE_verificaToque(void){
   \                     PLAYERWAVE_verificaToque:
   \   00000000   0xB580             PUSH     {R7,LR}
    188           
    189           if(!tamanhoMusica)
   \   00000002   0x....             LDR.N    R0,??DataTable4_14
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??PLAYERWAVE_verificaToque_0
    190             MEMORYWRAPPER_release();
   \   0000000A   0x.... 0x....      BL       MEMORYWRAPPER_release
    191           
    192           return  tamanhoMusica>0;
   \                     ??PLAYERWAVE_verificaToque_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable4_14
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??PLAYERWAVE_verificaToque_1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE000             B.N      ??PLAYERWAVE_verificaToque_2
   \                     ??PLAYERWAVE_verificaToque_1:
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??PLAYERWAVE_verificaToque_2:
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
    193          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40004004         DC32     0x40004004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40004070         DC32     0x40004070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4000400C         DC32     0x4000400c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40004014         DC32     0x40004014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4000403C         DC32     0x4000403c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40004008         DC32     0x40004008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x40004018         DC32     0x40004018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x4002C004         DC32     0x4002c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     enderecoInicialMusica

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     tamanhoMusica

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     dadoMusica

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x4008C000         DC32     0x4008c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0xE000E280         DC32     0xe000e280
    194          /***********************************************************************************
    195          *       Fim do arquivo
    196          ***********************************************************************************/
    197          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PLAYERWAVE_ini
      24   PLAYERWAVE_iniciaMusica
        24   -> MEMORYWRAPPER_wait
        24   -> PARAMETROS_le
       8   PLAYERWAVE_verificaToque
         8   -> MEMORYWRAPPER_release
       8   PLAYER_interrompeMusica
         8   -> MEMORYWRAPPER_release
       8   PLAYRWAVE_rti
         8   -> MEMORYWRAPPER_readSingle
         8   -> MEMORYWRAPPER_release


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     208  PLAYERWAVE_ini
     120  PLAYERWAVE_iniciaMusica
      32  PLAYERWAVE_verificaToque
      26  PLAYER_interrompeMusica
     164  PLAYRWAVE_rti
       4  T0MR0
       4  T0PR
       4  T0TC
       4  _A_CLRPEND0
       4  _A_DACR
       4  _A_IP0
       4  _A_PCLKSEL0
       4  _A_PCONP
       4  _A_PINSEL1
       4  _A_SETENA0
       4  _A_T0CTCR
       4  _A_T0EMR
       4  _A_T0IR
       4  _A_T0MCR
       4  _A_T0TCR
       1  bufferMusica
       2  dadoMusica
       4  enderecoInicialMusica
       4  tamanhoMusica
       2  volume

 
   9 bytes in section .bss
   4 bytes in section .data
  60 bytes in section .noinit (abs)
 622 bytes in section .text
 
 622 bytes of CODE memory
  13 bytes of DATA memory (+ 60 bytes shared)

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      20/Jul/2017  15:39:31 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\MDB\mdb_uart.c                    #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\MDB\mdb_uart.c -lC                #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\mdb_uart.lst                   #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\mdb_uart.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\MDB\mdb_uart.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  mdb_uart.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  25/02/2017
     21          |
     22          |       Revisões           :  001
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0xe000e280
   \   __absolute union <unnamed> volatile _A_CLRPEND0
   \                     _A_CLRPEND0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40098000
   \   __absolute unsigned char volatile U2RBRTHR
   \                     U2RBRTHR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0x40098008
   \   __absolute union <unnamed> volatile _A_U2FCR
   \                     _A_U2FCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4009800c
   \   __absolute union <unnamed> volatile _A_U2LCR
   \                     _A_U2LCR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0x40098014
   \   __absolute union <unnamed> const volatile _A_U2LSR
   \                     _A_U2LSR:
   \   00000000                      DS8 1
     32          #include <stdio.h>
     33          #include <stdlib.h>
     34          #include <string.h>
     35          #include "..\..\includes.h"
     36          
     37          /***********************************************************************************
     38          *       Definições locais
     39          ***********************************************************************************/
     40          #define TAM_BUF_IN                              50
     41          #define RELOAD_SILENT_TIME                      5
     42          /***********************************************************************************
     43          *       Variaveis locais
     44          ***********************************************************************************/

   \                                 In section .bss, align 4
     45          unsigned char *MDBUART_pOut=NULL;
   \                     MDBUART_pOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     46          unsigned char MDBUART_bytes_to_send=0;
   \                     MDBUART_bytes_to_send:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     47          unsigned char MDBUART_buffer_in[TAM_BUF_IN];
   \                     MDBUART_buffer_in:
   \   00000000                      DS8 52

   \                                 In section .bss, align 1
     48          unsigned char MDBUART_bytes_recebidos=0;
   \                     MDBUART_bytes_recebidos:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     49          unsigned char MDBUART_novo_pacote=0;
   \                     MDBUART_novo_pacote:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     50          unsigned char MDBUART_silent_time=0;
   \                     MDBUART_silent_time:
   \   00000000                      DS8 1
     51          /***********************************************************************************
     52          *       Funções locais
     53          ***********************************************************************************/
     54          
     55          
     56          /***********************************************************************************
     57          *       Implementação das funções
     58          ***********************************************************************************/
     59          
     60          /***********************************************************************************
     61          *       Descrição       :       Inicialização do módulo
     62          *       Parametros      :       nenhum
     63          *       Retorno         :       nenhum
     64          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void MDBUART_ini(void){
   \                     MDBUART_ini:
   \   00000000   0xB580             PUSH     {R7,LR}
     66            
     67            UART_init(2,9600,NULL,NULL,NULL);    
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xF44F 0x5116      MOV      R1,#+9600
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       UART_init
     68          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     69          /***********************************************************************************
     70          *       Descrição       :       Função de tratamento da interrupção de TX
     71          *                               da uart que atende ao protocolo MDB
     72          *       Parametros      :       nenhum
     73          *       Retorno         :       nenhum
     74          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          void MDBUART_irq(void){  
     76            unsigned char dummy;
     77                  
     78            switch(U2IIR_bit.IID){
   \                     MDBUART_irq:
   \   00000000   0x....             LDR.N    R0,??DataTable4  ;; 0x40098008
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0840             LSRS     R0,R0,#+1
   \   00000006   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD006             BEQ.N    ??MDBUART_irq_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD031             BEQ.N    ??MDBUART_irq_1
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD049             BEQ.N    ??MDBUART_irq_2
   \   00000016   0x2806             CMP      R0,#+6
   \   00000018   0xD047             BEQ.N    ??MDBUART_irq_2
   \   0000001A   0xE04B             B.N      ??MDBUART_irq_3
     79              case THRE:                  
     80                         U2LCR_bit.PE = 1; // Habilita o bit de paridade
   \                     ??MDBUART_irq_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4009800c
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000024   0x....             LDR.N    R1,??DataTable4_1  ;; 0x4009800c
   \   00000026   0x7008             STRB     R0,[R1, #+0]
     81                         
     82                         if(MDBUART_bytes_to_send){
   \   00000028   0x....             LDR.N    R0,??DataTable4_2
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD018             BEQ.N    ??MDBUART_irq_4
     83                           U2LCR_bit.PS = 0x03; // Força em 0                             
   \   00000030   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4009800c
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   00000038   0x....             LDR.N    R1,??DataTable4_1  ;; 0x4009800c
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
     84                           MDBUART_bytes_to_send--;
   \   0000003C   0x....             LDR.N    R0,??DataTable4_2
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable4_2
   \   00000044   0x7008             STRB     R0,[R1, #+0]
     85                           U2THR = *MDBUART_pOut++;  
   \   00000046   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40098000
   \   00000048   0x....             LDR.N    R1,??DataTable4_4
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0x7809             LDRB     R1,[R1, #+0]
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
   \   00000050   0x....             LDR.N    R0,??DataTable4_4
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0x....             LDR.N    R1,??DataTable4_4
   \   00000058   0x6008             STR      R0,[R1, #+0]
     86                           MDBUART_silent_time = 250;
   \   0000005A   0x....             LDR.N    R0,??DataTable4_5
   \   0000005C   0x21FA             MOVS     R1,#+250
   \   0000005E   0x7001             STRB     R1,[R0, #+0]
   \   00000060   0xE008             B.N      ??MDBUART_irq_5
     87                         }          
     88                         else{
     89                           U2LCR_bit.PS = 0x03; // Paridade par
   \                     ??MDBUART_irq_4:
   \   00000062   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4009800c
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   0000006A   0x....             LDR.N    R1,??DataTable4_1  ;; 0x4009800c
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
     90                           MDBUART_silent_time = 250;
   \   0000006E   0x....             LDR.N    R0,??DataTable4_5
   \   00000070   0x21FA             MOVS     R1,#+250
   \   00000072   0x7001             STRB     R1,[R0, #+0]
     91                         }
     92                         
     93                         break; 
   \                     ??MDBUART_irq_5:
   \   00000074   0xE01E             B.N      ??MDBUART_irq_3
     94              case RDA : 
     95                         if(U2LSR_bit.PE)
   \                     ??MDBUART_irq_1:
   \   00000076   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40098014
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD002             BEQ.N    ??MDBUART_irq_6
     96                           MDBUART_novo_pacote = 1;
   \   00000084   0x....             LDR.N    R0,??DataTable4_7
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x7001             STRB     R1,[R0, #+0]
     97                         
     98                         dummy = U2RBR;               
   \                     ??MDBUART_irq_6:
   \   0000008A   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40098000
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
     99              
    100                         if(MDBUART_bytes_recebidos<(TAM_BUF_IN-1))
   \   0000008E   0x....             LDR.N    R1,??DataTable4_8
   \   00000090   0x7809             LDRB     R1,[R1, #+0]
   \   00000092   0x2931             CMP      R1,#+49
   \   00000094   0xDA08             BGE.N    ??MDBUART_irq_7
    101                           MDBUART_buffer_in[MDBUART_bytes_recebidos++] = dummy; 
   \   00000096   0x....             LDR.N    R1,??DataTable4_8
   \   00000098   0x7809             LDRB     R1,[R1, #+0]
   \   0000009A   0x....             LDR.N    R2,??DataTable4_9
   \   0000009C   0x5488             STRB     R0,[R1, R2]
   \   0000009E   0x....             LDR.N    R0,??DataTable4_8
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x....             LDR.N    R1,??DataTable4_8
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
    102                         
    103                         break;      
   \                     ??MDBUART_irq_7:
   \   000000A8   0xE004             B.N      ??MDBUART_irq_3
    104              case RLS : 
    105              case CTI :
    106                         dummy = U2LSR;         
   \                     ??MDBUART_irq_2:
   \   000000AA   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40098014
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
    107                         dummy = U2RBR;         
   \   000000AE   0x....             LDR.N    R1,??DataTable4_3  ;; 0x40098000
   \   000000B0   0x7809             LDRB     R1,[R1, #+0]
   \   000000B2   0x0008             MOVS     R0,R1
    108                         break;      
    109            }  
    110            
    111            //Apaga o flag de interrupção pendente
    112            CLRPEND0 |= (0x01)<<7;               
   \                     ??MDBUART_irq_3:
   \   000000B4   0x....             LDR.N    R0,??DataTable4_10  ;; 0xe000e280
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000BC   0x....             LDR.N    R1,??DataTable4_10  ;; 0xe000e280
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    113          }
   \   000000C0   0x4770             BX       LR               ;; return
   \   000000C2                      REQUIRE _A_U2LCR
   \   000000C2                      REQUIRE U2RBRTHR
   \   000000C2                      REQUIRE _A_U2LSR
   \   000000C2                      REQUIRE _A_U2FCR
   \   000000C2                      REQUIRE _A_CLRPEND0
    114          /***********************************************************************************
    115          *       Descrição       :       Envia um pacote de dados através da uart
    116          *                               MDB
    117          *       Parametros      :       (unsigned char*) ponteiro para o buffer
    118          *       Retorno         :       nenhum
    119          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    120          void MDBUART_envia_pacote(unsigned char modo,unsigned char*pacote,
    121                                    unsigned short int tamanho){
   \                     MDBUART_envia_pacote:
   \   00000000   0xB410             PUSH     {R4}
    122                                     
    123            U2LCR_bit.PE = 1; // Habilita o bit de paridade
   \   00000002   0x....             LDR.N    R3,??DataTable4_1  ;; 0x4009800c
   \   00000004   0x781B             LDRB     R3,[R3, #+0]
   \   00000006   0xF053 0x0308      ORRS     R3,R3,#0x8
   \   0000000A   0x....             LDR.N    R4,??DataTable4_1  ;; 0x4009800c
   \   0000000C   0x7023             STRB     R3,[R4, #+0]
    124            if(modo)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD007             BEQ.N    ??MDBUART_envia_pacote_0
    125              U2LCR_bit.PS = 0x02; // Força em 1
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x....             LDR.N    R3,??DataTable4_1  ;; 0x4009800c
   \   00000018   0x781B             LDRB     R3,[R3, #+0]
   \   0000001A   0xF360 0x1305      BFI      R3,R0,#+4,#+2
   \   0000001E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4009800c
   \   00000020   0x7003             STRB     R3,[R0, #+0]
   \   00000022   0xE005             B.N      ??MDBUART_envia_pacote_1
    126            else
    127              U2LCR_bit.PS = 0x03; // Força em 0
   \                     ??MDBUART_envia_pacote_0:
   \   00000024   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4009800c
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   0000002C   0x....             LDR.N    R3,??DataTable4_1  ;; 0x4009800c
   \   0000002E   0x7018             STRB     R0,[R3, #+0]
    128            
    129            MDBUART_bytes_recebidos = 0;
   \                     ??MDBUART_envia_pacote_1:
   \   00000030   0x....             LDR.N    R0,??DataTable4_8
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x7003             STRB     R3,[R0, #+0]
    130            MDBUART_novo_pacote = 0;
   \   00000036   0x....             LDR.N    R0,??DataTable4_7
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x7003             STRB     R3,[R0, #+0]
    131            MDBUART_pOut = (pacote+1);
   \   0000003C   0x1C48             ADDS     R0,R1,#+1
   \   0000003E   0x....             LDR.N    R3,??DataTable4_4
   \   00000040   0x6018             STR      R0,[R3, #+0]
    132            MDBUART_bytes_to_send = tamanho-1;
   \   00000042   0x1E50             SUBS     R0,R2,#+1
   \   00000044   0x....             LDR.N    R2,??DataTable4_2
   \   00000046   0x7010             STRB     R0,[R2, #+0]
    133            U2THR = *pacote;  
   \   00000048   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40098000
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0x7001             STRB     R1,[R0, #+0]
    134          }
   \   0000004E   0xBC10             POP      {R4}
   \   00000050   0x4770             BX       LR               ;; return
   \   00000052                      REQUIRE _A_U2LCR
   \   00000052                      REQUIRE U2RBRTHR
    135          /***********************************************************************************
    136          *       Descrição       :       Lê um pacote do buffer do protocolo MDB
    137          *       Parametros      :       (unsigned char*) ponteiro para o buffer
    138          *                               (unsigned char) tamanho da bloco lido
    139          *       Retorno         :      
    140          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void MDBUART_le_pacote(unsigned char *pData,unsigned char tamanho){
    142            
    143            for(unsigned char i=0;i<tamanho;i++)
   \                     MDBUART_le_pacote:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE005             B.N      ??MDBUART_le_pacote_0
    144              pData[i] = MDBUART_buffer_in[i];
   \                     ??MDBUART_le_pacote_1:
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x....             LDR.N    R3,??DataTable4_9
   \   0000000A   0x5CD3             LDRB     R3,[R2, R3]
   \   0000000C   0x5413             STRB     R3,[R2, R0]
   \   0000000E   0x1C52             ADDS     R2,R2,#+1
   \                     ??MDBUART_le_pacote_0:
   \   00000010   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x428A             CMP      R2,R1
   \   00000016   0xD3F5             BCC.N    ??MDBUART_le_pacote_1
    145          }
   \   00000018   0x4770             BX       LR               ;; return
    146          /***********************************************************************************
    147          *       Descrição       :       Getter para o contador de bytes recebidos
    148          *       Parametros      :       nenhum
    149          *       Retorno         :       nenhum
    150          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          unsigned char MDBUART_get_bytes_recebidos(void){
    152            
    153            return MDBUART_bytes_recebidos;
   \                     MDBUART_get_bytes_recebidos:
   \   00000000   0x....             LDR.N    R0,??DataTable4_8
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    154          }
    155          /***********************************************************************************
    156          *       Descrição       :       Getter para o flag que indica que há um novo
    157          *                               pacote no buffer
    158          *       Parametros      :       nenhum
    159          *       Retorno         :       (unsigned char) maior do que zero se houver
    160          *                               um novo pacote no buffer
    161          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          unsigned char MDBUART_has_new_package(void){
    163            
    164            return MDBUART_novo_pacote;
   \                     MDBUART_has_new_package:
   \   00000000   0x....             LDR.N    R0,??DataTable4_7
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    165          }
    166          /***********************************************************************************
    167          *       Descrição       :       Delay 
    168          *       Parametros      :       N ciclos de 1 milisegundo
    169          *       Retorno         :       nenhum
    170          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    171          void MDBAURT_sleep(unsigned short int cicles){
   \                     MDBAURT_sleep:
   \   00000000   0xB580             PUSH     {R7,LR}
    172            
    173            vTaskDelay(cicles);
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x.... 0x....      BL       vTaskDelay
    174          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40098008         DC32     0x40098008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4009800C         DC32     0x4009800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     MDBUART_bytes_to_send

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40098000         DC32     0x40098000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     MDBUART_pOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     MDBUART_silent_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40098014         DC32     0x40098014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     MDBUART_novo_pacote

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     MDBUART_bytes_recebidos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     MDBUART_buffer_in

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xE000E280         DC32     0xe000e280
    175          /***********************************************************************************
    176          *       Fim do arquivo
    177          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MDBAURT_sleep
         8   -> vTaskDelay
       4   MDBUART_envia_pacote
       0   MDBUART_get_bytes_recebidos
       0   MDBUART_has_new_package
       8   MDBUART_ini
         8   -> UART_init
       0   MDBUART_irq
       0   MDBUART_le_pacote


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      10  MDBAURT_sleep
      52  MDBUART_buffer_in
       1  MDBUART_bytes_recebidos
       1  MDBUART_bytes_to_send
      82  MDBUART_envia_pacote
       6  MDBUART_get_bytes_recebidos
       6  MDBUART_has_new_package
      22  MDBUART_ini
     194  MDBUART_irq
      26  MDBUART_le_pacote
       1  MDBUART_novo_pacote
       4  MDBUART_pOut
       1  MDBUART_silent_time
       1  U2RBRTHR
       4  _A_CLRPEND0
       4  _A_U2FCR
       1  _A_U2LCR
       1  _A_U2LSR

 
  60 bytes in section .bss
  11 bytes in section .noinit (abs)
 390 bytes in section .text
 
 390 bytes of CODE memory
  60 bytes of DATA memory (+ 11 bytes shared)

Errors: none
Warnings: none

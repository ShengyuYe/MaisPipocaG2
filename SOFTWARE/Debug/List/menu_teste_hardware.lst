###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      07/Jul/2017  16:29:08 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\menu_teste_hardware.c           #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\menu_teste_hardware.c -lC       #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\menu_teste_hardware.lst        #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\menu_teste_hardware.o           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Aplicacao\menu_teste_hardware.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  menu_teste_hardware.c
     18          |       Descrição          :  Funções do menu de teste do hardware
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  16/02/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          
     29          /***********************************************************************************
     30          *       Includes
     31          ***********************************************************************************/
     32          #include <stdio.h>
     33          #include <stdlib.h>
     34          #include <string.h>
     35          #include "..\includes.h"
     36          #include "menu_ajuste_relogio.h"
     37          #include "menu_configuracao.h"
     38          #include "menu_edita_flag.h"
     39          #include "menu_edita_inteiro.h"
     40          #include "menu_edita_listagem.h"
     41          #include "menu_info_binaria.h"
     42          #include "menu_rolagem.h"
     43          #include "menu_teste_hardware.h"
     44          #include "menu_teste_mdb.h"
     45          /***********************************************************************************
     46          *       Definições locais
     47          ***********************************************************************************/
     48          
     49          
     50          /***********************************************************************************
     51          *       Variaveis locais
     52          ***********************************************************************************/
     53          
     54          
     55          /***********************************************************************************
     56          *       Funções locais
     57          ***********************************************************************************/
     58          void MTH_teste_rtc(void);
     59          void MTH_teste_data_flash(void);
     60          void MTH_teste_dispensador_papel(void);
     61          void MTH_teste_dosador_milho(void);
     62          void MTH_teste_ventilador(void);
     63          void MTH_teste_panela(void);
     64          void MTH_tela_teste_cctalk(void);
     65          void MTH_tela_teste_uca1(void);
     66          void MTH_tela_teste_p70(void);
     67          void MTH_tela_placa_instrucao(void);
     68          void MTH_tela_teste_lcd_externo(void);
     69          void MTH_tela_teste_impressora(void);
     70          void MTH_teste_musica(void);
     71          void MTH_teste_locucoes(void);
     72          
     73          /***********************************************************************************
     74          *       Tabela de funções
     75          ***********************************************************************************/

   \                                 In section .rodata, align 4
     76          void(*const MTH_funcs[TAM_OPCOES_HARDWARE])(void)={
   \                     MTH_funcs:
   \   00000000   0x........         DC32 MTH_teste_rtc, MTH_teste_data_flash, MTH_teste_dispensador_papel
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 MTH_teste_dosador_milho, MTH_teste_ventilador, MTH_teste_panela
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 MTH_tela_teste_cctalk, MTH_tela_teste_uca1, MTH_tela_teste_p70
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 MTMDB_entry, MTH_tela_teste_impressora, MTH_teste_musica
   \              0x........   
   \              0x........   
   \   00000030   0x........         DC32 MTH_teste_locucoes, MTH_tela_placa_instrucao
   \              0x........   
   \   00000038   0x........         DC32 MTH_tela_teste_lcd_externo, 0H
   \              0x00000000   
     77            MTH_teste_rtc,
     78            MTH_teste_data_flash,
     79            MTH_teste_dispensador_papel,
     80            MTH_teste_dosador_milho,
     81            MTH_teste_ventilador,
     82            MTH_teste_panela,
     83            MTH_tela_teste_cctalk,
     84            MTH_tela_teste_uca1,
     85            MTH_tela_teste_p70,
     86            MTMDB_entry,
     87            MTH_tela_teste_impressora,
     88            MTH_teste_musica,
     89            MTH_teste_locucoes,
     90            MTH_tela_placa_instrucao,
     91            MTH_tela_teste_lcd_externo,
     92            NULL
     93          };
     94          
     95          /***********************************************************************************
     96          *       Implementação das funções
     97          ***********************************************************************************/
     98          
     99          /***********************************************************************************
    100          *       Descrição       :       Ponto de entrada do menu de teste do hardware
    101          *       Parametros      :       nenhum
    102          *       Retorno         :       nenhum
    103          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    104          void MTH_entry(void){
   \                     MTH_entry:
   \   00000000   0xB510             PUSH     {R4,LR}
    105            unsigned char idioma = APLICACAO_carrega_idioma();
   \   00000002   0x.... 0x....      BL       APLICACAO_carrega_idioma
    106            
    107            MENUROLAGEM_show((char*)STRING_titulo_teste_hardware[idioma],
    108                             (char**)STRING_menu_teste_hardware[idioma],
    109                             TAM_OPCOES_HARDWARE,
    110                             (void(**)(void))MTH_funcs);   
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable14
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x2140             MOVS     R1,#+64
   \   00000010   0x.... 0x....      LDR.W    R4,??DataTable14_1
   \   00000014   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   0000001E   0xF854 0x0020      LDR      R0,[R4, R0, LSL #+2]
   \   00000022   0x.... 0x....      BL       MENUROLAGEM_show
    111          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    112          /***********************************************************************************
    113          *       Descrição       :       Exibe no display a contagem do RTC
    114          *       Parametros      :       nenhum
    115          *       Retorno         :       nenhum
    116          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void MTH_teste_rtc(void){
   \                     MTH_teste_rtc:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    118            eTECLA tecla;
    119            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    120            unsigned char hora,minuto,segundo,dia,mes;
    121            unsigned int ano;
    122            char buffer_linha[17];
    123            
    124            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_teste_rtc[idioma],NULL);  
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE02A             B.N      ??MTH_teste_rtc_0
    125            
    126            for(;;){
    127              
    128              tecla = TECLADO_getch();
    129              switch(tecla){
    130                case TECLA_ENTER:
    131                     break;
    132                case TECLA_ESC:
    133                     return;
    134                case TECLA_INC:
    135                     RTC_setValue(23,59,30,0,0,0);
    136                     break;
    137                case TECLA_DEC:
    138                     RTC_setValue(0,0,0,0,0,0);
   \                     ??MTH_teste_rtc_1:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       RTC_setValue
    139                     break;
    140              }
    141              
    142              RTC_getValue(&hora,&minuto,&segundo,&dia,&mes,&ano);    
   \                     ??MTH_teste_rtc_2:
   \   00000030   0xA804             ADD      R0,SP,#+16
   \   00000032   0x9001             STR      R0,[SP, #+4]
   \   00000034   0xF10D 0x000B      ADD      R0,SP,#+11
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0xAB03             ADD      R3,SP,#+12
   \   0000003C   0xAA02             ADD      R2,SP,#+8
   \   0000003E   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000042   0xF10D 0x000A      ADD      R0,SP,#+10
   \   00000046   0x.... 0x....      BL       RTC_getValue
    143              sprintf(buffer_linha,"%02d:%02d:%02d",hora,minuto,segundo);
   \   0000004A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   00000054   0xF89D 0x200A      LDRB     R2,[SP, #+10]
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   0000005C   0xA805             ADD      R0,SP,#+20
   \   0000005E   0x.... 0x....      BL       sprintf
    144              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000062   0xAA05             ADD      R2,SP,#+20
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       STRING_write_to_internal
    145              
    146              vTaskDelay(50);
   \   0000006C   0x2032             MOVS     R0,#+50
   \   0000006E   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_teste_rtc_0:
   \   00000072   0x.... 0x....      BL       TECLADO_getch
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD006             BEQ.N    ??MTH_teste_rtc_3
   \   0000007C   0xD3D8             BCC.N    ??MTH_teste_rtc_2
   \   0000007E   0x2803             CMP      R0,#+3
   \   00000080   0xD0CC             BEQ.N    ??MTH_teste_rtc_1
   \   00000082   0xD304             BCC.N    ??MTH_teste_rtc_4
   \   00000084   0x2804             CMP      R0,#+4
   \   00000086   0xD1D3             BNE.N    ??MTH_teste_rtc_2
   \                     ??MTH_teste_rtc_5:
   \   00000088   0xE7D2             B.N      ??MTH_teste_rtc_2
   \                     ??MTH_teste_rtc_3:
   \   0000008A   0xB00B             ADD      SP,SP,#+44
   \   0000008C   0xBD00             POP      {PC}             ;; return
   \                     ??MTH_teste_rtc_4:
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9001             STR      R0,[SP, #+4]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9000             STR      R0,[SP, #+0]
   \   00000096   0x2300             MOVS     R3,#+0
   \   00000098   0x221E             MOVS     R2,#+30
   \   0000009A   0x213B             MOVS     R1,#+59
   \   0000009C   0x2017             MOVS     R0,#+23
   \   0000009E   0x.... 0x....      BL       RTC_setValue
   \   000000A2   0xE7C5             B.N      ??MTH_teste_rtc_2
    147            }    
    148          }
    149          /***********************************************************************************
    150          *       Descrição       :       Executa um passo no teste da memória dataflash
    151          *       Parametros      :       (unsigned char) passo atual
    152          *       Retorno         :       (unsigned char) novo passo
    153          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    154          unsigned char MTH_passo_teste_data_flash(unsigned char idioma,unsigned char passo){  
    155            /*
    156            unsigned char buffer[64];
    157            
    158            switch(passo){
    159              case 0:
    160                      STRING_write_to_internal(NO_CLEAR,NULL,(char*)STRING_passos_teste_dataflash[idioma][0]);
    161                      for(unsigned char i=0;i<64;i++)
    162                        buffer[i] = i;
    163                      MEMORYWRAPPER_writeBytes(ADR_AREA_TESTE,buffer,64);
    164                      passo = 1;
    165                      break;
    166              case 1:
    167                      STRING_write_to_internal(NO_CLEAR,NULL,(char*)STRING_passos_teste_dataflash[idioma][1]);
    168                      MEMORYWRAPPER_readBytes(ADR_AREA_TESTE,buffer,64);
    169                      passo = 2;
    170                      for(unsigned char i=0;i<64;i++)
    171                        if(buffer[i]!=i)
    172                          passo = 3;
    173                      break;
    174              case 2:
    175                      STRING_write_to_internal(NO_CLEAR,NULL,(char*)STRING_passos_teste_dataflash[idioma][2]);
    176                      passo = 0;
    177                      break;
    178              case 3:
    179                      STRING_write_to_internal(NO_CLEAR,NULL,(char*)STRING_passos_teste_dataflash[idioma][3]);
    180                      passo = 0;
    181                      break;
    182            }
    183            
    184            return passo;
    185            */
    186            return 0;
   \                     MTH_passo_teste_data_flash:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    187          }
    188          /***********************************************************************************
    189          *       Descrição       :       Faz  o teste da memória flash
    190          *       Parametros      :       nenhum
    191          *       Retorno         :       nenhum
    192          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    193          void MTH_teste_data_flash(void){
   \                     MTH_teste_data_flash:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    194            eTECLA tecla;
    195            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000002   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   00000006   0x0004             MOVS     R4,R0
    196            unsigned char tempo=1;
   \   00000008   0x2501             MOVS     R5,#+1
    197            unsigned char passo=0;
   \   0000000A   0x2600             MOVS     R6,#+0
    198          
    199            srand(100);  
   \   0000000C   0x2064             MOVS     R0,#+100
   \   0000000E   0x.... 0x....      BL       srand
    200            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_teste_data_flash[idioma],NULL);  
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   0000001A   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       STRING_write_to_internal
   \   00000024   0xE00F             B.N      ??MTH_teste_data_flash_0
    201            for(;;){
    202              
    203              tecla = TECLADO_getch();
    204              switch(tecla){
    205                case TECLA_ENTER:        
    206                     break;
    207                case TECLA_ESC:
    208                     return;
    209                case TECLA_INC:
    210                     break;
    211                case TECLA_DEC:
    212                     break;
    213              }
    214              
    215              // 
    216              //  Executa o teste
    217              //
    218              if(!--tempo){
   \                     ??MTH_teste_data_flash_1:
   \                     ??MTH_teste_data_flash_2:
   \   00000026   0x1E6D             SUBS     R5,R5,#+1
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD107             BNE.N    ??MTH_teste_data_flash_3
    219                tempo = 10;      
   \   00000030   0x250A             MOVS     R5,#+10
    220                passo = MTH_passo_teste_data_flash(idioma,passo);      
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       MTH_passo_teste_data_flash
   \   0000003E   0x0006             MOVS     R6,R0
    221              }    
    222              
    223              vTaskDelay(50);
   \                     ??MTH_teste_data_flash_3:
   \   00000040   0x2032             MOVS     R0,#+50
   \   00000042   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_teste_data_flash_0:
   \   00000046   0x.... 0x....      BL       TECLADO_getch
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD006             BEQ.N    ??MTH_teste_data_flash_4
   \   00000050   0xD3E9             BCC.N    ??MTH_teste_data_flash_2
   \   00000052   0x2803             CMP      R0,#+3
   \   00000054   0xD0E7             BEQ.N    ??MTH_teste_data_flash_1
   \   00000056   0xD303             BCC.N    ??MTH_teste_data_flash_5
   \   00000058   0x2804             CMP      R0,#+4
   \   0000005A   0xD1E4             BNE.N    ??MTH_teste_data_flash_2
   \                     ??MTH_teste_data_flash_6:
   \   0000005C   0xE7E3             B.N      ??MTH_teste_data_flash_2
   \                     ??MTH_teste_data_flash_4:
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??MTH_teste_data_flash_5:
   \   00000060   0xE7E1             B.N      ??MTH_teste_data_flash_2
    224            }    
    225          }
    226          /***********************************************************************************
    227          *       Descrição       :       Teste do controle do dispensador de
    228          *                               embalagem
    229          *       Parametros      :       nenhum
    230          *       Retorno         :       nenhum
    231          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    232          void MTH_teste_dispensador_papel(void){
   \                     MTH_teste_dispensador_papel:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    233            eTECLA tecla;
    234            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    235            char buffer_linha[17];
    236          
    237            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_tela_teste_dispensador_papel[idioma],NULL);  
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE00F             B.N      ??MTH_teste_dispensador_papel_0
    238            for(;;){
    239              
    240              tecla = TECLADO_getch();
    241              switch(tecla){
    242                case TECLA_ENTER:
    243                     break;
    244                case TECLA_ESC:
    245                     return;
    246                case TECLA_INC:
    247                     BOARD_set_motor_embalagem(1);
    248                     break;
    249                case TECLA_DEC:
    250                     BOARD_set_motor_embalagem(0);
    251                     break;
    252              }
    253              
    254              unsigned char barreira = GET_BARREIRA_SAIDA_PAPEL();
    255              unsigned int nivelPapel = AA_mediaMovelPapel();
    256              unsigned char reserva = GET_SENSOR_RESERVA_PAPEL();
    257              
    258              nivelPapel *= 100;
    259              nivelPapel>>= 12;
    260              
    261              sprintf(buffer_linha,"BP:%01d-NP:%03d-RP:%1d",barreira==BARREIRA_PAPEL_LIVRE?0:1,nivelPapel,reserva?1:0);
   \                     ??MTH_teste_dispensador_papel_1:
   \   0000001C   0x2201             MOVS     R2,#+1
   \                     ??MTH_teste_dispensador_papel_2:
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x0023             MOVS     R3,R4
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   00000026   0xA801             ADD      R0,SP,#+4
   \   00000028   0x.... 0x....      BL       sprintf
    262              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   0000002C   0xAA01             ADD      R2,SP,#+4
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       STRING_write_to_internal
    263              
    264              vTaskDelay(50);
   \   00000036   0x2032             MOVS     R0,#+50
   \   00000038   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_teste_dispensador_papel_0:
   \   0000003C   0x.... 0x....      BL       TECLADO_getch
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD006             BEQ.N    ??MTH_teste_dispensador_papel_3
   \   00000046   0xD30E             BCC.N    ??MTH_teste_dispensador_papel_4
   \   00000048   0x2803             CMP      R0,#+3
   \   0000004A   0xD009             BEQ.N    ??MTH_teste_dispensador_papel_5
   \   0000004C   0xD304             BCC.N    ??MTH_teste_dispensador_papel_6
   \   0000004E   0x2804             CMP      R0,#+4
   \   00000050   0xD109             BNE.N    ??MTH_teste_dispensador_papel_4
   \                     ??MTH_teste_dispensador_papel_7:
   \   00000052   0xE008             B.N      ??MTH_teste_dispensador_papel_4
   \                     ??MTH_teste_dispensador_papel_3:
   \   00000054   0xB007             ADD      SP,SP,#+28
   \   00000056   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??MTH_teste_dispensador_papel_6:
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      BL       BOARD_set_motor_embalagem
   \   0000005E   0xE002             B.N      ??MTH_teste_dispensador_papel_4
   \                     ??MTH_teste_dispensador_papel_5:
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       BOARD_set_motor_embalagem
   \                     ??MTH_teste_dispensador_papel_4:
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       BOARD_get_sinal
   \   0000006C   0x0005             MOVS     R5,R0
   \   0000006E   0x.... 0x....      BL       AA_mediaMovelPapel
   \   00000072   0x0004             MOVS     R4,R0
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x.... 0x....      BL       BOARD_get_sinal
   \   0000007A   0x2164             MOVS     R1,#+100
   \   0000007C   0x434C             MULS     R4,R1,R4
   \   0000007E   0x0B24             LSRS     R4,R4,#+12
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD001             BEQ.N    ??MTH_teste_dispensador_papel_8
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xE000             B.N      ??MTH_teste_dispensador_papel_9
   \                     ??MTH_teste_dispensador_papel_8:
   \   0000008A   0x2000             MOVS     R0,#+0
   \                     ??MTH_teste_dispensador_papel_9:
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x2D00             CMP      R5,#+0
   \   00000090   0xD1C4             BNE.N    ??MTH_teste_dispensador_papel_1
   \   00000092   0x2200             MOVS     R2,#+0
   \   00000094   0xE7C3             B.N      ??MTH_teste_dispensador_papel_2
    265            }    
    266          }
    267          /***********************************************************************************
    268          *       Descriçao       :       Teste do dosador do milho
    269          *       Parametros      :       nenhum
    270          *       Retorno         :       nenhum
    271          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    272          void MTH_teste_dosador_milho(void){
   \                     MTH_teste_dosador_milho:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    273            eTECLA tecla;  
    274            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   00000008   0x0004             MOVS     R4,R0
    275            char buffer_linha[17];
    276            eMOTOR_DOSE estado=PARADO;
   \   0000000A   0x2500             MOVS     R5,#+0
    277              
    278            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_tela_teste_dosador[idioma],NULL);    
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   00000014   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001E   0xE01E             B.N      ??MTH_teste_dosador_milho_0
    279            
    280            for(;;){
    281              
    282              tecla = TECLADO_getch();
    283              switch(tecla){
    284                case TECLA_ENTER:
    285                     BOARD_set_motor_dose(PARADO);
    286                     estado = PARADO;        
    287                     break;
    288                case TECLA_ESC:
    289                     return;
    290                case TECLA_INC:
    291                     BOARD_set_motor_dose(DOSAR);
    292                     estado = DOSAR;
    293                     break;
    294                case TECLA_DEC:
    295                     BOARD_set_motor_dose(REVERTER);
   \                     ??MTH_teste_dosador_milho_1:
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x.... 0x....      BL       BOARD_set_motor_dose
    296                     estado = REVERTER;
   \   00000026   0x2502             MOVS     R5,#+2
    297                     break;
    298              }
    299             
    300              unsigned char sensor_dose = GET_SENSOR_DOSE();
   \                     ??MTH_teste_dosador_milho_2:
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      BL       BOARD_get_sinal
   \   0000002E   0x0002             MOVS     R2,R0
    301              sprintf(buffer_linha,"SD:%01d - M:%s",sensor_dose,STRING_texto_teste_motor[idioma][estado]);
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x200C             MOVS     R0,#+12
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   0000003A   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000003E   0xF850 0x3025      LDR      R3,[R0, R5, LSL #+2]
   \   00000042   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable14_10
   \   00000048   0xA800             ADD      R0,SP,#+0
   \   0000004A   0x.... 0x....      BL       sprintf
    302              
    303              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);    
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      BL       STRING_write_to_internal
    304              vTaskDelay(50);
   \   00000058   0x2032             MOVS     R0,#+50
   \   0000005A   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_teste_dosador_milho_0:
   \   0000005E   0x.... 0x....      BL       TECLADO_getch
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD00A             BEQ.N    ??MTH_teste_dosador_milho_3
   \   00000068   0xD3DE             BCC.N    ??MTH_teste_dosador_milho_2
   \   0000006A   0x2803             CMP      R0,#+3
   \   0000006C   0xD0D8             BEQ.N    ??MTH_teste_dosador_milho_1
   \   0000006E   0xD308             BCC.N    ??MTH_teste_dosador_milho_4
   \   00000070   0x2804             CMP      R0,#+4
   \   00000072   0xD1D9             BNE.N    ??MTH_teste_dosador_milho_2
   \                     ??MTH_teste_dosador_milho_5:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       BOARD_set_motor_dose
   \   0000007A   0x2500             MOVS     R5,#+0
   \   0000007C   0xE7D4             B.N      ??MTH_teste_dosador_milho_2
   \                     ??MTH_teste_dosador_milho_3:
   \   0000007E   0xB005             ADD      SP,SP,#+20
   \   00000080   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??MTH_teste_dosador_milho_4:
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       BOARD_set_motor_dose
   \   00000088   0x2501             MOVS     R5,#+1
   \   0000008A   0xE7CD             B.N      ??MTH_teste_dosador_milho_2
    305            }   
    306          }
    307          /***********************************************************************************
    308          *       Descrição       :       Teste de controle do motor AC
    309          *       Parametros      :       nenhum
    310          *       Retorno         :       nenhum
    311          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    312          void MTH_teste_ventilador(void){
   \                     MTH_teste_ventilador:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
    313            eTECLA tecla;  
    314            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000006   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   0000000A   0x0004             MOVS     R4,R0
    315            char buffer_linha[17];
    316            unsigned int contagem_atual=4000;
   \   0000000C   0xF44F 0x657A      MOV      R5,#+4000
    317            unsigned int ultima_contagem=4000;
   \   00000010   0xF44F 0x667A      MOV      R6,#+4000
    318              
    319            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_teste_ventilador[idioma],NULL);      
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   0000001C   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       STRING_write_to_internal
    320            POTENCIA_set_neutro(1);
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       POTENCIA_set_neutro
    321            BOARD_setter_general_purpose_counter(0);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       BOARD_setter_general_purpose_counter
   \   00000032   0xE00D             B.N      ??MTH_teste_ventilador_0
    322            
    323            for(;;){
    324              
    325              tecla = TECLADO_getch();
    326              switch(tecla){
    327                case TECLA_ENTER:
    328                     POTENCIA_setRPM(0);
    329                case TECLA_ESC:
    330                     POTENCIA_setRPM(0);        
    331                     POTENCIA_set_neutro(0);
    332                     return;
    333                case TECLA_INC:
    334                     if(contagem_atual<18000)
    335                       contagem_atual+=100;
    336                     BOARD_setter_general_purpose_counter(3000);
    337                     break;
    338                case TECLA_DEC:
    339                     if(contagem_atual>1000)
    340                       contagem_atual-=100;
    341                     BOARD_setter_general_purpose_counter(3000);
    342                     break;
    343              }
    344              
    345              unsigned short int frequencia=POTENCIA_getFrequenciaRede();
    346              unsigned short int rotacao = POTENCIA_getRPMmedido();
    347              
    348              if(!BOARD_getter_general_purpose_counter()){
    349                
    350                if(contagem_atual!=ultima_contagem){
    351                  POTENCIA_setRPM(contagem_atual);
    352                  ultima_contagem = contagem_atual;
    353                  sprintf(buffer_linha,"F:%02dHz-RPM:%05d",frequencia,rotacao);
    354                  STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_teste_ventilador[idioma],buffer_linha);        
    355                }
    356                else{        
    357                  sprintf(buffer_linha,"F:%02dHz-RPM:%05d",frequencia,rotacao);
    358                  STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
    359                }
    360              }
    361              else{
    362                sprintf(buffer_linha," SET RPM:%05d  ",contagem_atual);
   \                     ??MTH_teste_ventilador_1:
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable14_12
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x.... 0x....      BL       sprintf
    363                STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);            
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       STRING_write_to_internal
    364              }
    365              
    366              vTaskDelay(50);
   \                     ??MTH_teste_ventilador_2:
   \   0000004A   0x2032             MOVS     R0,#+50
   \   0000004C   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_teste_ventilador_0:
   \   00000050   0x.... 0x....      BL       TECLADO_getch
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD008             BEQ.N    ??MTH_teste_ventilador_3
   \   0000005A   0xD322             BCC.N    ??MTH_teste_ventilador_4
   \   0000005C   0x2803             CMP      R0,#+3
   \   0000005E   0xD018             BEQ.N    ??MTH_teste_ventilador_5
   \   00000060   0xD30D             BCC.N    ??MTH_teste_ventilador_6
   \   00000062   0x2804             CMP      R0,#+4
   \   00000064   0xD11D             BNE.N    ??MTH_teste_ventilador_4
   \                     ??MTH_teste_ventilador_7:
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       POTENCIA_setRPM
   \                     ??MTH_teste_ventilador_3:
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       POTENCIA_setRPM
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       POTENCIA_set_neutro
   \   00000078   0xB006             ADD      SP,SP,#+24
   \   0000007A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??MTH_teste_ventilador_6:
   \   0000007E   0xF244 0x6050      MOVW     R0,#+18000
   \   00000082   0x4285             CMP      R5,R0
   \   00000084   0xD200             BCS.N    ??MTH_teste_ventilador_8
   \   00000086   0x3564             ADDS     R5,R5,#+100
   \                     ??MTH_teste_ventilador_8:
   \   00000088   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000008C   0x.... 0x....      BL       BOARD_setter_general_purpose_counter
   \   00000090   0xE007             B.N      ??MTH_teste_ventilador_4
   \                     ??MTH_teste_ventilador_5:
   \   00000092   0xF5B5 0x7F7A      CMP      R5,#+1000
   \   00000096   0xD900             BLS.N    ??MTH_teste_ventilador_9
   \   00000098   0x3D64             SUBS     R5,R5,#+100
   \                     ??MTH_teste_ventilador_9:
   \   0000009A   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000009E   0x.... 0x....      BL       BOARD_setter_general_purpose_counter
   \                     ??MTH_teste_ventilador_4:
   \   000000A2   0x.... 0x....      BL       POTENCIA_getFrequenciaRede
   \   000000A6   0x0007             MOVS     R7,R0
   \   000000A8   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000000AC   0x4680             MOV      R8,R0
   \   000000AE   0x.... 0x....      BL       BOARD_getter_general_purpose_counter
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD1BE             BNE.N    ??MTH_teste_ventilador_1
   \   000000B6   0x42B5             CMP      R5,R6
   \   000000B8   0xD017             BEQ.N    ??MTH_teste_ventilador_10
   \   000000BA   0x0028             MOVS     R0,R5
   \   000000BC   0x.... 0x....      BL       POTENCIA_setRPM
   \   000000C0   0x002E             MOVS     R6,R5
   \   000000C2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000C6   0x4643             MOV      R3,R8
   \   000000C8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000CA   0x003A             MOVS     R2,R7
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable14_13
   \   000000D0   0xA800             ADD      R0,SP,#+0
   \   000000D2   0x.... 0x....      BL       sprintf
   \   000000D6   0xAA00             ADD      R2,SP,#+0
   \   000000D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   000000DE   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x.... 0x....      BL       STRING_write_to_internal
   \   000000E8   0xE7AF             B.N      ??MTH_teste_ventilador_2
   \                     ??MTH_teste_ventilador_10:
   \   000000EA   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000EE   0x4643             MOV      R3,R8
   \   000000F0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F2   0x003A             MOVS     R2,R7
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable14_13
   \   000000F8   0xA800             ADD      R0,SP,#+0
   \   000000FA   0x.... 0x....      BL       sprintf
   \   000000FE   0xAA00             ADD      R2,SP,#+0
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       STRING_write_to_internal
   \   00000108   0xE79F             B.N      ??MTH_teste_ventilador_2
    367            }    
    368          }
    369          /***********************************************************************************
    370          *       Descrição       :       Menu para testar a panela
    371          *       Parametros      :       nenhum
    372          *       Retorno         :       nenhum
    373          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    374          void MTH_teste_panela(void){
   \                     MTH_teste_panela:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    375            eTECLA tecla;
    376            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    377            char buffer_linha[17];
    378            unsigned char flag=0;
   \   00000008   0x2400             MOVS     R4,#+0
    379            unsigned char trap=0;
   \   0000000A   0x2500             MOVS     R5,#+0
    380            
    381            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_teste_panela[idioma],NULL);      
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000014   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       STRING_write_to_internal
    382            POTENCIA_setRPM(5000);  
   \   0000001E   0xF241 0x3088      MOVW     R0,#+5000
   \   00000022   0x.... 0x....      BL       POTENCIA_setRPM
   \   00000026   0xE018             B.N      ??MTH_teste_panela_0
    383            
    384            for(;;){
    385              
    386              tecla = TECLADO_getch();
    387              switch(tecla){
    388                case TECLA_ENTER:
    389                     trap ^= 255;
    390                     POTENCIA_set_neutro(trap);
    391                     break;
    392                case TECLA_ESC:
    393                     POTENCIA_setRPM(0);
    394                     return;
    395                case TECLA_INC:
    396                     flag = 1;
    397                     BOARD_setter_general_purpose_counter(3000);           
    398                     CT_set_temperatura(60);        
    399                     break;
    400                case TECLA_DEC:
    401                     flag = 0;
   \                     ??MTH_teste_panela_1:
   \   00000028   0x2400             MOVS     R4,#+0
    402                     CT_set_temperatura(0);                
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       CT_set_temperatura
    403                     break;
    404              }
    405              
    406              unsigned short int resistencia = AA_calculaResistorInteiro();
   \                     ??MTH_teste_panela_2:
   \   00000030   0x.... 0x....      BL       AA_calculaResistorInteiro
   \   00000034   0x0006             MOVS     R6,R0
    407              unsigned short int temperatura = AA_calculaTemperatura();
   \   00000036   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000003A   0x0003             MOVS     R3,R0
    408              
    409              sprintf(buffer_linha,"%05dR-%03doC-R:%01d",resistencia,temperatura,flag);   
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x9400             STR      R4,[SP, #+0]
   \   00000040   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000042   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000044   0x0032             MOVS     R2,R6
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable14_15
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       sprintf
    410              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000050   0xAA01             ADD      R2,SP,#+4
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       STRING_write_to_internal
   \                     ??MTH_teste_panela_0:
   \   0000005A   0x.... 0x....      BL       TECLADO_getch
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD00C             BEQ.N    ??MTH_teste_panela_3
   \   00000064   0xD3E4             BCC.N    ??MTH_teste_panela_2
   \   00000066   0x2803             CMP      R0,#+3
   \   00000068   0xD0DE             BEQ.N    ??MTH_teste_panela_1
   \   0000006A   0xD30D             BCC.N    ??MTH_teste_panela_4
   \   0000006C   0x2804             CMP      R0,#+4
   \   0000006E   0xD1DF             BNE.N    ??MTH_teste_panela_2
   \                     ??MTH_teste_panela_5:
   \   00000070   0xF095 0x05FF      EORS     R5,R5,#0xFF
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       POTENCIA_set_neutro
   \   0000007C   0xE7D8             B.N      ??MTH_teste_panela_2
   \                     ??MTH_teste_panela_3:
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       POTENCIA_setRPM
   \   00000084   0xB006             ADD      SP,SP,#+24
   \   00000086   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??MTH_teste_panela_4:
   \   00000088   0x2401             MOVS     R4,#+1
   \   0000008A   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000008E   0x.... 0x....      BL       BOARD_setter_general_purpose_counter
   \   00000092   0x203C             MOVS     R0,#+60
   \   00000094   0x.... 0x....      BL       CT_set_temperatura
   \   00000098   0xE7CA             B.N      ??MTH_teste_panela_2
    411            }  
    412          }
    413          /***********************************************************************************
    414          *       Descrição       :       Tela para testar o noteiro CCTALK
    415          *       Parametros      :       nenhum
    416          *       Retorno         :       nenhum
    417          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    418          void MTH_tela_teste_cctalk(void){
   \                     MTH_tela_teste_cctalk:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    419            eTECLA tecla;  
    420            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    421            char buffer_linha[17];
    422            
    423            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_teste_BV20[idioma],NULL);      
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable14_16
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE01A             B.N      ??MTH_tela_teste_cctalk_0
    424            
    425            for(;;){
    426              
    427              tecla = TECLADO_getch();
    428              switch(tecla){
    429                case TECLA_ENTER:
    430                     BV20_subtrai_valor_acumulado(BV20_get_valor_acumulador());
   \                     ??MTH_tela_teste_cctalk_1:
   \   0000001C   0x.... 0x....      BL       BV20_get_valor_acumulador
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0x.... 0x....      BL       BV20_subtrai_valor_acumulado
    431                     break;
    432                case TECLA_ESC:
    433                     return;
    434              }
    435              
    436              sprintf(buffer_linha,"T=%04d-Ev=%1d",BV20_get_valor_acumulador(),BV20_get_ultimo_evento());
   \                     ??MTH_tela_teste_cctalk_2:
   \   00000026   0x.... 0x....      BL       BV20_get_ultimo_evento
   \   0000002A   0x0004             MOVS     R4,R0
   \   0000002C   0x.... 0x....      BL       BV20_get_valor_acumulador
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x0023             MOVS     R3,R4
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x0002             MOVS     R2,R0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable14_17
   \   0000003C   0xA800             ADD      R0,SP,#+0
   \   0000003E   0x.... 0x....      BL       sprintf
    437              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000042   0xAA00             ADD      R2,SP,#+0
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       STRING_write_to_internal
    438              
    439              vTaskDelay(50);
   \   0000004C   0x2032             MOVS     R0,#+50
   \   0000004E   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_teste_cctalk_0:
   \   00000052   0x.... 0x....      BL       TECLADO_getch
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD002             BEQ.N    ??MTH_tela_teste_cctalk_3
   \   0000005C   0x2804             CMP      R0,#+4
   \   0000005E   0xD0DD             BEQ.N    ??MTH_tela_teste_cctalk_1
   \   00000060   0xE7E1             B.N      ??MTH_tela_teste_cctalk_2
   \                     ??MTH_tela_teste_cctalk_3:
   \   00000062   0xB006             ADD      SP,SP,#+24
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
    440            }  
    441          }
    442          /***********************************************************************************
    443          *       Descrição       :       Tela para testar o moedeiro tipo pulso
    444          *       Parametros      :       nenhum
    445          *       Retorno         :       nenhum
    446          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    447          void MTH_tela_teste_uca1(void){
   \                     MTH_tela_teste_uca1:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    448            eTECLA tecla;
    449            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    450            char buffer_linha[17];
    451            unsigned char flag=0;
   \   00000008   0x2400             MOVS     R4,#+0
    452            
    453            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_teste_uca1[idioma],NULL);     
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_18
   \   00000012   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001C   0xE017             B.N      ??MTH_tela_teste_uca1_0
    454            
    455            for(;;){
    456              
    457              tecla = TECLADO_getch();
    458              switch(tecla){
    459                case TECLA_ENTER:
    460                     PAGAMENTOS_subtrai_contagem_uca1(PAGAMENTOS_get_contagem_uca1());
    461                     break;
    462                case TECLA_ESC:
    463                     return;
    464                case TECLA_INC:
    465                     flag = 1;
    466                     break;
    467                case TECLA_DEC:
    468                     flag = 0;
    469                     break;
    470              }
    471              
    472              sprintf(buffer_linha,"%04d-[%s]",PAGAMENTOS_get_contagem_uca1(),flag?"LOCK  ":"UNLOK");
   \                     ??MTH_tela_teste_uca1_1:
   \   0000001E   0x.... 0x....      LDR.W    R5,??DataTable14_19
   \                     ??MTH_tela_teste_uca1_2:
   \   00000022   0x.... 0x....      BL       PAGAMENTOS_get_contagem_uca1
   \   00000026   0x0002             MOVS     R2,R0
   \   00000028   0x002B             MOVS     R3,R5
   \   0000002A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable14_20
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0x.... 0x....      BL       sprintf
    473              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       STRING_write_to_internal
    474              
    475              PAGAMENTOS_bloqueia_uca1(flag);
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       PAGAMENTOS_bloqueia_uca1
    476              vTaskDelay(50);
   \   00000048   0x2032             MOVS     R0,#+50
   \   0000004A   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_teste_uca1_0:
   \   0000004E   0x.... 0x....      BL       TECLADO_getch
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD00B             BEQ.N    ??MTH_tela_teste_uca1_3
   \   00000058   0xD30F             BCC.N    ??MTH_tela_teste_uca1_4
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD00C             BEQ.N    ??MTH_tela_teste_uca1_5
   \   0000005E   0xD309             BCC.N    ??MTH_tela_teste_uca1_6
   \   00000060   0x2804             CMP      R0,#+4
   \   00000062   0xD10A             BNE.N    ??MTH_tela_teste_uca1_4
   \                     ??MTH_tela_teste_uca1_7:
   \   00000064   0x.... 0x....      BL       PAGAMENTOS_get_contagem_uca1
   \   00000068   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   0x.... 0x....      BL       PAGAMENTOS_subtrai_contagem_uca1
   \   0000006E   0xE004             B.N      ??MTH_tela_teste_uca1_4
   \                     ??MTH_tela_teste_uca1_3:
   \   00000070   0xB005             ADD      SP,SP,#+20
   \   00000072   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??MTH_tela_teste_uca1_6:
   \   00000074   0x2401             MOVS     R4,#+1
   \   00000076   0xE000             B.N      ??MTH_tela_teste_uca1_4
   \                     ??MTH_tela_teste_uca1_5:
   \   00000078   0x2400             MOVS     R4,#+0
   \                     ??MTH_tela_teste_uca1_4:
   \   0000007A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   0x2C00             CMP      R4,#+0
   \   0000007E   0xD0CE             BEQ.N    ??MTH_tela_teste_uca1_1
   \   00000080   0x.... 0x....      LDR.W    R5,??DataTable14_21
   \   00000084   0xE7CD             B.N      ??MTH_tela_teste_uca1_2
    477            }  
    478          }
    479          /***********************************************************************************
    480          *       Descrição       :       Tela para testar o noteiro pulso
    481          *       Parametros      :       nenhum
    482          *       Retorno         :       nenhum
    483          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    484          void MTH_tela_teste_p70(void){
   \                     MTH_tela_teste_p70:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    485            eTECLA tecla;
    486            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    487            char buffer_linha[17];
    488            unsigned char flag=0;
   \   00000008   0x2400             MOVS     R4,#+0
    489            
    490            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_teste_P70[idioma],NULL);     
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x....             LDR.N    R1,??DataTable14_22
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE015             B.N      ??MTH_tela_teste_p70_0
    491            
    492            for(;;){
    493              
    494              tecla = TECLADO_getch();
    495              switch(tecla){
    496                case TECLA_ENTER:
    497                     PAGAMENTOS_subtrai_contagem_p70(PAGAMENTOS_get_contagem_p70());
    498                     break;
    499                case TECLA_ESC:
    500                     return;
    501                case TECLA_INC:
    502                     flag = 1;
    503                     break;
    504                case TECLA_DEC:
    505                     flag = 0;
    506                     break;
    507              }
    508              
    509              sprintf(buffer_linha,"%04d-[%s]",PAGAMENTOS_get_contagem_p70(),flag?"LOCK  ":"UNLOK");
   \                     ??MTH_tela_teste_p70_1:
   \   0000001C   0x....             LDR.N    R5,??DataTable14_19
   \                     ??MTH_tela_teste_p70_2:
   \   0000001E   0x.... 0x....      BL       PAGAMENTOS_get_contagem_p70
   \   00000022   0x0002             MOVS     R2,R0
   \   00000024   0x002B             MOVS     R3,R5
   \   00000026   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000028   0x....             LDR.N    R1,??DataTable14_20
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       sprintf
    510              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       STRING_write_to_internal
    511              
    512              PAGAMENTOS_set_inhibit_p70(flag);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       PAGAMENTOS_set_inhibit_p70
    513              vTaskDelay(50);
   \   00000042   0x2032             MOVS     R0,#+50
   \   00000044   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_teste_p70_0:
   \   00000048   0x.... 0x....      BL       TECLADO_getch
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD00B             BEQ.N    ??MTH_tela_teste_p70_3
   \   00000052   0xD30F             BCC.N    ??MTH_tela_teste_p70_4
   \   00000054   0x2803             CMP      R0,#+3
   \   00000056   0xD00C             BEQ.N    ??MTH_tela_teste_p70_5
   \   00000058   0xD309             BCC.N    ??MTH_tela_teste_p70_6
   \   0000005A   0x2804             CMP      R0,#+4
   \   0000005C   0xD10A             BNE.N    ??MTH_tela_teste_p70_4
   \                     ??MTH_tela_teste_p70_7:
   \   0000005E   0x.... 0x....      BL       PAGAMENTOS_get_contagem_p70
   \   00000062   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000064   0x.... 0x....      BL       PAGAMENTOS_subtrai_contagem_p70
   \   00000068   0xE004             B.N      ??MTH_tela_teste_p70_4
   \                     ??MTH_tela_teste_p70_3:
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??MTH_tela_teste_p70_6:
   \   0000006E   0x2401             MOVS     R4,#+1
   \   00000070   0xE000             B.N      ??MTH_tela_teste_p70_4
   \                     ??MTH_tela_teste_p70_5:
   \   00000072   0x2400             MOVS     R4,#+0
   \                     ??MTH_tela_teste_p70_4:
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x2C00             CMP      R4,#+0
   \   00000078   0xD0D0             BEQ.N    ??MTH_tela_teste_p70_1
   \   0000007A   0x....             LDR.N    R5,??DataTable14_21
   \   0000007C   0xE7CF             B.N      ??MTH_tela_teste_p70_2
    514            }  
    515          }
    516          /***********************************************************************************
    517          *       Descrição       :       Tela para o teste dos leds da placa
    518          *                               de instrução
    519          *       Parametros      :       nenhum
    520          *       Retorno         :       nenhum
    521          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    522          void MTH_tela_placa_instrucao(void){
   \                     MTH_tela_placa_instrucao:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    523            eTECLA tecla;
    524            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    525            char buffer_linha[17];
    526            unsigned char indice=0;
   \   00000008   0x2400             MOVS     R4,#+0
    527            
    528            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_teste_led_instrucao[idioma],NULL);    
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x....             LDR.N    R1,??DataTable14_23
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE013             B.N      ??MTH_tela_placa_instrucao_0
    529            
    530            for(;;){
    531              
    532              tecla = TECLADO_getch();
    533              switch(tecla){
    534                case TECLA_ENTER:
    535                     break;
    536                case TECLA_ESC:
    537                     return;
    538                case TECLA_INC: 
    539                     for(unsigned char i=0;i<8;i++)
    540                       LEDS_setter_led(i,0);
    541                     indice = (indice+1) % 8;
    542                     LEDS_setter_led(indice,1);
    543                     break;
    544                case TECLA_DEC:
    545                     for(unsigned char i=0;i<8;i++)
    546                       LEDS_setter_led(i,0);   
    547                     if(indice)
    548                       indice = 7;
    549                     else
    550                       indice--;
   \                     ??MTH_tela_placa_instrucao_1:
   \   0000001C   0x1E64             SUBS     R4,R4,#+1
    551                     LEDS_setter_led(indice,1);
   \                     ??MTH_tela_placa_instrucao_2:
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       LEDS_setter_led
    552                     break;
    553              }
    554              
    555              sprintf(buffer_linha,"LED:[%01d]",indice);
   \                     ??MTH_tela_placa_instrucao_3:
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x0022             MOVS     R2,R4
   \   0000002C   0x....             LDR.N    R1,??DataTable14_24
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x.... 0x....      BL       sprintf
    556              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       STRING_write_to_internal
    557                      
    558              vTaskDelay(50);
   \   0000003E   0x2032             MOVS     R0,#+50
   \   00000040   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_placa_instrucao_0:
   \   00000044   0x.... 0x....      BL       TECLADO_getch
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD006             BEQ.N    ??MTH_tela_placa_instrucao_4
   \   0000004E   0xD3EB             BCC.N    ??MTH_tela_placa_instrucao_3
   \   00000050   0x2803             CMP      R0,#+3
   \   00000052   0xD01D             BEQ.N    ??MTH_tela_placa_instrucao_5
   \   00000054   0xD304             BCC.N    ??MTH_tela_placa_instrucao_6
   \   00000056   0x2804             CMP      R0,#+4
   \   00000058   0xD1E6             BNE.N    ??MTH_tela_placa_instrucao_3
   \                     ??MTH_tela_placa_instrucao_7:
   \   0000005A   0xE7E5             B.N      ??MTH_tela_placa_instrucao_3
   \                     ??MTH_tela_placa_instrucao_4:
   \   0000005C   0xB005             ADD      SP,SP,#+20
   \   0000005E   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??MTH_tela_placa_instrucao_6:
   \   00000060   0x2500             MOVS     R5,#+0
   \   00000062   0xE005             B.N      ??MTH_tela_placa_instrucao_8
   \                     ??MTH_tela_placa_instrucao_9:
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LEDS_setter_led
   \   0000006E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??MTH_tela_placa_instrucao_8:
   \   00000070   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000072   0x2D08             CMP      R5,#+8
   \   00000074   0xDBF6             BLT.N    ??MTH_tela_placa_instrucao_9
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x1C60             ADDS     R0,R4,#+1
   \   0000007A   0x2108             MOVS     R1,#+8
   \   0000007C   0xFB90 0xF4F1      SDIV     R4,R0,R1
   \   00000080   0xFB04 0x0411      MLS      R4,R4,R1,R0
   \   00000084   0x2101             MOVS     R1,#+1
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       LEDS_setter_led
   \   0000008E   0xE7CB             B.N      ??MTH_tela_placa_instrucao_3
   \                     ??MTH_tela_placa_instrucao_5:
   \   00000090   0x2500             MOVS     R5,#+0
   \   00000092   0xE005             B.N      ??MTH_tela_placa_instrucao_10
   \                     ??MTH_tela_placa_instrucao_11:
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x0028             MOVS     R0,R5
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       LEDS_setter_led
   \   0000009E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??MTH_tela_placa_instrucao_10:
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x2D08             CMP      R5,#+8
   \   000000A4   0xDBF6             BLT.N    ??MTH_tela_placa_instrucao_11
   \   000000A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A8   0x2C00             CMP      R4,#+0
   \   000000AA   0xD0B7             BEQ.N    ??MTH_tela_placa_instrucao_1
   \   000000AC   0x2407             MOVS     R4,#+7
   \   000000AE   0xE7B6             B.N      ??MTH_tela_placa_instrucao_2
    559            }
    560          }
    561          /***********************************************************************************
    562          *       Descrição       :       Menu para teste do LCD externo
    563          *       Parametros      :       nenhum
    564          *       Retorno         :       nenhum
    565          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    566          void MTH_tela_teste_lcd_externo(void){
   \                     MTH_tela_teste_lcd_externo:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    567            eTECLA tecla;
    568            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   00000008   0x0004             MOVS     R4,R0
    569            char buffer_linha[17]={0};
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x2114             MOVS     R1,#+20
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    570            char first=' ';
   \   00000012   0x2520             MOVS     R5,#+32
    571            unsigned char ciclos=1;
   \   00000014   0x2601             MOVS     R6,#+1
    572              
    573            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_titulo_teste_lcd_externo[idioma],NULL);    
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x....             LDR.N    R0,??DataTable14_25
   \   0000001C   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       STRING_write_to_internal
   \   00000026   0xE015             B.N      ??MTH_tela_teste_lcd_externo_0
    574            
    575            for(;;){
    576             
    577              tecla = TECLADO_getch();
    578              switch(tecla){
    579                case TECLA_ENTER:
    580                     break;
    581                case TECLA_ESC:
    582                     return;
    583                case TECLA_INC:
    584                     break;
    585                case TECLA_DEC:
    586                     break;
    587              }       
    588              
    589              for(unsigned char i=0;i<16;i++)
    590                buffer_linha[i] = first;
   \                     ??MTH_tela_teste_lcd_externo_1:
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x5445             STRB     R5,[R0, R1]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \                     ??MTH_tela_teste_lcd_externo_2:
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x2810             CMP      R0,#+16
   \   00000034   0xDBF8             BLT.N    ??MTH_tela_teste_lcd_externo_1
    591                  
    592              STRING_write_to_external(NO_CLEAR,buffer_linha,buffer_linha);
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       STRING_write_to_external
    593              
    594              if(!--ciclos){
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD101             BNE.N    ??MTH_tela_teste_lcd_externo_3
    595                ciclos = 10;
   \   0000004A   0x260A             MOVS     R6,#+10
    596                first++;      
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
    597              }
    598              
    599              vTaskDelay(50);    
   \                     ??MTH_tela_teste_lcd_externo_3:
   \   0000004E   0x2032             MOVS     R0,#+50
   \   00000050   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_teste_lcd_externo_0:
   \   00000054   0x.... 0x....      BL       TECLADO_getch
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD006             BEQ.N    ??MTH_tela_teste_lcd_externo_4
   \   0000005E   0xD308             BCC.N    ??MTH_tela_teste_lcd_externo_5
   \   00000060   0x2803             CMP      R0,#+3
   \   00000062   0xD006             BEQ.N    ??MTH_tela_teste_lcd_externo_6
   \   00000064   0xD304             BCC.N    ??MTH_tela_teste_lcd_externo_7
   \   00000066   0x2804             CMP      R0,#+4
   \   00000068   0xD103             BNE.N    ??MTH_tela_teste_lcd_externo_5
   \                     ??MTH_tela_teste_lcd_externo_8:
   \   0000006A   0xE002             B.N      ??MTH_tela_teste_lcd_externo_5
   \                     ??MTH_tela_teste_lcd_externo_4:
   \   0000006C   0xB006             ADD      SP,SP,#+24
   \   0000006E   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??MTH_tela_teste_lcd_externo_7:
   \   00000070   0xE7FF             B.N      ??MTH_tela_teste_lcd_externo_5
   \                     ??MTH_tela_teste_lcd_externo_6:
   \                     ??MTH_tela_teste_lcd_externo_5:
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xE7DC             B.N      ??MTH_tela_teste_lcd_externo_2
    600            }  
    601          }
    602          /***********************************************************************************
    603          *       Descrição       :       Tela para realizar o teste da impressora
    604          *       Parametros      :       nenhum
    605          *       Retorno         :       nenhum
    606          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    607          void MTH_tela_teste_impressora(void){
   \                     MTH_tela_teste_impressora:
   \   00000000   0xB510             PUSH     {R4,LR}
    608            eTECLA tecla;
    609            unsigned char idioma = APLICACAO_carrega_idioma();  
   \   00000002   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   00000006   0x0004             MOVS     R4,R0
    610          
    611            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_titulo_teste_impresora[idioma][0],(char*)STRING_titulo_teste_impresora[idioma][1]);      
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x....             LDR.N    R0,??DataTable14_26
   \   0000000C   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000010   0x6842             LDR      R2,[R0, #+4]
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable14_26
   \   00000016   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       STRING_write_to_internal
   \   00000020   0xE002             B.N      ??MTH_tela_teste_impressora_0
    612            
    613            for(;;){
    614              
    615              tecla = TECLADO_getch();
    616              switch(tecla){
    617                case TECLA_ENTER:
    618                     STRING_write_to_internal(NO_CLEAR,NULL,"      ...       ");
    619                     IMPRESSORA_impressora_teste();
    620                     STRING_write_to_internal(NO_CLEAR,NULL,(char*)STRING_titulo_teste_impresora[idioma][1]);               
    621                     break;
    622                case TECLA_ESC:
    623                     return;
    624                case TECLA_INC:
    625                     break;
    626                case TECLA_DEC:
    627                     break;
    628              }       
    629              
    630              vTaskDelay(50);
   \                     ??MTH_tela_teste_impressora_1:
   \                     ??MTH_tela_teste_impressora_2:
   \   00000022   0x2032             MOVS     R0,#+50
   \   00000024   0x.... 0x....      BL       vTaskDelay
   \                     ??MTH_tela_teste_impressora_0:
   \   00000028   0x.... 0x....      BL       TECLADO_getch
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD016             BEQ.N    ??MTH_tela_teste_impressora_3
   \   00000032   0xD3F6             BCC.N    ??MTH_tela_teste_impressora_2
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD0F4             BEQ.N    ??MTH_tela_teste_impressora_1
   \   00000038   0xD313             BCC.N    ??MTH_tela_teste_impressora_4
   \   0000003A   0x2804             CMP      R0,#+4
   \   0000003C   0xD1F1             BNE.N    ??MTH_tela_teste_impressora_2
   \                     ??MTH_tela_teste_impressora_5:
   \   0000003E   0x....             LDR.N    R2,??DataTable14_27
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       STRING_write_to_internal
   \   00000048   0x.... 0x....      BL       IMPRESSORA_impressora_teste
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x....             LDR.N    R0,??DataTable14_26
   \   00000050   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000054   0x6842             LDR      R2,[R0, #+4]
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      BL       STRING_write_to_internal
   \   0000005E   0xE7E0             B.N      ??MTH_tela_teste_impressora_2
   \                     ??MTH_tela_teste_impressora_3:
   \   00000060   0xBD10             POP      {R4,PC}          ;; return
   \                     ??MTH_tela_teste_impressora_4:
   \   00000062   0xE7DE             B.N      ??MTH_tela_teste_impressora_2
    631            }  
    632          }
    633          /***********************************************************************************
    634          *       Descrição       :       Interface para teste da música
    635          *       Parametros      :       nenhum
    636          *       Retorno         :       nenhum
    637          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    638          void MTH_teste_musica(void){
   \                     MTH_teste_musica:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    639            eTECLA tecla;
    640            char buffer_linha[17];
    641            unsigned char idioma = APLICACAO_carrega_idioma();    
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    642            unsigned char flag=0;
   \   00000008   0x2400             MOVS     R4,#+0
    643            
    644            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_titulo_menu_teste_musica[idioma],NULL);
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x....             LDR.N    R1,??DataTable14_28
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STRING_write_to_internal
   \   0000001A   0xE009             B.N      ??MTH_teste_musica_0
    645                
    646            for(;;){
    647                      
    648              tecla = TECLADO_getch();
    649              switch(tecla){
    650                case TECLA_ENTER:
    651                     flag ^= 0xFF;
    652                     break;
    653                case TECLA_ESC:
    654                     PLAYER_interrompeMusica();
    655                     return;
    656              }
    657              
    658              if(!flag && !PLAYERWAVE_verificaToque()){
    659                 PLAYERWAVE_iniciaMusica(1,0); 
    660              }
    661              
    662              sprintf(buffer_linha,"[%s]",PLAYERWAVE_verificaToque()?"PLAY":"STOP");
   \                     ??MTH_teste_musica_1:
   \   0000001C   0x....             LDR.N    R2,??DataTable14_29
   \                     ??MTH_teste_musica_2:
   \   0000001E   0x....             LDR.N    R1,??DataTable14_30
   \   00000020   0xA800             ADD      R0,SP,#+0
   \   00000022   0x.... 0x....      BL       sprintf
    663              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);    
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       STRING_write_to_internal
   \                     ??MTH_teste_musica_0:
   \   00000030   0x.... 0x....      BL       TECLADO_getch
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD014             BEQ.N    ??MTH_teste_musica_3
   \   0000003A   0x2804             CMP      R0,#+4
   \   0000003C   0xD101             BNE.N    ??MTH_teste_musica_4
   \                     ??MTH_teste_musica_5:
   \   0000003E   0xF094 0x04FF      EORS     R4,R4,#0xFF
   \                     ??MTH_teste_musica_4:
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x2C00             CMP      R4,#+0
   \   00000046   0xD107             BNE.N    ??MTH_teste_musica_6
   \   00000048   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD103             BNE.N    ??MTH_teste_musica_6
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
   \                     ??MTH_teste_musica_6:
   \   00000058   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD0DD             BEQ.N    ??MTH_teste_musica_1
   \   00000060   0x....             LDR.N    R2,??DataTable14_31
   \   00000062   0xE7DC             B.N      ??MTH_teste_musica_2
   \                     ??MTH_teste_musica_3:
   \   00000064   0x.... 0x....      BL       PLAYER_interrompeMusica
   \   00000068   0xB006             ADD      SP,SP,#+24
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
    664            }
    665          }
    666          /***********************************************************************************
    667          *       Descrição       :       Interface para realizar o teste das
    668          *                               locuções
    669          *       Parametros      :       nenhum
    670          *       Retorno         :       nenhum
    671          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    672          void MTH_teste_locucoes(void){
   \                     MTH_teste_locucoes:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    673            eTECLA tecla;
    674            unsigned char idioma = APLICACAO_carrega_idioma();    
   \   00000004   0x.... 0x....      BL       APLICACAO_carrega_idioma
    675            char buffer_linha[17];
    676            const char toques[3]={0,2,3};
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable14_32
   \   0000000C   0x6813             LDR      R3,[R2, #0]
   \   0000000E   0x600B             STR      R3,[R1, #+0]
    677            unsigned char indice=0;
   \   00000010   0x2400             MOVS     R4,#+0
    678            unsigned char flag=0;
   \   00000012   0x2500             MOVS     R5,#+0
    679            
    680            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_titulo_menu_teste_vozes[idioma],NULL);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x....             LDR.N    R1,??DataTable14_33
   \   0000001A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       STRING_write_to_internal
   \   00000024   0xE00B             B.N      ??MTH_teste_locucoes_0
    681            for(;;){
    682              
    683              tecla = TECLADO_getch();
    684              switch(tecla){
    685                case TECLA_ENTER:
    686                     flag^= 0xFF;
    687                     break;
    688                case TECLA_ESC:
    689                     PLAYER_interrompeMusica();
    690                     return;
    691              }
    692              
    693              if(flag && !PLAYERWAVE_verificaToque()){      
    694                PLAYERWAVE_iniciaMusica(toques[indice],0);  
    695                indice = (indice+1) % 3;
    696              }
    697              
    698              sprintf(buffer_linha,"[%s][i:%01d]",PLAYERWAVE_verificaToque()?"PLAY":"STOP",indice+1);
   \                     ??MTH_teste_locucoes_1:
   \   00000026   0x....             LDR.N    R2,??DataTable14_29
   \                     ??MTH_teste_locucoes_2:
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x1C63             ADDS     R3,R4,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable14_34
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       sprintf
    699              STRING_write_to_internal(NO_CLEAR,NULL,buffer_linha);        
   \   00000034   0xAA01             ADD      R2,SP,#+4
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       STRING_write_to_internal
   \                     ??MTH_teste_locucoes_0:
   \   0000003E   0x.... 0x....      BL       TECLADO_getch
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD01D             BEQ.N    ??MTH_teste_locucoes_3
   \   00000048   0x2804             CMP      R0,#+4
   \   0000004A   0xD101             BNE.N    ??MTH_teste_locucoes_4
   \                     ??MTH_teste_locucoes_5:
   \   0000004C   0xF095 0x05FF      EORS     R5,R5,#0xFF
   \                     ??MTH_teste_locucoes_4:
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D00             CMP      R5,#+0
   \   00000054   0xD010             BEQ.N    ??MTH_teste_locucoes_6
   \   00000056   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD10C             BNE.N    ??MTH_teste_locucoes_6
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0xA800             ADD      R0,SP,#+0
   \   00000064   0x5C20             LDRB     R0,[R4, R0]
   \   00000066   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x1C60             ADDS     R0,R4,#+1
   \   0000006E   0x2103             MOVS     R1,#+3
   \   00000070   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000074   0xFB01 0x0412      MLS      R4,R1,R2,R0
   \                     ??MTH_teste_locucoes_6:
   \   00000078   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD0D2             BEQ.N    ??MTH_teste_locucoes_1
   \   00000080   0x....             LDR.N    R2,??DataTable14_31
   \   00000082   0xE7D1             B.N      ??MTH_teste_locucoes_2
   \                     ??MTH_teste_locucoes_3:
   \   00000084   0x.... 0x....      BL       PLAYER_interrompeMusica
   \   00000088   0xB007             ADD      SP,SP,#+28
   \   0000008A   0xBD30             POP      {R4,R5,PC}       ;; return
    700            }  
    701          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     MTH_funcs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     STRING_menu_teste_hardware

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     STRING_titulo_teste_hardware

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     STRING_teste_rtc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     `?<Constant "%02d:%02d:%02d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     STRING_teste_data_flash

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     STRING_tela_teste_dispensador_papel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     `?<Constant "BP:%01d-NP:%03d-RP:%1d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     STRING_tela_teste_dosador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     STRING_texto_teste_motor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     `?<Constant "SD:%01d - M:%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     STRING_teste_ventilador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     `?<Constant " SET RPM:%05d  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     `?<Constant "F:%02dHz-RPM:%05d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     STRING_teste_panela

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     `?<Constant "%05dR-%03doC-R:%01d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     STRING_mensagem_teste_BV20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     `?<Constant "T=%04d-Ev=%1d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x........         DC32     STRING_mensagem_teste_uca1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     `?<Constant "UNLOK">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x........         DC32     `?<Constant "%04d-[%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     `?<Constant "LOCK  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x........         DC32     STRING_mensagem_teste_P70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     STRING_mensagem_teste_led_instrucao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x........         DC32     `?<Constant "LED:[%01d]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x........         DC32     STRING_titulo_teste_lcd_externo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     STRING_titulo_teste_impresora

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     `?<Constant "      ...       ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x........         DC32     STRING_titulo_menu_teste_musica

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x........         DC32     `?<Constant "STOP">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x........         DC32     `?<Constant "[%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0x........         DC32     `?<Constant "PLAY">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \   00000000   0x........         DC32     `?<Constant {0, 2, 3}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_33:
   \   00000000   0x........         DC32     STRING_titulo_menu_teste_vozes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_34:
   \   00000000   0x........         DC32     `?<Constant "[%s][i:%01d]">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "%02d:%02d:%02d">`:
   \   00000000   0x25 0x30          DC8 "%02d:%02d:%02d"
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BP:%01d-NP:%03d-RP:%1d">`:
   \   00000000   0x42 0x50          DC8 "BP:%01d-NP:%03d-RP:%1d"
   \              0x3A 0x25    
   \              0x30 0x31    
   \              0x64 0x2D    
   \              0x4E 0x50    
   \              0x3A 0x25    
   \              0x30 0x33    
   \              0x64 0x2D    
   \              0x52 0x50    
   \              0x3A 0x25    
   \              0x31 0x64    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SD:%01d - M:%s">`:
   \   00000000   0x53 0x44          DC8 "SD:%01d - M:%s"
   \              0x3A 0x25    
   \              0x30 0x31    
   \              0x64 0x20    
   \              0x2D 0x20    
   \              0x4D 0x3A    
   \              0x25 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:%02dHz-RPM:%05d">`:
   \   00000000   0x46 0x3A          DC8 "F:%02dHz-RPM:%05d"
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x48 0x7A    
   \              0x2D 0x52    
   \              0x50 0x4D    
   \              0x3A 0x25    
   \              0x30 0x35    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " SET RPM:%05d  ">`:
   \   00000000   0x20 0x53          DC8 " SET RPM:%05d  "
   \              0x45 0x54    
   \              0x20 0x52    
   \              0x50 0x4D    
   \              0x3A 0x25    
   \              0x30 0x35    
   \              0x64 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "%05dR-%03doC-R:%01d">`:
   \   00000000   0x25 0x30          DC8 "%05dR-%03doC-R:%01d"
   \              0x35 0x64    
   \              0x52 0x2D    
   \              0x25 0x30    
   \              0x33 0x64    
   \              0x6F 0x43    
   \              0x2D 0x52    
   \              0x3A 0x25    
   \              0x30 0x31    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "T=%04d-Ev=%1d">`:
   \   00000000   0x54 0x3D          DC8 "T=%04d-Ev=%1d"
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x2D 0x45    
   \              0x76 0x3D    
   \              0x25 0x31    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%04d-[%s]">`:
   \   00000000   0x25 0x30          DC8 "%04d-[%s]"
   \              0x34 0x64    
   \              0x2D 0x5B    
   \              0x25 0x73    
   \              0x5D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LOCK  ">`:
   \   00000000   0x4C 0x4F          DC8 "LOCK  "
   \              0x43 0x4B    
   \              0x20 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "UNLOK">`:
   \   00000000   0x55 0x4E          DC8 "UNLOK"
   \              0x4C 0x4F    
   \              0x4B 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LED:[%01d]">`:
   \   00000000   0x4C 0x45          DC8 "LED:[%01d]"
   \              0x44 0x3A    
   \              0x5B 0x25    
   \              0x30 0x31    
   \              0x64 0x5D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "      ...       ">`:
   \   00000000   0x20 0x20          DC8 "      ...       "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x2E 0x2E    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "[%s]">`:
   \   00000000   0x5B 0x25          DC8 "[%s]"
   \              0x73 0x5D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "PLAY">`:
   \   00000000   0x50 0x4C          DC8 "PLAY"
   \              0x41 0x59    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "STOP">`:
   \   00000000   0x53 0x54          DC8 "STOP"
   \              0x4F 0x50    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant {0, 2, 3}>`:
   \   00000000   0x00 0x02          DC8 0, 2, 3, 0
   \              0x03 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "[%s][i:%01d]">`:
   \   00000000   0x5B 0x25          DC8 "[%s][i:%01d]"
   \              0x73 0x5D    
   \              0x5B 0x69    
   \              0x3A 0x25    
   \              0x30 0x31    
   \              0x64 0x5D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    702          /***********************************************************************************
    703          *       Fim do arquivo
    704          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MTH_entry
         8   -> APLICACAO_carrega_idioma
         8   -> MENUROLAGEM_show
       0   MTH_passo_teste_data_flash
      32   MTH_tela_placa_instrucao
        32   -> APLICACAO_carrega_idioma
        32   -> LEDS_setter_led
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
        32   -> vTaskDelay
      32   MTH_tela_teste_cctalk
        32   -> APLICACAO_carrega_idioma
        32   -> BV20_get_ultimo_evento
        32   -> BV20_get_valor_acumulador
        32   -> BV20_subtrai_valor_acumulado
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
        32   -> vTaskDelay
       8   MTH_tela_teste_impressora
         8   -> APLICACAO_carrega_idioma
         8   -> IMPRESSORA_impressora_teste
         8   -> STRING_write_to_internal
         8   -> TECLADO_getch
         8   -> vTaskDelay
      40   MTH_tela_teste_lcd_externo
        40   -> APLICACAO_carrega_idioma
        40   -> STRING_write_to_external
        40   -> STRING_write_to_internal
        40   -> TECLADO_getch
        40   -> __aeabi_memclr4
        40   -> vTaskDelay
      32   MTH_tela_teste_p70
        32   -> APLICACAO_carrega_idioma
        32   -> PAGAMENTOS_get_contagem_p70
        32   -> PAGAMENTOS_set_inhibit_p70
        32   -> PAGAMENTOS_subtrai_contagem_p70
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
        32   -> vTaskDelay
      32   MTH_tela_teste_uca1
        32   -> APLICACAO_carrega_idioma
        32   -> PAGAMENTOS_bloqueia_uca1
        32   -> PAGAMENTOS_get_contagem_uca1
        32   -> PAGAMENTOS_subtrai_contagem_uca1
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
        32   -> vTaskDelay
      16   MTH_teste_data_flash
        16   -> APLICACAO_carrega_idioma
        16   -> MTH_passo_teste_data_flash
        16   -> STRING_write_to_internal
        16   -> TECLADO_getch
        16   -> srand
        16   -> vTaskDelay
      40   MTH_teste_dispensador_papel
        40   -> AA_mediaMovelPapel
        40   -> APLICACAO_carrega_idioma
        40   -> BOARD_get_sinal
        40   -> BOARD_set_motor_embalagem
        40   -> STRING_write_to_internal
        40   -> TECLADO_getch
        40   -> sprintf
        40   -> vTaskDelay
      32   MTH_teste_dosador_milho
        32   -> APLICACAO_carrega_idioma
        32   -> BOARD_get_sinal
        32   -> BOARD_set_motor_dose
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
        32   -> vTaskDelay
      40   MTH_teste_locucoes
        40   -> APLICACAO_carrega_idioma
        40   -> PLAYERWAVE_iniciaMusica
        40   -> PLAYERWAVE_verificaToque
        40   -> PLAYER_interrompeMusica
        40   -> STRING_write_to_internal
        40   -> TECLADO_getch
        40   -> sprintf
      32   MTH_teste_musica
        32   -> APLICACAO_carrega_idioma
        32   -> PLAYERWAVE_iniciaMusica
        32   -> PLAYERWAVE_verificaToque
        32   -> PLAYER_interrompeMusica
        32   -> STRING_write_to_internal
        32   -> TECLADO_getch
        32   -> sprintf
      40   MTH_teste_panela
        40   -> AA_calculaResistorInteiro
        40   -> AA_calculaTemperatura
        40   -> APLICACAO_carrega_idioma
        40   -> BOARD_setter_general_purpose_counter
        40   -> CT_set_temperatura
        40   -> POTENCIA_setRPM
        40   -> POTENCIA_set_neutro
        40   -> STRING_write_to_internal
        40   -> TECLADO_getch
        40   -> sprintf
      48   MTH_teste_rtc
        48   -> APLICACAO_carrega_idioma
        48   -> RTC_getValue
        48   -> RTC_setValue
        48   -> STRING_write_to_internal
        48   -> TECLADO_getch
        48   -> sprintf
        48   -> vTaskDelay
      48   MTH_teste_ventilador
        48   -> APLICACAO_carrega_idioma
        48   -> BOARD_getter_general_purpose_counter
        48   -> BOARD_setter_general_purpose_counter
        48   -> POTENCIA_getFrequenciaRede
        48   -> POTENCIA_getRPMmedido
        48   -> POTENCIA_setRPM
        48   -> POTENCIA_set_neutro
        48   -> STRING_write_to_internal
        48   -> TECLADO_getch
        48   -> sprintf
        48   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "      ...       ">
      16  ?<Constant " SET RPM:%05d  ">
      16  ?<Constant "%02d:%02d:%02d">
      12  ?<Constant "%04d-[%s]">
      20  ?<Constant "%05dR-%03doC-R:%01d">
      24  ?<Constant "BP:%01d-NP:%03d-RP:%1d">
      20  ?<Constant "F:%02dHz-RPM:%05d">
      12  ?<Constant "LED:[%01d]">
       8  ?<Constant "LOCK  ">
       8  ?<Constant "PLAY">
      16  ?<Constant "SD:%01d - M:%s">
       8  ?<Constant "STOP">
      16  ?<Constant "T=%04d-Ev=%1d">
       8  ?<Constant "UNLOK">
       8  ?<Constant "[%s]">
      16  ?<Constant "[%s][i:%01d]">
       4  ?<Constant {0, 2, 3}>
      20  ?<Constant {0}>
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_33
       4  ??DataTable14_34
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      40  MTH_entry
      64  MTH_funcs
       4  MTH_passo_teste_data_flash
     176  MTH_tela_placa_instrucao
     102  MTH_tela_teste_cctalk
     100  MTH_tela_teste_impressora
     118  MTH_tela_teste_lcd_externo
     126  MTH_tela_teste_p70
     134  MTH_tela_teste_uca1
      98  MTH_teste_data_flash
     150  MTH_teste_dispensador_papel
     140  MTH_teste_dosador_milho
     140  MTH_teste_locucoes
     108  MTH_teste_musica
     154  MTH_teste_panela
     164  MTH_teste_rtc
     266  MTH_teste_ventilador

 
   316 bytes in section .rodata
 2 160 bytes in section .text
 
 2 160 bytes of CODE  memory
   316 bytes of CONST memory

Errors: none
Warnings: none

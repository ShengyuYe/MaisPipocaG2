###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      06/Jul/2017  15:10:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\MDB\mdb_bill.c                    #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\MDB\mdb_bill.c -lC                #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\mdb_bill.lst                   #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\mdb_bill.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\MDB\mdb_bill.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  mdb_bill.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  27/02/2017
     21          |
     22          |       Revisões           :  001
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       __aeabi_memcpy
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     34          #include "mdb.h"
     35          #include "mdb_uart.h"
     36          #include "mdb_bill.h"
     37          
     38          /***********************************************************************************
     39          *       Definições
     40          ***********************************************************************************/
     41          
     42          
     43          /***********************************************************************************
     44          *       Variaveis locais
     45          ***********************************************************************************/
     46          
     47          
     48          /***********************************************************************************
     49          *       Funções locais
     50          ***********************************************************************************/
     51          
     52          
     53          /***********************************************************************************
     54          *       Implementação das funções
     55          ***********************************************************************************/
     56          
     57          /***********************************************************************************
     58          *       Descrição       :       Verifica se o dispositivo está conectado
     59          *                               ao barramento
     60          *       Parametros      :       nenhum
     61          *       Retorno         :       (eMDB_reply) resultado da operação
     62          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          eMDB_reply MDBILL_verifica_dispositivo(void){
   \                     MDBILL_verifica_dispositivo:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     64            unsigned char buffer[2];
     65            unsigned char recebidos;
     66            
     67            buffer[0] = MDB_BILL_VALIDATOR;
   \   00000002   0x2030             MOVS     R0,#+48
   \   00000004   0xF88D 0x0008      STRB     R0,[SP, #+8]
     68            if(MDB_send_package(1,buffer,1,0,buffer,&recebidos)==MDB_OK){
   \   00000008   0xF10D 0x000A      ADD      R0,SP,#+10
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       MDB_send_package
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD107             BNE.N    ??MDBILL_verifica_dispositivo_0
     69                  
     70              if(buffer[0]==MDB_RESP_ACK)
   \   00000022   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??MDBILL_verifica_dispositivo_1
     71                return MDB_OK;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE002             B.N      ??MDBILL_verifica_dispositivo_2
     72              
     73              return MDB_ERROR;
   \                     ??MDBILL_verifica_dispositivo_1:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??MDBILL_verifica_dispositivo_2
     74            }
     75              
     76            return  MDB_TIMEOUT; 
   \                     ??MDBILL_verifica_dispositivo_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_verifica_dispositivo_2:
   \   00000034   0xBD0E             POP      {R1-R3,PC}       ;; return
     77          }
     78          /***********************************************************************************
     79          *       Descrição       :       Faz o reset do validador 
     80          *       Parametros      :       nenhum
     81          *       Retorno         :       (eMDB_reply) resultado da operação
     82          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     83          eMDB_reply MDBILL_reset_device(void){
   \                     MDBILL_reset_device:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     84            unsigned char buffer[2];
     85            unsigned char recebidos;
     86            
     87            buffer[0] = BILL_RESET;
   \   00000002   0x2030             MOVS     R0,#+48
   \   00000004   0xF88D 0x0008      STRB     R0,[SP, #+8]
     88            if(MDB_send_package(1,buffer,1,0,buffer,&recebidos)==MDB_OK){
   \   00000008   0xF10D 0x000A      ADD      R0,SP,#+10
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       MDB_send_package
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD107             BNE.N    ??MDBILL_reset_device_0
     89                  
     90              if(buffer[0]==MDB_RESP_ACK)
   \   00000022   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??MDBILL_reset_device_1
     91                return MDB_OK;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE002             B.N      ??MDBILL_reset_device_2
     92              
     93              return MDB_ERROR;
   \                     ??MDBILL_reset_device_1:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??MDBILL_reset_device_2
     94            }
     95              
     96            return  MDB_TIMEOUT; 
   \                     ??MDBILL_reset_device_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_reset_device_2:
   \   00000034   0xBD0E             POP      {R1-R3,PC}       ;; return
     97          }
     98          /***********************************************************************************
     99          *       Descrição       :       Solicita as configurações ao noteiro
    100          *       Parametros      :       (unsigned char*)level
    101          *                               (unsigned short int) country
    102          *                               (unsigned short int) bill scaling factor
    103          *                               (unsigned char) casas decimais
    104          *                               (unsigned short int) capacidade do stacker
    105          *                               (unsigned short int) nível de segurança
    106          *                               (unsigned char*) tipo crédito dos canais
    107          *       Retorno         :       (eMDB_reply) resultado da operação
    108          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    109          eMDB_reply MDBILL_get_setup_from_device(unsigned char *level,
    110                                                  unsigned short int *country,
    111                                                  unsigned short int *scaling,
    112                                                  unsigned char *decimal_places,
    113                                                  unsigned short int *stacker_capacity,
    114                                                  unsigned char *scroll_preset,
    115                                                  unsigned short int *security_level,
    116                                                  unsigned char *credit_types){
   \                     MDBILL_get_setup_from_device:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    117            unsigned char setup[36];
    118            unsigned char size;
    119            
    120            setup[0] = BILL_SETUP;
   \   0000000C   0x2031             MOVS     R0,#+49
   \   0000000E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    121              
    122            if(MDB_send_package(1,setup,1,1,setup,&size)==MDB_OK){
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       MDB_send_package
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD13F             BNE.N    ??MDBILL_get_setup_from_device_0
    123              
    124              if(level!=NULL)
   \   0000002A   0x2F00             CMP      R7,#+0
   \   0000002C   0xD002             BEQ.N    ??MDBILL_get_setup_from_device_1
    125                *level = setup[Z1];
   \   0000002E   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000032   0x7038             STRB     R0,[R7, #+0]
    126              
    127              if(country!=NULL)          
   \                     ??MDBILL_get_setup_from_device_1:
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD006             BEQ.N    ??MDBILL_get_setup_from_device_2
    128                *country = setup[Z2]<<8 | setup[Z3];
   \   00000038   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000003C   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   00000040   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000044   0x8020             STRH     R0,[R4, #+0]
    129              
    130              if(country!=NULL)
   \                     ??MDBILL_get_setup_from_device_2:
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD006             BEQ.N    ??MDBILL_get_setup_from_device_3
    131                *scaling = setup[Z4]<<8 | setup[Z5];    
   \   0000004A   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   0000004E   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000052   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000056   0x8028             STRH     R0,[R5, #+0]
    132              
    133              if(decimal_places!=NULL)
   \                     ??MDBILL_get_setup_from_device_3:
   \   00000058   0x2E00             CMP      R6,#+0
   \   0000005A   0xD002             BEQ.N    ??MDBILL_get_setup_from_device_4
    134                *decimal_places = setup[Z6];
   \   0000005C   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   00000060   0x7030             STRB     R0,[R6, #+0]
   \                     ??MDBILL_get_setup_from_device_4:
   \   00000062   0x9812             LDR      R0,[SP, #+72]
    135              
    136              if(stacker_capacity!=NULL)
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD006             BEQ.N    ??MDBILL_get_setup_from_device_5
    137                *stacker_capacity = setup[Z7]<<8 | setup[Z8];
   \   00000068   0xF89D 0x1012      LDRB     R1,[SP, #+18]
   \   0000006C   0xF89D 0x2013      LDRB     R2,[SP, #+19]
   \   00000070   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000074   0x8001             STRH     R1,[R0, #+0]
   \                     ??MDBILL_get_setup_from_device_5:
   \   00000076   0x9814             LDR      R0,[SP, #+80]
    138              
    139              if(security_level!=NULL)
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD006             BEQ.N    ??MDBILL_get_setup_from_device_6
    140                *security_level = setup[Z9]<<8 | setup[Z10];  
   \   0000007C   0xF89D 0x1014      LDRB     R1,[SP, #+20]
   \   00000080   0xF89D 0x2015      LDRB     R2,[SP, #+21]
   \   00000084   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000088   0x8001             STRH     R1,[R0, #+0]
   \                     ??MDBILL_get_setup_from_device_6:
   \   0000008A   0x9813             LDR      R0,[SP, #+76]
    141              
    142              if(scroll_preset!=NULL)
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD002             BEQ.N    ??MDBILL_get_setup_from_device_7
    143                *scroll_preset = setup[Z11];
   \   00000090   0xF89D 0x1016      LDRB     R1,[SP, #+22]
   \   00000094   0x7001             STRB     R1,[R0, #+0]
   \                     ??MDBILL_get_setup_from_device_7:
   \   00000096   0x9815             LDR      R0,[SP, #+84]
    144              
    145              if(credit_types!=NULL)
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD004             BEQ.N    ??MDBILL_get_setup_from_device_8
    146                memcpy(credit_types,&setup[Z12],16);    
   \   0000009C   0x2210             MOVS     R2,#+16
   \   0000009E   0xF10D 0x0117      ADD      R1,SP,#+23
   \   000000A2   0x.... 0x....      BL       memcpy
    147              
    148              return MDB_OK;
   \                     ??MDBILL_get_setup_from_device_8:
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xE000             B.N      ??MDBILL_get_setup_from_device_9
    149            }              
    150            
    151            return MDB_TIMEOUT;
   \                     ??MDBILL_get_setup_from_device_0:
   \   000000AA   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_get_setup_from_device_9:
   \   000000AC   0xB00D             ADD      SP,SP,#+52
   \   000000AE   0xBDF0             POP      {R4-R7,PC}       ;; return
    152          }
    153          /***********************************************************************************
    154          *       Descrição       :      Lê a fila de eventos do validador
    155          *       Parametros      :       (unsigned char*) eventos
    156          *       Retorno         :       (eMDB_reply) resultado da operação
    157          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    158          eMDB_reply MDBILL_get_poll_from_device(sBILL_event *activity,unsigned char *length){
   \                     MDBILL_get_poll_from_device:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    159            unsigned char poll[16];
    160            unsigned char size;
    161            
    162            poll[0] = BILL_POLL;
   \   00000008   0x2033             MOVS     R0,#+51
   \   0000000A   0xF88D 0x000C      STRB     R0,[SP, #+12]
    163            if(MDB_send_package(1,poll,1,1,poll,&size)==MDB_OK){
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0xA803             ADD      R0,SP,#+12
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       MDB_send_package
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD131             BNE.N    ??MDBILL_get_poll_from_device_0
    164              
    165              *length = size;
   \   00000026   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002A   0x7028             STRB     R0,[R5, #+0]
    166              
    167              if(size>1){
   \   0000002C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xDB1E             BLT.N    ??MDBILL_get_poll_from_device_1
    168                
    169                for(unsigned char i=0;i<size && size<16;i++){        
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE011             B.N      ??MDBILL_get_poll_from_device_2
    170                   activity->tipo =  (eBILL_ROUTING)(poll[0]>>4);
   \                     ??MDBILL_get_poll_from_device_3:
   \   00000038   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0909             LSRS     R1,R1,#+4
   \   00000040   0x7021             STRB     R1,[R4, #+0]
    171                   activity->args =  (eBILL_TYPE)(poll[0]&0xF);
   \   00000042   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000046   0xF011 0x010F      ANDS     R1,R1,#0xF
   \   0000004A   0x7061             STRB     R1,[R4, #+1]
    172                   if(activity->tipo!=BILL_STATUS)
   \   0000004C   0x7821             LDRB     R1,[R4, #+0]
   \   0000004E   0x2900             CMP      R1,#+0
   \   00000050   0xD002             BEQ.N    ??MDBILL_get_poll_from_device_4
    173                     activity->args+= (eBILL_TYPE)CANAL_01;
   \   00000052   0x7861             LDRB     R1,[R4, #+1]
   \   00000054   0x310D             ADDS     R1,R1,#+13
   \   00000056   0x7061             STRB     R1,[R4, #+1]
    174                   
    175                   activity++;
   \                     ??MDBILL_get_poll_from_device_4:
   \   00000058   0x1CA4             ADDS     R4,R4,#+2
    176                } 
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \                     ??MDBILL_get_poll_from_device_2:
   \   0000005C   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD203             BCS.N    ??MDBILL_get_poll_from_device_5
   \   00000066   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000006A   0x2910             CMP      R1,#+16
   \   0000006C   0xDBE4             BLT.N    ??MDBILL_get_poll_from_device_3
    177                
    178                return MDB_OK;     
   \                     ??MDBILL_get_poll_from_device_5:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE00C             B.N      ??MDBILL_get_poll_from_device_6
    179              }
    180              else{
    181                if(poll[0]==MDB_RESP_ACK)
   \                     ??MDBILL_get_poll_from_device_1:
   \   00000072   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD101             BNE.N    ??MDBILL_get_poll_from_device_7
    182                  return MDB_OK;    
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xE006             B.N      ??MDBILL_get_poll_from_device_6
    183                else
    184                  if(poll[0]==MDB_RESP_NAK)
   \                     ??MDBILL_get_poll_from_device_7:
   \   0000007E   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000082   0x28FF             CMP      R0,#+255
   \   00000084   0xD101             BNE.N    ??MDBILL_get_poll_from_device_0
    185                    return MDB_ERROR;
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xE000             B.N      ??MDBILL_get_poll_from_device_6
    186              }
    187            }
    188              
    189            return MDB_TIMEOUT;   
   \                     ??MDBILL_get_poll_from_device_0:
   \   0000008A   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_get_poll_from_device_6:
   \   0000008C   0xB007             ADD      SP,SP,#+28
   \   0000008E   0xBD30             POP      {R4,R5,PC}       ;; return
    190          }
    191          /***********************************************************************************
    192          *       Descrição       :       Habilita os tipos de notas que serão utilizados
    193          *                               na aplicação
    194          *       Parametros      :       (unsigned short int) canais
    195          *       Retorno         :       (eMDB_reply) resultado da operação
    196          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    197          eMDB_reply MDBILL_set_bill_type_on_device(unsigned short int bill_types,
    198                                                    unsigned short int scrolls){
   \                     MDBILL_set_bill_type_on_device:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    199            unsigned char bills[5];  
    200            unsigned char size;
    201             
    202            bills[0] = BILL_TYPE;
   \   00000004   0x2234             MOVS     R2,#+52
   \   00000006   0xF88D 0x200C      STRB     R2,[SP, #+12]
    203            bills[1] = bill_types>>8;
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x0A02             LSRS     R2,R0,#+8
   \   0000000E   0xF88D 0x200D      STRB     R2,[SP, #+13]
    204            bills[2] = bill_types;
   \   00000012   0xF88D 0x000E      STRB     R0,[SP, #+14]
    205            bills[3] = scrolls>>8;
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x0A08             LSRS     R0,R1,#+8
   \   0000001A   0xF88D 0x000F      STRB     R0,[SP, #+15]
    206            bills[4] = scrolls;
   \   0000001E   0xF88D 0x1010      STRB     R1,[SP, #+16]
    207            
    208            if(MDB_send_package(1,bills,5,0,bills,&size)==MDB_OK){
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0xA803             ADD      R0,SP,#+12
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x2205             MOVS     R2,#+5
   \   0000002E   0xA903             ADD      R1,SP,#+12
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       MDB_send_package
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD107             BNE.N    ??MDBILL_set_bill_type_on_device_0
    209              
    210              if(bills[0]==MDB_RESP_ACK)
   \   0000003A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE.N    ??MDBILL_set_bill_type_on_device_1
    211                return MDB_OK;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE002             B.N      ??MDBILL_set_bill_type_on_device_2
    212              
    213              return MDB_ERROR;
   \                     ??MDBILL_set_bill_type_on_device_1:
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE000             B.N      ??MDBILL_set_bill_type_on_device_2
    214            }
    215            
    216            return MDB_TIMEOUT; 
   \                     ??MDBILL_set_bill_type_on_device_0:
   \   0000004A   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_set_bill_type_on_device_2:
   \   0000004C   0xB005             ADD      SP,SP,#+20
   \   0000004E   0xBD00             POP      {PC}             ;; return
    217          }
    218          /***********************************************************************************
    219          *       Descrição       :      Envia o comando para realizar o escrow da nota
    220          *       Parametros      :      (eMDB_ESCROW_COMMANDS) comando para o escrow
    221          *       Retorno         :      (eMDB_reply) resultado da operação
    222          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    223          eMDB_reply MDBILL_send_escrow_command(eMDB_ESCROW_COMMANDS cmd){
   \                     MDBILL_send_escrow_command:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    224            unsigned char escrow[2];
    225            unsigned char size;
    226          
    227            escrow[0] = BILL_ESCROW;
   \   00000002   0x2135             MOVS     R1,#+53
   \   00000004   0xF88D 0x1008      STRB     R1,[SP, #+8]
    228            escrow[1] = (unsigned char)cmd;  
   \   00000008   0xF88D 0x0009      STRB     R0,[SP, #+9]
    229            
    230            if(MDB_send_package(1,escrow,2,1,escrow,&size)==MDB_OK){
   \   0000000C   0xF10D 0x000A      ADD      R0,SP,#+10
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2202             MOVS     R2,#+2
   \   0000001A   0xA902             ADD      R1,SP,#+8
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       MDB_send_package
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD107             BNE.N    ??MDBILL_send_escrow_command_0
    231              //MDBAURT_sleep(3000);
    232              
    233              if(escrow[0]==MDB_RESP_ACK)
   \   00000026   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD101             BNE.N    ??MDBILL_send_escrow_command_1
    234                return MDB_OK;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE002             B.N      ??MDBILL_send_escrow_command_2
    235              
    236              return MDB_ERROR;
   \                     ??MDBILL_send_escrow_command_1:
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE000             B.N      ??MDBILL_send_escrow_command_2
    237            }
    238            
    239            return MDB_TIMEOUT; 
   \                     ??MDBILL_send_escrow_command_0:
   \   00000036   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_send_escrow_command_2:
   \   00000038   0xBD0E             POP      {R1-R3,PC}       ;; return
    240          }
    241          /***********************************************************************************
    242          *       Descrição       :       Verifica se o stacker está cheio
    243          *       Parametros      :       (eMDB_STACKER_STATE) estado do stacker
    244          *       Retorno         :       (eMDB_reply) resultado da operação
    245          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          eMDB_reply MDBILL_get_stacker_state(eMDB_STACKER_STATE *stacker_state){
   \                     MDBILL_get_stacker_state:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    247            unsigned char stacker[2];
    248            unsigned char size;
    249          
    250            stacker[0] = BILL_STACKER;
   \   00000006   0x2036             MOVS     R0,#+54
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
    251            
    252            if(MDB_send_package(1,stacker,2,1,stacker,&size)==MDB_OK){
   \   0000000C   0xF10D 0x000A      ADD      R0,SP,#+10
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2202             MOVS     R2,#+2
   \   0000001A   0xA902             ADD      R1,SP,#+8
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       MDB_send_package
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD106             BNE.N    ??MDBILL_get_stacker_state_0
    253              
    254              *stacker_state = (eMDB_STACKER_STATE)((stacker[0]&0x80)?STACK_BILL:RETURN_BILL);
   \   00000026   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002A   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000002E   0x7020             STRB     R0,[R4, #+0]
    255              
    256              return MDB_OK;   
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??MDBILL_get_stacker_state_1
    257            }
    258            
    259            return MDB_TIMEOUT; 
   \                     ??MDBILL_get_stacker_state_0:
   \   00000034   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_get_stacker_state_1:
   \   00000036   0xB004             ADD      SP,SP,#+16
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    260          }
    261          /***********************************************************************************
    262          *       Descrição       :       Verifica a identificação do equipamento
    263          *       Parametros      :       (char*) fabricante
    264          *                               (char*) numero de série
    265          *                               (char*) modelo
    266          *                               (char*) versao
    267          *       Retorno         :       (eMDB_reply) resultado da operçaão
    268          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    269          eMDB_reply MDBILL_get_identification_of_device(char *manufacturer,
    270                                                         char *serial_number,
    271                                                         char *model,
    272                                                         char *firmware_version){
   \                     MDBILL_get_identification_of_device:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    273            unsigned char ext[36];
    274            unsigned char size;
    275            
    276            ext[0] = BILL_EXPANSION_COMMAND;
   \   0000000C   0x2037             MOVS     R0,#+55
   \   0000000E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    277            ext[1] = 0x00;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x000D      STRB     R0,[SP, #+13]
    278            
    279            if(MDB_send_package(1,ext,2,1,ext,&size)==MDB_OK){
   \   00000018   0xA802             ADD      R0,SP,#+8
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \   0000001C   0xA803             ADD      R0,SP,#+12
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x2202             MOVS     R2,#+2
   \   00000024   0xA903             ADD      R1,SP,#+12
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       MDB_send_package
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD120             BNE.N    ??MDBILL_get_identification_of_device_0
    280                                                           
    281              if(manufacturer!=NULL)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD004             BEQ.N    ??MDBILL_get_identification_of_device_1
    282                memcpy(manufacturer,&ext[Z1],3);
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0xA903             ADD      R1,SP,#+12
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       memcpy
    283              
    284              if(serial_number!=NULL)
   \                     ??MDBILL_get_identification_of_device_1:
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD005             BEQ.N    ??MDBILL_get_identification_of_device_2
    285                memcpy(serial_number,&ext[Z4],12);
   \   00000042   0x220C             MOVS     R2,#+12
   \   00000044   0xF10D 0x010F      ADD      R1,SP,#+15
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       memcpy
    286              
    287              if(model!=NULL)
   \                     ??MDBILL_get_identification_of_device_2:
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD005             BEQ.N    ??MDBILL_get_identification_of_device_3
    288                memcpy(model,&ext[Z16],12);
   \   00000052   0x220C             MOVS     R2,#+12
   \   00000054   0xF10D 0x011B      ADD      R1,SP,#+27
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x.... 0x....      BL       memcpy
    289              
    290              if(firmware_version!=NULL)
   \                     ??MDBILL_get_identification_of_device_3:
   \   0000005E   0x2F00             CMP      R7,#+0
   \   00000060   0xD005             BEQ.N    ??MDBILL_get_identification_of_device_4
    291                memcpy(firmware_version,&ext[Z28],2);
   \   00000062   0x2202             MOVS     R2,#+2
   \   00000064   0xF10D 0x0127      ADD      R1,SP,#+39
   \   00000068   0x0038             MOVS     R0,R7
   \   0000006A   0x.... 0x....      BL       memcpy
    292              
    293              return MDB_OK;   
   \                     ??MDBILL_get_identification_of_device_4:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE000             B.N      ??MDBILL_get_identification_of_device_5
    294            }
    295            
    296            return MDB_TIMEOUT;
   \                     ??MDBILL_get_identification_of_device_0:
   \   00000072   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_get_identification_of_device_5:
   \   00000074   0xB00D             ADD      SP,SP,#+52
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
    297          }
    298          /***********************************************************************************
    299          *       Descrição       :       Lê as opções extras disponóiveis
    300          *       Parametros      :       (char*) fabricante
    301          *                               (char*) serial number
    302          *                               (char*) modelo
    303          *                               (char*) versão do software
    304          *                               (unsigned char*) funções opcionais
    305          *       Retorno         :       (eMDB_reply) resultado da operação
    306          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    307          eMDB_reply MDBILL_get_id_with_option_bits(char *manufacturer,
    308                                                    char *serial_number,
    309                                                    char* model,
    310                                                    char* firmware_version,
    311                                                    unsigned char *optional_features){
   \                     MDBILL_get_id_with_option_bits:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    312            unsigned char ext[36];
    313            unsigned char size;
    314            
    315            ext[0] = BILL_EXPANSION_COMMAND;
   \   0000000C   0x2037             MOVS     R0,#+55
   \   0000000E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    316            ext[1] = 0x02;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xF88D 0x000D      STRB     R0,[SP, #+13]
    317            
    318            if(MDB_send_package(1,ext,2,1,ext,&size)==MDB_OK){
   \   00000018   0xA802             ADD      R0,SP,#+8
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \   0000001C   0xA803             ADD      R0,SP,#+12
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x2202             MOVS     R2,#+2
   \   00000024   0xA903             ADD      R1,SP,#+12
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       MDB_send_package
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD128             BNE.N    ??MDBILL_get_id_with_option_bits_0
    319                                                           
    320              if(manufacturer!=NULL)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD004             BEQ.N    ??MDBILL_get_id_with_option_bits_1
    321                memcpy(manufacturer,&ext[Z1],3);
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0xA903             ADD      R1,SP,#+12
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       memcpy
    322              
    323              if(serial_number!=NULL)
   \                     ??MDBILL_get_id_with_option_bits_1:
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD005             BEQ.N    ??MDBILL_get_id_with_option_bits_2
    324                memcpy(serial_number,&ext[Z4],12);
   \   00000042   0x220C             MOVS     R2,#+12
   \   00000044   0xF10D 0x010F      ADD      R1,SP,#+15
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       memcpy
    325              
    326              if(model!=NULL)
   \                     ??MDBILL_get_id_with_option_bits_2:
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD005             BEQ.N    ??MDBILL_get_id_with_option_bits_3
    327                memcpy(model,&ext[Z16],12);
   \   00000052   0x220C             MOVS     R2,#+12
   \   00000054   0xF10D 0x011B      ADD      R1,SP,#+27
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x.... 0x....      BL       memcpy
    328              
    329              if(firmware_version!=NULL)
   \                     ??MDBILL_get_id_with_option_bits_3:
   \   0000005E   0x2F00             CMP      R7,#+0
   \   00000060   0xD005             BEQ.N    ??MDBILL_get_id_with_option_bits_4
    330                memcpy(firmware_version,&ext[Z28],2);
   \   00000062   0x2202             MOVS     R2,#+2
   \   00000064   0xF10D 0x0127      ADD      R1,SP,#+39
   \   00000068   0x0038             MOVS     R0,R7
   \   0000006A   0x.... 0x....      BL       memcpy
   \                     ??MDBILL_get_id_with_option_bits_4:
   \   0000006E   0x9812             LDR      R0,[SP, #+72]
    331              
    332              if(optional_features!=NULL)
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD004             BEQ.N    ??MDBILL_get_id_with_option_bits_5
    333                memcpy(optional_features,&ext[Z30],4);
   \   00000074   0x2204             MOVS     R2,#+4
   \   00000076   0xF10D 0x0129      ADD      R1,SP,#+41
   \   0000007A   0x.... 0x....      BL       memcpy
    334              
    335              return MDB_OK;   
   \                     ??MDBILL_get_id_with_option_bits_5:
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE000             B.N      ??MDBILL_get_id_with_option_bits_6
    336            }
    337            
    338            return MDB_TIMEOUT;                                      
   \                     ??MDBILL_get_id_with_option_bits_0:
   \   00000082   0x2002             MOVS     R0,#+2
   \                     ??MDBILL_get_id_with_option_bits_6:
   \   00000084   0xB00D             ADD      SP,SP,#+52
   \   00000086   0xBDF0             POP      {R4-R7,PC}       ;; return
    339          }
    340          /***********************************************************************************
    341          *       Fim do arquivo
    342          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   MDBILL_get_id_with_option_bits
        72   -> MDB_send_package
        72   -> memcpy
      72   MDBILL_get_identification_of_device
        72   -> MDB_send_package
        72   -> memcpy
      40   MDBILL_get_poll_from_device
        40   -> MDB_send_package
      72   MDBILL_get_setup_from_device
        72   -> MDB_send_package
        72   -> memcpy
      24   MDBILL_get_stacker_state
        24   -> MDB_send_package
      16   MDBILL_reset_device
        16   -> MDB_send_package
      16   MDBILL_send_escrow_command
        16   -> MDB_send_package
      24   MDBILL_set_bill_type_on_device
        24   -> MDB_send_package
      16   MDBILL_verifica_dispositivo
        16   -> MDB_send_package
       8   memcpy
         8   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     136  MDBILL_get_id_with_option_bits
     120  MDBILL_get_identification_of_device
     144  MDBILL_get_poll_from_device
     176  MDBILL_get_setup_from_device
      58  MDBILL_get_stacker_state
      54  MDBILL_reset_device
      58  MDBILL_send_escrow_command
      80  MDBILL_set_bill_type_on_device
      54  MDBILL_verifica_dispositivo
      14  memcpy

 
 894 bytes in section .text
 
 880 bytes of CODE memory (+ 14 bytes shared)

Errors: none
Warnings: none

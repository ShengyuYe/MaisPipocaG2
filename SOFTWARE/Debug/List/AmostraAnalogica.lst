###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      24/Jul/2017  15:06:34 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\AmostragemAnalogica\AmostraAnalog #
#                    ica.c                                                    #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\AmostragemAnalogica\AmostraAnalog #
#                    ica.c -lC C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardwa #
#                    re\MaisPipocaG2\SOFTWARE\Debug\List\ -lA                 #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\AmostraAnalogica.lst           #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\AmostraAnalogica.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\AmostragemAnalogica\AmostraAnalogica.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  AmostraAnalogica.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  19/06/2014
     21          |
     22          |       Revisões           :  1.0.0.0
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Include
     30          ***********************************************************************************/
     31          #include <nxp\iolpc1768.h>

   \                                 In section .noinit, at 0x400fc1a8
   \   __absolute union <unnamed> volatile _A_PCLKSEL0
   \                     _A_PCLKSEL0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc0c4
   \   __absolute union <unnamed> volatile _A_PCONP
   \                     _A_PCONP:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c004
   \   __absolute union <unnamed> volatile _A_PINSEL1
   \                     _A_PINSEL1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40034000
   \   __absolute union <unnamed> volatile _A_AD0CR
   \                     _A_AD0CR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40034004
   \   __absolute union <unnamed> volatile _A_AD0GDR
   \                     _A_AD0GDR:
   \   00000000                      DS8 4
     32          #include "..\..\includes.h"
     33          #include "amostraAnalogica.h"
     34          #include <math.h>
     35          #include "tabelaTermistor.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned short const TABTERM_curva_minimo[180]
   \                     TABTERM_curva_minimo:
   \   00000000   0x2774 0x2601      DC16 10100, 9729, 9373, 9032, 8706, 8393, 8093, 7805, 7529, 7265, 7011
   \              0x249D 0x2348
   \              0x2202 0x20C9
   \              0x1F9D 0x1E7D
   \              0x1D69 0x1C61
   \              0x1B63       
   \   00000016   0x1A6F 0x1986      DC16 6767, 6534, 6309, 6094, 5887, 5688, 5500, 5313, 5136, 4967, 4804
   \              0x18A5 0x17CE
   \              0x16FF 0x1638
   \              0x157C 0x14C1
   \              0x1410 0x1367
   \              0x12C4       
   \   0000002C   0x1227 0x1190      DC16 4647, 4496, 4351, 4211, 4076, 3947, 3822, 3702, 3586, 3475, 3367
   \              0x10FF 0x1073
   \              0x0FEC 0x0F6B
   \              0x0EEE 0x0E76
   \              0x0E02 0x0D93
   \              0x0D27       
   \   00000042   0x0CC0 0x0C5C      DC16 3264, 3164, 3068, 2975, 2886, 2799, 2716, 2636, 2558, 2483, 2411
   \              0x0BFC 0x0B9F
   \              0x0B46 0x0AEF
   \              0x0A9C 0x0A4C
   \              0x09FE 0x09B3
   \              0x096B       
   \   00000058   0x0925 0x08E1      DC16 2341, 2273, 2208, 2145, 2084, 2026, 1969, 1914, 1861, 1809, 1760
   \              0x08A0 0x0861
   \              0x0824 0x07EA
   \              0x07B1 0x077A
   \              0x0745 0x0711
   \              0x06E0       
   \   0000006E   0x06B0 0x0681      DC16 1712, 1665, 1620, 1577, 1534, 1494, 1454, 1416, 1379, 1343, 1308
   \              0x0654 0x0629
   \              0x05FE 0x05D6
   \              0x05AE 0x0588
   \              0x0563 0x053F
   \              0x051C       
   \   00000084   0x04FA 0x04DA      DC16 1274, 1242, 1210, 1179, 1149, 1121, 1093, 1065, 1039, 1013, 989
   \              0x04BA 0x049B
   \              0x047D 0x0461
   \              0x0445 0x0429
   \              0x040F 0x03F5
   \              0x03DD       
   \   0000009A   0x03C5 0x03AD      DC16 965, 941, 918, 896, 875, 854, 834, 814, 795, 777, 759, 741, 724
   \              0x0396 0x0380
   \              0x036B 0x0356
   \              0x0342 0x032E
   \              0x031B 0x0309
   \              0x02F7 0x02E5
   \              0x02D4       
   \   000000B4   0x02C4 0x02B4      DC16 708, 692, 676, 661, 646, 632, 618, 604, 591, 578, 565, 553, 541
   \              0x02A4 0x0295
   \              0x0286 0x0278
   \              0x026A 0x025C
   \              0x024F 0x0242
   \              0x0235 0x0229
   \              0x021D       
   \   000000CE   0x0212 0x0206      DC16 530, 518, 507, 497, 486, 476, 466, 457, 447, 438, 429, 420, 412
   \              0x01FB 0x01F1
   \              0x01E6 0x01DC
   \              0x01D2 0x01C9
   \              0x01BF 0x01B6
   \              0x01AD 0x01A4
   \              0x019C       
   \   000000E8   0x0194 0x018C      DC16 404, 396, 388, 380, 372, 365, 358, 351, 344, 338, 331, 325, 319
   \              0x0184 0x017C
   \              0x0174 0x016D
   \              0x0166 0x015F
   \              0x0158 0x0152
   \              0x014B 0x0145
   \              0x013F       
   \   00000102   0x0139 0x0133      DC16 313, 307, 301, 295, 290, 284, 279, 274, 269, 264, 259, 255, 250
   \              0x012D 0x0127
   \              0x0122 0x011C
   \              0x0117 0x0112
   \              0x010D 0x0108
   \              0x0103 0x00FF
   \              0x00FA       
   \   0000011C   0x00F6 0x00F1      DC16 246, 241, 237, 233, 229, 225, 221, 217, 213, 210, 206, 203, 199
   \              0x00ED 0x00E9
   \              0x00E5 0x00E1
   \              0x00DD 0x00D9
   \              0x00D5 0x00D2
   \              0x00CE 0x00CB
   \              0x00C7       
   \   00000136   0x00C4 0x00C1      DC16 196, 193, 189, 186, 183, 180, 177, 174, 171, 169, 166, 163, 161
   \              0x00BD 0x00BA
   \              0x00B7 0x00B4
   \              0x00B1 0x00AE
   \              0x00AB 0x00A9
   \              0x00A6 0x00A3
   \              0x00A1       
   \   00000150   0x009F 0x009C      DC16 159, 156, 154, 151, 149, 147, 144, 142, 140, 138, 136, 134
   \              0x009A 0x0097
   \              0x0095 0x0093
   \              0x0090 0x008E
   \              0x008C 0x008A
   \              0x0088 0x0086

   \                                 In section .rodata, align 4
   \   __absolute unsigned short const TABTERM_curva_maximo[180]
   \                     TABTERM_curva_maximo:
   \   00000000   0x26AC 0x2539      DC16 9900, 9529, 9173, 8833, 8508, 8196, 7897, 7611, 7337, 7074, 6822
   \              0x23D5 0x2281
   \              0x213C 0x2004
   \              0x1ED9 0x1DBB
   \              0x1CA9 0x1BA2
   \              0x1AA6       
   \   00000016   0x19B4 0x18CC      DC16 6580, 6348, 6126, 5912, 5707, 5511, 5322, 5141, 4966, 4799, 4638
   \              0x17EE 0x1718
   \              0x164B 0x1587
   \              0x14CA 0x1415
   \              0x1366 0x12BF
   \              0x121E       
   \   0000002C   0x1184 0x10EF      DC16 4484, 4335, 4192, 4055, 3923, 3796, 3673, 3556, 3442, 3333, 3228
   \              0x1060 0x0FD7
   \              0x0F53 0x0ED4
   \              0x0E59 0x0DE4
   \              0x0D72 0x0D05
   \              0x0C9C       
   \   00000042   0x0C37 0x0BD5      DC16 3127, 3029, 2935, 2845, 2758, 2674, 2592, 2514, 2439, 2366, 2296
   \              0x0B77 0x0B1D
   \              0x0AC6 0x0A72
   \              0x0A20 0x09D2
   \              0x0987 0x093E
   \              0x08F8       
   \   00000058   0x08B4 0x0872      DC16 2228, 2162, 2099, 2038, 1979, 1922, 1867, 1814, 1763, 1713, 1665
   \              0x0833 0x07F6
   \              0x07BB 0x0782
   \              0x074B 0x0716
   \              0x06E3 0x06B1
   \              0x0681       
   \   0000006E   0x0653 0x0626      DC16 1619, 1574, 1530, 1488, 1448, 1408, 1370, 1334, 1298, 1264, 1230
   \              0x05FA 0x05D0
   \              0x05A8 0x0580
   \              0x055A 0x0536
   \              0x0512 0x04F0
   \              0x04CE       
   \   00000084   0x04AE 0x048E      DC16 1198, 1166, 1136, 1107, 1078, 1051, 1024, 998, 973, 948, 925, 902
   \              0x0470 0x0453
   \              0x0436 0x041B
   \              0x0400 0x03E6
   \              0x03CD 0x03B4
   \              0x039D 0x0386
   \   0000009C   0x036F 0x035A      DC16 879, 858, 837, 816, 797, 777, 759, 741, 723, 706, 689, 673, 658
   \              0x0345 0x0330
   \              0x031D 0x0309
   \              0x02F7 0x02E5
   \              0x02D3 0x02C2
   \              0x02B1 0x02A1
   \              0x0292       
   \   000000B6   0x0282 0x0273      DC16 642, 627, 613, 599, 586, 572, 559, 547, 535, 523, 511, 500, 489
   \              0x0265 0x0257
   \              0x024A 0x023C
   \              0x022F 0x0223
   \              0x0217 0x020B
   \              0x01FF 0x01F4
   \              0x01E9       
   \   000000D0   0x01DF 0x01D4      DC16 479, 468, 458, 448, 439, 429, 420, 412, 403, 395, 386, 378, 371
   \              0x01CA 0x01C0
   \              0x01B7 0x01AD
   \              0x01A4 0x019C
   \              0x0193 0x018B
   \              0x0182 0x017A
   \              0x0173       
   \   000000EA   0x016B 0x0164      DC16 363, 356, 349, 342, 335, 328, 321, 315, 309, 303, 297, 291, 286
   \              0x015D 0x0156
   \              0x014F 0x0148
   \              0x0141 0x013B
   \              0x0135 0x012F
   \              0x0129 0x0123
   \              0x011E       
   \   00000104   0x0118 0x0113      DC16 280, 275, 270, 264, 259, 255, 250, 245, 241, 236, 232, 228, 223
   \              0x010E 0x0108
   \              0x0103 0x00FF
   \              0x00FA 0x00F5
   \              0x00F1 0x00EC
   \              0x00E8 0x00E4
   \              0x00DF       
   \   0000011E   0x00DB 0x00D7      DC16 219, 215, 212, 208, 204, 200, 197, 193, 190, 187, 184, 180, 177
   \              0x00D4 0x00D0
   \              0x00CC 0x00C8
   \              0x00C5 0x00C1
   \              0x00BE 0x00BB
   \              0x00B8 0x00B4
   \              0x00B1       
   \   00000138   0x00AE 0x00AB      DC16 174, 171, 168, 166, 163, 160, 157, 155, 152, 150, 147, 145, 143
   \              0x00A8 0x00A6
   \              0x00A3 0x00A0
   \              0x009D 0x009B
   \              0x0098 0x0096
   \              0x0093 0x0091
   \              0x008F       
   \   00000152   0x008C 0x008A      DC16 140, 138, 136, 134, 131, 129, 127, 125, 123, 121, 120
   \              0x0088 0x0086
   \              0x0083 0x0081
   \              0x007F 0x007D
   \              0x007B 0x0079
   \              0x0078       
     36          
     37          /***********************************************************************************
     38          *       Definições locais
     39          ***********************************************************************************/
     40          #define TAMANHO_BUFFER_ENTRADAS_ANALOGICAS              16
     41          
     42          /***********************************************************************************
     43          *       Definições para o cálculo da temperatura
     44          ***********************************************************************************/
     45          // Em 3/08/2015 alterada a curva para o novo termistor que foi
     46          // enviado pela addtherm
     47          #define BETA_25_GRAUS                                   3910//3961
     48          #define RT_NOVO                                         1001//1030
     49          #define RESISTOR_LIMITADOR                              500
     50          
     51          /***********************************************************************************
     52          *       Variaveis - locais
     53          ***********************************************************************************/

   \                                 In section .bss, align 4
     54          unsigned short int AA_bufferEntradasAnalogicas[TAMANHO_BUFFER_ENTRADAS_ANALOGICAS];
   \                     AA_bufferEntradasAnalogicas:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     55          unsigned short int AA_bufferSensorPapel[TAMANHO_BUFFER_ENTRADAS_ANALOGICAS];
   \                     AA_bufferSensorPapel:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
     56          unsigned short int AA_intertravador;
   \                     AA_intertravador:
   \   00000000                      DS8 2
     57          
     58          /***********************************************************************************
     59          *       Funções - locais
     60          ***********************************************************************************/
     61          void AA_amostragemAnalogica(void);
     62          unsigned short int AA_mediaMovel(void);
     63          
     64          /***********************************************************************************
     65          *       Implementação
     66          ***********************************************************************************/
     67          
     68          /***********************************************************************************
     69          *       Descrição       :       inicialização do módulo
     70          *       Parametros      :       nenhum
     71          *       Retorno         :       nenhum
     72          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     73          void AA_ini(void){   
     74            
     75            PCONP_bit.PCAD = 1;
   \                     AA_ini:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0x400fc0c4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000008   0x....             LDR.N    R1,??DataTable5  ;; 0x400fc0c4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     76            PCLKSEL0_bit.PCLK_ADC = 1;  
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable5_1  ;; 0x400fc1a8
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xF360 0x6119      BFI      R1,R0,#+24,#+2
   \   00000016   0x....             LDR.N    R0,??DataTable5_1  ;; 0x400fc1a8
   \   00000018   0x6001             STR      R1,[R0, #+0]
     77            
     78            PINSEL1_bit.P0_23 = 1;   
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable5_2  ;; 0x4002c004
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF360 0x318F      BFI      R1,R0,#+14,#+2
   \   00000024   0x....             LDR.N    R0,??DataTable5_2  ;; 0x4002c004
   \   00000026   0x6001             STR      R1,[R0, #+0]
     79            PINSEL1_bit.P0_24 = 1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable5_2  ;; 0x4002c004
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF360 0x4111      BFI      R1,R0,#+16,#+2
   \   00000032   0x....             LDR.N    R0,??DataTable5_2  ;; 0x4002c004
   \   00000034   0x6001             STR      R1,[R0, #+0]
     80              
     81            AD0CR_bit.SEL = 0;
   \   00000036   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40034000
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0A00             LSRS     R0,R0,#+8
   \   0000003C   0x0200             LSLS     R0,R0,#+8
   \   0000003E   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40034000
   \   00000040   0x6008             STR      R0,[R1, #+0]
     82            AD0CR_bit.CLKDIV = 10;
   \   00000042   0x200A             MOVS     R0,#+10
   \   00000044   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40034000
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0xF360 0x210F      BFI      R1,R0,#+8,#+8
   \   0000004C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40034000
   \   0000004E   0x6001             STR      R1,[R0, #+0]
     83            AD0CR_bit.BURST = 0;
   \   00000050   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40034000
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000058   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40034000
   \   0000005A   0x6008             STR      R0,[R1, #+0]
     84            AD0CR_bit.PDN = 1;
   \   0000005C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40034000
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000064   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40034000
   \   00000066   0x6008             STR      R0,[R1, #+0]
     85            
     86            AD0CR_bit.START = 1;     
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40034000
   \   0000006C   0x6809             LDR      R1,[R1, #+0]
   \   0000006E   0xF360 0x611A      BFI      R1,R0,#+24,#+3
   \   00000072   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40034000
   \   00000074   0x6001             STR      R1,[R0, #+0]
     87          }
   \   00000076   0x4770             BX       LR               ;; return
   \   00000078                      REQUIRE _A_PCONP
   \   00000078                      REQUIRE _A_PCLKSEL0
   \   00000078                      REQUIRE _A_PINSEL1
   \   00000078                      REQUIRE _A_AD0CR
     88          /***********************************************************************************
     89          *       Descrição       :       Tick de timer do módulo
     90          *       Parametros      :       nenhum
     91          *       Retorno         :       nenhum
     92          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          void ES_tickTimer(void){
   \                     ES_tickTimer:
   \   00000000   0xB580             PUSH     {R7,LR}
     94             
     95            AA_amostragemAnalogica();     // Amostragem das entradas analógicas
   \   00000002   0x.... 0x....      BL       AA_amostragemAnalogica
     96          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     97          /***********************************************************************************
     98          *       Descrição       :       Calcula a média das últimas amostras
     99          *                               do sistema
    100          *       Parametros      :       (unsigned char) canal
    101          *       Retorno         :       (unsigned short int) média móvel 
    102          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          unsigned short int AA_mediaMovel(void){
    104            unsigned int media=0;
   \                     AA_mediaMovel:
   \   00000000   0x2000             MOVS     R0,#+0
    105              
    106            for(unsigned char i=0;i<TAMANHO_BUFFER_ENTRADAS_ANALOGICAS;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE005             B.N      ??AA_mediaMovel_0
    107              media += AA_bufferEntradasAnalogicas[i];
   \                     ??AA_mediaMovel_1:
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x....             LDR.N    R2,??DataTable5_4
   \   0000000A   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   0000000E   0x1810             ADDS     R0,R2,R0
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \                     ??AA_mediaMovel_0:
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x2910             CMP      R1,#+16
   \   00000016   0xDBF6             BLT.N    ??AA_mediaMovel_1
    108            
    109            return (unsigned short int)media>>4;
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0x0900             LSRS     R0,R0,#+4
   \   0000001C   0x4770             BX       LR               ;; return
    110          }
    111          /***********************************************************************************
    112          *       Descrição       :       Faz a amostragem das entradas analógicas
    113          *       Parametros      :       nenhum
    114          *       Retorno         :       nenhum
    115          ***********************************************************************************/
    116          #pragma inline

   \                                 In section .text, align 4
    117          void AA_amostragemAnalogica(void){
    118            static unsigned char indice=0;
    119            static unsigned char timeOut=3;
    120            static unsigned int ultimaAmostra;
    121            static int derivada=0;
    122            unsigned int temp;
    123            static unsigned char canal=0;
    124            static unsigned char indicePapel=0;
    125               
    126            if(AD0GDR_bit.DONE){
   \                     AA_amostragemAnalogica:
   \   00000000   0x4846             LDR.N    R0,??AA_amostragemAnalogica_0  ;; 0x40034004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0FC0             LSRS     R0,R0,#+31
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD067             BEQ.N    ??AA_amostragemAnalogica_1
    127              canal = ~canal;
   \   0000000A   0x4845             LDR.N    R0,??AA_amostragemAnalogica_0+0x4
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x43C0             MVNS     R0,R0
   \   00000010   0x4943             LDR.N    R1,??AA_amostragemAnalogica_0+0x4
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    128              
    129              if(canal){
   \   00000014   0x4842             LDR.N    R0,??AA_amostragemAnalogica_0+0x4
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD03B             BEQ.N    ??AA_amostragemAnalogica_2
    130                temp = AD0GDR_bit.RESULT;       
   \   0000001C   0x483F             LDR.N    R0,??AA_amostragemAnalogica_0  ;; 0x40034004
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF3C0 0x100B      UBFX     R0,R0,#+4,#+12
    131                
    132                derivada = ultimaAmostra - temp;
   \   00000024   0x493F             LDR.N    R1,??AA_amostragemAnalogica_0+0x8
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x1A09             SUBS     R1,R1,R0
   \   0000002A   0x4A3F             LDR.N    R2,??AA_amostragemAnalogica_0+0xC
   \   0000002C   0x6011             STR      R1,[R2, #+0]
    133                if(derivada<0)
   \   0000002E   0x493E             LDR.N    R1,??AA_amostragemAnalogica_0+0xC
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD506             BPL.N    ??AA_amostragemAnalogica_3
    134                  derivada = derivada * -1;
   \   00000036   0x493C             LDR.N    R1,??AA_amostragemAnalogica_0+0xC
   \   00000038   0x6809             LDR      R1,[R1, #+0]
   \   0000003A   0xF05F 0x32FF      MOVS     R2,#-1
   \   0000003E   0x4351             MULS     R1,R2,R1
   \   00000040   0x4A39             LDR.N    R2,??AA_amostragemAnalogica_0+0xC
   \   00000042   0x6011             STR      R1,[R2, #+0]
    135                ultimaAmostra = temp;      
   \                     ??AA_amostragemAnalogica_3:
   \   00000044   0x4937             LDR.N    R1,??AA_amostragemAnalogica_0+0x8
   \   00000046   0x6008             STR      R0,[R1, #+0]
    136                
    137                if(derivada<500){
   \   00000048   0x4937             LDR.N    R1,??AA_amostragemAnalogica_0+0xC
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0xF5B1 0x7FFA      CMP      R1,#+500
   \   00000050   0xDA0E             BGE.N    ??AA_amostragemAnalogica_4
    138                  AA_bufferEntradasAnalogicas[indice]  = temp;
   \   00000052   0x4936             LDR.N    R1,??AA_amostragemAnalogica_0+0x10
   \   00000054   0x7809             LDRB     R1,[R1, #+0]
   \   00000056   0x4A36             LDR.N    R2,??AA_amostragemAnalogica_0+0x14
   \   00000058   0xF822 0x0011      STRH     R0,[R2, R1, LSL #+1]
    139                  indice = (indice+1) % TAMANHO_BUFFER_ENTRADAS_ANALOGICAS;        
   \   0000005C   0x4833             LDR.N    R0,??AA_amostragemAnalogica_0+0x10
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x2110             MOVS     R1,#+16
   \   00000064   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000068   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000006C   0x482F             LDR.N    R0,??AA_amostragemAnalogica_0+0x10
   \   0000006E   0x7002             STRB     R2,[R0, #+0]
    140                }
    141                
    142                timeOut = 3;    
   \                     ??AA_amostragemAnalogica_4:
   \   00000070   0x4830             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   00000072   0x2103             MOVS     R1,#+3
   \   00000074   0x7001             STRB     R1,[R0, #+0]
    143                AD0CR_bit.SEL = 2;
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0x492F             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0xF360 0x0107      BFI      R1,R0,#+0,#+8
   \   00000080   0x482D             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   00000082   0x6001             STR      R1,[R0, #+0]
    144                AD0CR_bit.START = 1;        
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x492C             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   00000088   0x6809             LDR      R1,[R1, #+0]
   \   0000008A   0xF360 0x611A      BFI      R1,R0,#+24,#+3
   \   0000008E   0x482A             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   00000090   0x6001             STR      R1,[R0, #+0]
   \   00000092   0xE022             B.N      ??AA_amostragemAnalogica_1
    145              }
    146              else{      
    147                
    148                AA_bufferSensorPapel[indicePapel] = AD0GDR_bit.RESULT;            
   \                     ??AA_amostragemAnalogica_2:
   \   00000094   0x4821             LDR.N    R0,??AA_amostragemAnalogica_0  ;; 0x40034004
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF3C0 0x100B      UBFX     R0,R0,#+4,#+12
   \   0000009C   0x4927             LDR.N    R1,??AA_amostragemAnalogica_0+0x20
   \   0000009E   0x7809             LDRB     R1,[R1, #+0]
   \   000000A0   0x4A27             LDR.N    R2,??AA_amostragemAnalogica_0+0x24
   \   000000A2   0xF822 0x0011      STRH     R0,[R2, R1, LSL #+1]
    149                indicePapel = (indicePapel+1)%TAMANHO_BUFFER_ENTRADAS_ANALOGICAS;      
   \   000000A6   0x4825             LDR.N    R0,??AA_amostragemAnalogica_0+0x20
   \   000000A8   0x7800             LDRB     R0,[R0, #+0]
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0x2110             MOVS     R1,#+16
   \   000000AE   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000B2   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000B6   0x4821             LDR.N    R0,??AA_amostragemAnalogica_0+0x20
   \   000000B8   0x7002             STRB     R2,[R0, #+0]
    150                
    151                timeOut = 3;    
   \   000000BA   0x481E             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   000000BC   0x2103             MOVS     R1,#+3
   \   000000BE   0x7001             STRB     R1,[R0, #+0]
    152                AD0CR_bit.SEL = 0;
   \   000000C0   0x481D             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x0A00             LSRS     R0,R0,#+8
   \   000000C6   0x0200             LSLS     R0,R0,#+8
   \   000000C8   0x491B             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    153                AD0CR_bit.START = 1;              
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x491A             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000D0   0x6809             LDR      R1,[R1, #+0]
   \   000000D2   0xF360 0x611A      BFI      R1,R0,#+24,#+3
   \   000000D6   0x4818             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000D8   0x6001             STR      R1,[R0, #+0]
    154              }
    155              
    156              
    157            }//Fim da amostragem
    158            
    159            if(timeOut){
   \                     ??AA_amostragemAnalogica_1:
   \   000000DA   0x4816             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD01B             BEQ.N    ??AA_amostragemAnalogica_5
    160              timeOut--;
   \   000000E2   0x4814             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0x1E40             SUBS     R0,R0,#+1
   \   000000E8   0x4912             LDR.N    R1,??AA_amostragemAnalogica_0+0x18
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    161              if(!timeOut){
   \   000000EC   0x4811             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD112             BNE.N    ??AA_amostragemAnalogica_5
    162                AD0CR_bit.SEL = 0;
   \   000000F4   0x4810             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x0A00             LSRS     R0,R0,#+8
   \   000000FA   0x0200             LSLS     R0,R0,#+8
   \   000000FC   0x490E             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    163                AD0CR_bit.START = 1;         
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0x490D             LDR.N    R1,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   00000104   0x6809             LDR      R1,[R1, #+0]
   \   00000106   0xF360 0x611A      BFI      R1,R0,#+24,#+3
   \   0000010A   0x480B             LDR.N    R0,??AA_amostragemAnalogica_0+0x1C  ;; 0x40034000
   \   0000010C   0x6001             STR      R1,[R0, #+0]
    164                timeOut=3;
   \   0000010E   0x4809             LDR.N    R0,??AA_amostragemAnalogica_0+0x18
   \   00000110   0x2103             MOVS     R1,#+3
   \   00000112   0x7001             STRB     R1,[R0, #+0]
    165                canal = 0;
   \   00000114   0x4802             LDR.N    R0,??AA_amostragemAnalogica_0+0x4
   \   00000116   0x2100             MOVS     R1,#+0
   \   00000118   0x7001             STRB     R1,[R0, #+0]
    166              }      
    167            }
    168          }
   \                     ??AA_amostragemAnalogica_5:
   \   0000011A   0x4770             BX       LR               ;; return
   \                     ??AA_amostragemAnalogica_0:
   \   0000011C   0x40034004         DC32     0x40034004
   \   00000120   0x........         DC32     _ZZ22AA_amostragemAnalogicaE5canal
   \   00000124   0x........         DC32     _ZZ22AA_amostragemAnalogicaE13ultimaAmostra
   \   00000128   0x........         DC32     _ZZ22AA_amostragemAnalogicaE8derivada
   \   0000012C   0x........         DC32     _ZZ22AA_amostragemAnalogicaE6indice
   \   00000130   0x........         DC32     AA_bufferEntradasAnalogicas
   \   00000134   0x........         DC32     _ZZ22AA_amostragemAnalogicaE7timeOut
   \   00000138   0x40034000         DC32     0x40034000
   \   0000013C   0x........         DC32     _ZZ22AA_amostragemAnalogicaE11indicePapel
   \   00000140   0x........         DC32     AA_bufferSensorPapel
   \   00000144                      REQUIRE _A_AD0GDR
   \   00000144                      REQUIRE _A_AD0CR

   \                                 In section .bss, align 1
   \                     _ZZ22AA_amostragemAnalogicaE6indice:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
   \                     _ZZ22AA_amostragemAnalogicaE7timeOut:
   \   00000000   0x03               DC8 3

   \                                 In section .bss, align 4
   \                     _ZZ22AA_amostragemAnalogicaE13ultimaAmostra:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     _ZZ22AA_amostragemAnalogicaE8derivada:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     _ZZ22AA_amostragemAnalogicaE5canal:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     _ZZ22AA_amostragemAnalogicaE11indicePapel:
   \   00000000                      DS8 1
    169          /***********************************************************************************
    170          *       Descrição       :       Calcula o valor da resistência do termistor
    171          *       Parametros      :       nenhum
    172          *       Retorno         :       (float) resistência do termistor
    173          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    174          float AA_calculaResistor(void){
   \                     AA_calculaResistor:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    175            float vx;  
    176            float resistor;
    177            
    178            vx = (AA_mediaMovel()*3.3/4096.0);  
   \   00000002   0x.... 0x....      BL       AA_mediaMovel
   \   00000006   0x.... 0x....      BL       __aeabi_ui2d
   \   0000000A   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   0000000E   0x....             LDR.N    R3,??DataTable5_5  ;; 0x400a6666
   \   00000010   0x.... 0x....      BL       __aeabi_dmul
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x....             LDR.N    R3,??DataTable5_6  ;; 0x40b00000
   \   00000018   0x.... 0x....      BL       __aeabi_ddiv
   \   0000001C   0x.... 0x....      BL       __aeabi_d2f
   \   00000020   0x0006             MOVS     R6,R0
    179            resistor = (RESISTOR_LIMITADOR*(3.3-vx))/vx;    
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0x.... 0x....      BL       __aeabi_f2d
   \   00000028   0x0002             MOVS     R2,R0
   \   0000002A   0x000B             MOVS     R3,R1
   \   0000002C   0xF05F 0x3066      MOVS     R0,#+1717986918
   \   00000030   0x....             LDR.N    R1,??DataTable5_5  ;; 0x400a6666
   \   00000032   0x.... 0x....      BL       __aeabi_dsub
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x....             LDR.N    R3,??DataTable5_7  ;; 0x407f4000
   \   0000003A   0x.... 0x....      BL       __aeabi_dmul
   \   0000003E   0x0004             MOVS     R4,R0
   \   00000040   0x000D             MOVS     R5,R1
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x.... 0x....      BL       __aeabi_f2d
   \   00000048   0x0002             MOVS     R2,R0
   \   0000004A   0x000B             MOVS     R3,R1
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x.... 0x....      BL       __aeabi_ddiv
   \   00000054   0x.... 0x....      BL       __aeabi_d2f
    180              
    181            return resistor;
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
    182          }
    183          /***********************************************************************************
    184          *       Descrição       :       Faz o calcula da resistência utilizando
    185          *                               apenas números de ponto fixo
    186          *       Parametros      :       nenhum
    187          *       Retorno         :       (unsigned short int) resistência medida
    188          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    189          unsigned short int AA_calculaResistorInteiro(void){
   \                     AA_calculaResistorInteiro:
   \   00000000   0xB580             PUSH     {R7,LR}
    190            unsigned int vmeas;
    191            unsigned int vx;
    192            unsigned int rx;
    193            unsigned int ix;
    194            
    195            vmeas = AA_mediaMovel();
   \   00000002   0x.... 0x....      BL       AA_mediaMovel
    196            
    197            vx = vmeas*806;
   \   00000006   0xF240 0x3126      MOVW     R1,#+806
   \   0000000A   0x4348             MULS     R0,R1,R0
    198            
    199            ix  = (3300000 - vx);   // em micro amperes
   \   0000000C   0x....             LDR.N    R1,??DataTable5_8  ;; 0x325aa0
   \   0000000E   0x1A09             SUBS     R1,R1,R0
    200            ix /= 499;
   \   00000010   0xF240 0x10F3      MOVW     R0,#+499
   \   00000014   0xFBB1 0xF1F0      UDIV     R1,R1,R0
    201            
    202            vx  = 3300000 - (2*ix*499);
   \   00000018   0x....             LDR.N    R0,??DataTable5_8  ;; 0x325aa0
   \   0000001A   0xF240 0x32E6      MOVW     R2,#+998
   \   0000001E   0xFB02 0x0011      MLS      R0,R2,R1,R0
    203            rx  = vx/ix;
   \   00000022   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    204            
    205            return rx;
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    206            
    207            /*
    208            vx*= 52800;
    209            vx>>=16;
    210            
    211            rx = (1650000-(vx*1000));
    212            rx/= vx;
    213            
    214            return rx;    
    215            */
    216          }
    217          /***********************************************************************************
    218          *       Descrição       :       Calcula a temperatura do sistema
    219          *       Parametros      :       nenhum
    220          *       Retorno         :       (float) temperatura medida
    221          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    222          unsigned short int AA_calculaTemperatura(void){
   \                     AA_calculaTemperatura:
   \   00000000   0xB580             PUSH     {R7,LR}
    223            unsigned short int resistor = AA_calculaResistorInteiro();
   \   00000002   0x.... 0x....      BL       AA_calculaResistorInteiro
    224              
    225            if(resistor>10000)
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0xF242 0x7111      MOVW     R1,#+10001
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xDB01             BLT.N    ??AA_calculaTemperatura_0
    226              return 25;
   \   00000010   0x2019             MOVS     R0,#+25
   \   00000012   0xE029             B.N      ??AA_calculaTemperatura_1
    227            
    228            for(unsigned short int i=0;i<TAMANHO_TABELA_TERMISTOR-1;i++){
   \                     ??AA_calculaTemperatura_0:
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE000             B.N      ??AA_calculaTemperatura_2
   \                     ??AA_calculaTemperatura_3:
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \                     ??AA_calculaTemperatura_2:
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x29B3             CMP      R1,#+179
   \   0000001E   0xDA21             BGE.N    ??AA_calculaTemperatura_4
    229              
    230              if(resistor<=TABTERM_curva_maximo[i] && resistor>TABTERM_curva_maximo[i+1] ||              
    231                 resistor<=TABTERM_curva_minimo[i] && resistor>TABTERM_curva_maximo[i+1] ) 
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x....             LDR.N    R2,??DataTable5_9
   \   00000024   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x4282             CMP      R2,R0
   \   0000002C   0xD307             BCC.N    ??AA_calculaTemperatura_5
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x....             LDR.N    R2,??DataTable5_9
   \   00000032   0xEB12 0x0241      ADDS     R2,R2,R1, LSL #+1
   \   00000036   0x8852             LDRH     R2,[R2, #+2]
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x4282             CMP      R2,R0
   \   0000003C   0xD30E             BCC.N    ??AA_calculaTemperatura_6
   \                     ??AA_calculaTemperatura_5:
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x....             LDR.N    R2,??DataTable5_10
   \   00000042   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0x4282             CMP      R2,R0
   \   0000004A   0xD3E5             BCC.N    ??AA_calculaTemperatura_3
   \   0000004C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004E   0x....             LDR.N    R2,??DataTable5_9
   \   00000050   0xEB12 0x0241      ADDS     R2,R2,R1, LSL #+1
   \   00000054   0x8852             LDRH     R2,[R2, #+2]
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0x4282             CMP      R2,R0
   \   0000005A   0xD2DD             BCS.N    ??AA_calculaTemperatura_3
    232                return 28+i;
   \                     ??AA_calculaTemperatura_6:
   \   0000005C   0xF111 0x001C      ADDS     R0,R1,#+28
   \   00000060   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000062   0xE001             B.N      ??AA_calculaTemperatura_1
    233            }       
    234            
    235            return 500;
   \                     ??AA_calculaTemperatura_4:
   \   00000064   0xF44F 0x70FA      MOV      R0,#+500
   \                     ??AA_calculaTemperatura_1:
   \   00000068   0xBD02             POP      {R1,PC}          ;; return
    236          }
    237          /***********************************************************************************
    238          *       Descrição       :       Calcula a temperatura utilizando números
    239          *                               inteiros
    240          *       Parametros      :       nenhum
    241          *       Retorno         :       (unsigned short int) temperatura lida do sensor
    242          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    243          unsigned short int AA_calculaTemperaturaInteira(void){  
   \                     AA_calculaTemperaturaInteira:
   \   00000000   0xB580             PUSH     {R7,LR}
    244             
    245            return (unsigned short int)AA_calculaTemperatura();
   \   00000002   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    246          }
    247          /***********************************************************************************
    248          *       Descrição       :       Verifica se o termistor está conectado
    249          *                               ao adc
    250          *       Parametros      :       nenhum
    251          *       Retorno         :       (unsigned char) maior do que zero se o 
    252          *                                               termistor estiver conectado
    253          *                                               ao adc
    254          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    255          unsigned char AA_verificaConexaoTermistor(void){
   \                     AA_verificaConexaoTermistor:
   \   00000000   0xB580             PUSH     {R7,LR}
    256            
    257            if(AA_mediaMovel()>10)
   \   00000002   0x.... 0x....      BL       AA_mediaMovel
   \   00000006   0x280B             CMP      R0,#+11
   \   00000008   0xDB01             BLT.N    ??AA_verificaConexaoTermistor_0
    258              return 255;
   \   0000000A   0x20FF             MOVS     R0,#+255
   \   0000000C   0xE000             B.N      ??AA_verificaConexaoTermistor_1
    259            
    260            return 0;  
   \                     ??AA_verificaConexaoTermistor_0:
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??AA_verificaConexaoTermistor_1:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    261          }
    262          /***********************************************************************************
    263          *       Descrição       :       Média da amostragem do papel
    264          *       Parametros      :       nenhum
    265          *       Retorno         :       (unsigned short int) média do papel
    266          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    267          unsigned short int AA_mediaMovelPapel(void){
    268            unsigned int media=0;
   \                     AA_mediaMovelPapel:
   \   00000000   0x2000             MOVS     R0,#+0
    269          
    270            for(unsigned short int i=0;i<TAMANHO_BUFFER_ENTRADAS_ANALOGICAS;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE005             B.N      ??AA_mediaMovelPapel_0
    271              media+= AA_bufferSensorPapel[i];
   \                     ??AA_mediaMovelPapel_1:
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x....             LDR.N    R2,??DataTable5_11
   \   0000000A   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   0000000E   0x1810             ADDS     R0,R2,R0
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \                     ??AA_mediaMovelPapel_0:
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x2910             CMP      R1,#+16
   \   00000016   0xDBF6             BLT.N    ??AA_mediaMovelPapel_1
    272            
    273            media>>=4;  
   \   00000018   0x0900             LSRS     R0,R0,#+4
    274            
    275            return media;  
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x4770             BX       LR               ;; return
    276          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4002C004         DC32     0x4002c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40034000         DC32     0x40034000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     AA_bufferEntradasAnalogicas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x400A6666         DC32     0x400a6666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40B00000         DC32     0x40b00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x407F4000         DC32     0x407f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x00325AA0         DC32     0x325aa0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     TABTERM_curva_maximo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     TABTERM_curva_minimo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     AA_bufferSensorPapel
    277          /***********************************************************************************
    278          *       Fim do arquivo
    279          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AA_amostragemAnalogica
      16   AA_calculaResistor
        16   -> AA_mediaMovel
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_dmul
        16   -> __aeabi_dsub
        16   -> __aeabi_f2d
        16   -> __aeabi_ui2d
       8   AA_calculaResistorInteiro
         8   -> AA_mediaMovel
       8   AA_calculaTemperatura
         8   -> AA_calculaResistorInteiro
       8   AA_calculaTemperaturaInteira
         8   -> AA_calculaTemperatura
       0   AA_ini
       0   AA_mediaMovel
       0   AA_mediaMovelPapel
       8   AA_verificaConexaoTermistor
         8   -> AA_mediaMovel
       8   ES_tickTimer
         8   -> AA_amostragemAnalogica


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     324  AA_amostragemAnalogica
      32  AA_bufferEntradasAnalogicas
      32  AA_bufferSensorPapel
      90  AA_calculaResistor
      42  AA_calculaResistorInteiro
     106  AA_calculaTemperatura
       8  AA_calculaTemperaturaInteira
     120  AA_ini
       2  AA_intertravador
      30  AA_mediaMovel
      30  AA_mediaMovelPapel
      18  AA_verificaConexaoTermistor
       8  ES_tickTimer
     360  TABTERM_curva_maximo
     360  TABTERM_curva_minimo
       4  _A_AD0CR
       4  _A_AD0GDR
       4  _A_PCLKSEL0
       4  _A_PCONP
       4  _A_PINSEL1
       1  canal
       4  derivada
       1  indice
       1  indicePapel
       1  timeOut
       4  ultimaAmostra

 
  77 bytes in section .bss
   1 byte  in section .data
  20 bytes in section .noinit (abs)
 720 bytes in section .rodata
 824 bytes in section .text
 
 500 bytes of CODE  memory (+ 324 bytes shared)
 720 bytes of CONST memory
  66 bytes of DATA  memory (+  32 bytes shared)

Errors: none
Warnings: none

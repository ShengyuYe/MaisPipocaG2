###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      06/Jul/2017  15:09:56 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Pagamentos\Supervisao_MDB.c       #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\Pagamentos\Supervisao_MDB.c -lC   #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\Supervisao_MDB.lst             #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\Supervisao_MDB.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\Pagamentos\Supervisao_MDB.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Supervisao_MDB.c
     18          |       Descrição          :  Biblioteca para controle dos meios de pagamento
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  28/02/2017
     22          |
     23          |       Revisões           :  1.0.0.0
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          
     29          /***********************************************************************************
     30          *       Includes
     31          ***********************************************************************************/
     32          #include <stdio.h>
     33          #include <stdlib.h>
     34          #include <string.h>
     35          #include "..\..\includes.h"
     36          #include "supervisao_mdb.h"
     37          #include "supervisao_mdb_bill.h"
     38          #include "supervisao_mdb_coin.h"
     39          #include "supervisao_mdb_cashless.h"
     40          /***********************************************************************************
     41          *       Definições
     42          ***********************************************************************************/
     43          
     44          
     45          /***********************************************************************************
     46          *       Variaveis locais
     47          ***********************************************************************************/

   \                                 In section .bss, align 4
     48          xSemaphoreHandle SMDB_semaforo_barramento;
   \                     SMDB_semaforo_barramento:
   \   00000000                      DS8 4
     49          
     50          /***********************************************************************************
     51          *       Funções locais
     52          ***********************************************************************************/
     53          
     54          
     55          /***********************************************************************************
     56          *       Implementação das funções
     57          ***********************************************************************************/
     58          
     59          /***********************************************************************************
     60          *       Descrição       :       Inicialização do módulo de supervisão
     61          *                               dos dispositivos MDB
     62          *       Parametros      :       nenhum
     63          *       Retorno         :       nenhum
     64          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void SMDB_ini(void){
   \                     SMDB_ini:
   \   00000000   0xB580             PUSH     {R7,LR}
     66            
     67            SMDBILL_set_bloqueio(0);  
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       SMDBILL_set_bloqueio
     68            SMC_ini();
   \   00000008   0x.... 0x....      BL       SMC_ini
     69            vSemaphoreCreateBinary(SMDB_semaforo_barramento);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       xQueueCreate
   \   00000014   0x....             LDR.N    R1,??DataTable3
   \   00000016   0x6008             STR      R0,[R1, #+0]
   \   00000018   0x....             LDR.N    R0,??DataTable3
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD006             BEQ.N    ??SMDB_ini_0
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x....             LDR.N    R0,??DataTable3
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x.... 0x....      BL       xQueueGenericSend
     70          }
   \                     ??SMDB_ini_0:
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     71          /***********************************************************************************
     72          *       Descrição       :       Ponto de entrada da máquina de estados 
     73          *                               que faz a supervisão dos dispositivos MDB
     74          *       Parametros      :       nenhum
     75          *       Retorno         :       nenhum
     76          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     77          void SMDB_tick(void){
   \                     SMDB_tick:
   \   00000000   0xB580             PUSH     {R7,LR}
     78            //unsigned char bill;  
     79            
     80            while(!xSemaphoreTake(SMDB_semaforo_barramento,portTICK_RATE_MS*1));     
   \                     ??SMDB_tick_0:
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       xQueueGenericReceive
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD0F6             BEQ.N    ??SMDB_tick_0
     81             
     82            vTaskDelay(5);  
   \   00000014   0x2005             MOVS     R0,#+5
   \   00000016   0x.... 0x....      BL       vTaskDelay
     83            SMDBILL_tick(); // dentro do módulo ele verifica o bloqueio e habilitação do periférico
   \   0000001A   0x.... 0x....      BL       SMDBILL_tick
     84            SMDBCOIN_tick(); // 
   \   0000001E   0x.... 0x....      BL       SMDBCOIN_tick
     85            SMC_tick(); // Dentro do módulo ele verifica o bloqueio e habilitação do cartão
   \   00000022   0x.... 0x....      BL       SMC_tick
     86             
     87            xSemaphoreGive(SMDB_semaforo_barramento); 
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable3
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       xQueueGenericSend
     88          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
     89          /***********************************************************************************
     90          *       Descrição       :       Wait para o barramento MDB
     91          *       Parametros      :       nenhum
     92          *       Retorno         :       nenhum
     93          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     94          void SMDB_wait(void){
   \                     SMDB_wait:
   \   00000000   0xB580             PUSH     {R7,LR}
     95            
     96            while(!xSemaphoreTake(SMDB_semaforo_barramento,portTICK_RATE_MS*1));    
   \                     ??SMDB_wait_0:
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       xQueueGenericReceive
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD0F6             BEQ.N    ??SMDB_wait_0
     97          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
     98          /***********************************************************************************
     99          *       Descrição       :       Release para o barramento
    100          *       Parametros      :       nenhum
    101          *       Retorno         :       nenhum
    102          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          void SMDB_release(void){
   \                     SMDB_release:
   \   00000000   0xB580             PUSH     {R7,LR}
    104            
    105            xSemaphoreGive(SMDB_semaforo_barramento); 
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R0,??DataTable3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       xQueueGenericSend
    106          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    107          /***********************************************************************************
    108          *       Descrição       :       Inicia uma venda
    109          *       Parametros      :       nenhum
    110          *       Retorno         :       (unsigned char) maior do que zero
    111          *                                               se a venda for iniciada
    112          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    113          unsigned char SMDB_cashless_vend(unsigned short int valor,
    114                                           unsigned short int item){
   \                     SMDB_cashless_vend:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    115             unsigned char tentativas=10;
   \   00000006   0x260A             MOVS     R6,#+10
    116             unsigned char res=0;
   \   00000008   0x2700             MOVS     R7,#+0
    117             eCASHLESS_VEND_RESULT venda;
    118             unsigned short int pago;
    119             
    120             eMDB_reply flag;
    121                                             
    122             SMDB_wait();
   \   0000000A   0x.... 0x....      BL       SMDB_wait
    123             
    124             do flag = MDBCASHLESS_start_vend(&venda,&pago,valor,item);
   \                     ??SMDB_cashless_vend_0:
   \   0000000E   0x002B             MOVS     R3,R5
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0x0022             MOVS     R2,R4
   \   00000014   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000001C   0x.... 0x....      BL       MDBCASHLESS_start_vend
    125             while(flag!=MDB_OK && tentativas--);
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD004             BEQ.N    ??SMDB_cashless_vend_1
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0x1E4E             SUBS     R6,R1,#+1
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x2900             CMP      R1,#+0
   \   0000002E   0xD1EE             BNE.N    ??SMDB_cashless_vend_0
    126             
    127             if(flag==MDB_OK)
   \                     ??SMDB_cashless_vend_1:
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD100             BNE.N    ??SMDB_cashless_vend_2
    128               res = 1;   
   \   00000036   0x2701             MOVS     R7,#+1
    129             
    130             SMDB_release();      
   \                     ??SMDB_cashless_vend_2:
   \   00000038   0x.... 0x....      BL       SMDB_release
    131             
    132             return res;
   \   0000003C   0x0038             MOVS     R0,R7
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    133          }
    134          /***********************************************************************************
    135          *       Descrição       :       Envia o comando que faz o cancelamento
    136          *                               da venda
    137          *       Parametros      :       nenhum
    138          *       Retorno         :       (unsigned char) maior do que zero
    139          *                               se a venda foi cancelada
    140          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          unsigned char SMDB_cancela_venda(void){
   \                     SMDB_cancela_venda:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    142             unsigned char tentativas=10;
   \   00000002   0x240A             MOVS     R4,#+10
    143             unsigned char res=0;
   \   00000004   0x2500             MOVS     R5,#+0
    144             
    145             eMDB_reply flag;
    146                                             
    147             SMDB_wait();
   \   00000006   0x.... 0x....      BL       SMDB_wait
    148             
    149             do flag = MDBCASHLESS_vend_cancel();
   \                     ??SMDB_cancela_venda_0:
   \   0000000A   0x.... 0x....      BL       MDBCASHLESS_vend_cancel
    150             while(flag!=MDB_OK && tentativas--);
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD004             BEQ.N    ??SMDB_cancela_venda_1
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x1E4C             SUBS     R4,R1,#+1
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1F5             BNE.N    ??SMDB_cancela_venda_0
    151             
    152             if(flag==MDB_OK)
   \                     ??SMDB_cancela_venda_1:
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD100             BNE.N    ??SMDB_cancela_venda_2
    153               res = 1;   
   \   00000024   0x2501             MOVS     R5,#+1
    154             
    155             SMDB_release();      
   \                     ??SMDB_cancela_venda_2:
   \   00000026   0x.... 0x....      BL       SMDB_release
    156             
    157             return res;  
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    158          }
    159          /***********************************************************************************
    160          *       Descrição       :       Envia o comando de sucesso na venda
    161          *       Parametros      :       nenhum
    162          *       Retorno         :       (unsigned char) maior do que zero se conseguir
    163          *                               enviar o comando para a placa
    164          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    165          unsigned char  SMDB_vend_success(unsigned short int item){
   \                     SMDB_vend_success:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    166             unsigned char tentativas=10;
   \   00000004   0x250A             MOVS     R5,#+10
    167             unsigned char res=0;
   \   00000006   0x2600             MOVS     R6,#+0
    168             
    169             eMDB_reply flag;
    170                                             
    171             SMDB_wait();
   \   00000008   0x.... 0x....      BL       SMDB_wait
    172             
    173             do flag = MDBCASHLESS_vend_success(item);
   \                     ??SMDB_vend_success_0:
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x.... 0x....      BL       MDBCASHLESS_vend_success
    174             while(flag!=MDB_OK && tentativas--);
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD004             BEQ.N    ??SMDB_vend_success_1
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0x1E4D             SUBS     R5,R1,#+1
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD1F3             BNE.N    ??SMDB_vend_success_0
    175             
    176             if(flag==MDB_OK)
   \                     ??SMDB_vend_success_1:
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD100             BNE.N    ??SMDB_vend_success_2
    177               res = 1;   
   \   0000002A   0x2601             MOVS     R6,#+1
    178             
    179             SMDB_release();      
   \                     ??SMDB_vend_success_2:
   \   0000002C   0x.... 0x....      BL       SMDB_release
    180             
    181             return res;  
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    182          }
    183          /***********************************************************************************
    184          *       Descrição       :       Faz uma venda no cartão
    185          *       Parametros      :       (unsigned int) valor
    186          *       Retorno         :       (unsigned char) maior do que zero se conseguir
    187          *                                               realizar a venda
    188          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    189          unsigned char SMDB_venda_cartao(unsigned short int preco){
   \                     SMDB_venda_cartao:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    190            eMDB_reply flag;
    191            unsigned char tentativas;
    192            unsigned short int pago;
    193            eCASHLESS_VEND_RESULT venda;  
    194            unsigned short int timeout=15000;
   \   00000006   0xF643 0x2698      MOVW     R6,#+15000
    195            
    196            SMDB_wait();
   \   0000000A   0x.... 0x....      BL       SMDB_wait
    197            
    198            tentativas = 5;
   \   0000000E   0x2505             MOVS     R5,#+5
    199            do flag = MDBCASHLESS_start_vend(&venda,&pago,preco,1);
   \                     ??SMDB_venda_cartao_0:
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x0022             MOVS     R2,R4
   \   00000014   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000016   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001A   0xF10D 0x0001      ADD      R0,SP,#+1
   \   0000001E   0x.... 0x....      BL       MDBCASHLESS_start_vend
    200            while(flag!=MDB_OK && tentativas--);
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD004             BEQ.N    ??SMDB_venda_cartao_1
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x1E4D             SUBS     R5,R1,#+1
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD1EE             BNE.N    ??SMDB_venda_cartao_0
    201            
    202            if(flag!=MDB_OK || venda==VEND_DENIED){
   \                     ??SMDB_venda_cartao_1:
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD103             BNE.N    ??SMDB_venda_cartao_2
   \   00000038   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000003C   0x2806             CMP      R0,#+6
   \   0000003E   0xD103             BNE.N    ??SMDB_venda_cartao_3
    203              SMDB_release();     
   \                     ??SMDB_venda_cartao_2:
   \   00000040   0x.... 0x....      BL       SMDB_release
    204              return 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE030             B.N      ??SMDB_venda_cartao_4
    205            }
   \                     ??SMDB_venda_cartao_3:
   \   00000048   0xE002             B.N      ??SMDB_venda_cartao_5
    206            
    207            eMDB_POLL_HEADER header;
    208            
    209            for(;--timeout;){
    210              
    211              tentativas = 10;
    212              
    213              do flag = CASHLESS_poll_device(&header,NULL);
    214              while(flag!=MDB_OK && --tentativas);
    215                
    216              if(flag!=MDB_OK){
    217                SMDB_release();     
    218                return 0;      
    219              }else{
    220                if(header==CASHLESS_POOL_VEND_APPROVED){
    221                  SMDB_release(); 
    222                  return SMDB_vend_success(1);
    223                }
    224              }
    225                
    226              vTaskDelay(1);
   \                     ??SMDB_venda_cartao_6:
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       vTaskDelay
   \                     ??SMDB_venda_cartao_5:
   \   00000050   0x1E76             SUBS     R6,R6,#+1
   \   00000052   0x0030             MOVS     R0,R6
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD01D             BEQ.N    ??SMDB_venda_cartao_7
   \   0000005A   0x250A             MOVS     R5,#+10
   \                     ??SMDB_venda_cartao_8:
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0xA800             ADD      R0,SP,#+0
   \   00000060   0x.... 0x....      BL       CASHLESS_poll_device
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD004             BEQ.N    ??SMDB_venda_cartao_9
   \   0000006A   0x1E6D             SUBS     R5,R5,#+1
   \   0000006C   0x0029             MOVS     R1,R5
   \   0000006E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000070   0x2900             CMP      R1,#+0
   \   00000072   0xD1F3             BNE.N    ??SMDB_venda_cartao_8
   \                     ??SMDB_venda_cartao_9:
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD003             BEQ.N    ??SMDB_venda_cartao_10
   \   0000007A   0x.... 0x....      BL       SMDB_release
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE013             B.N      ??SMDB_venda_cartao_4
   \                     ??SMDB_venda_cartao_10:
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0x2805             CMP      R0,#+5
   \   00000088   0xD1DF             BNE.N    ??SMDB_venda_cartao_6
   \   0000008A   0x.... 0x....      BL       SMDB_release
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0x.... 0x....      BL       SMDB_vend_success
   \   00000094   0xE009             B.N      ??SMDB_venda_cartao_4
    227            }
    228            
    229            if(!timeout){
   \                     ??SMDB_venda_cartao_7:
   \   00000096   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000098   0x2E00             CMP      R6,#+0
   \   0000009A   0xD103             BNE.N    ??SMDB_venda_cartao_11
    230              SMDB_release();       
   \   0000009C   0x.... 0x....      BL       SMDB_release
    231              return 0;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE002             B.N      ??SMDB_venda_cartao_4
    232            }      
    233            
    234            SMDB_release();       
   \                     ??SMDB_venda_cartao_11:
   \   000000A4   0x.... 0x....      BL       SMDB_release
    235            return 0;
   \   000000A8   0x2000             MOVS     R0,#+0
   \                     ??SMDB_venda_cartao_4:
   \   000000AA   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    236          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     SMDB_semaforo_barramento
    237          /***********************************************************************************
    238          *       Fim do arquivo
    239          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SMDB_cancela_venda
        16   -> MDBCASHLESS_vend_cancel
        16   -> SMDB_release
        16   -> SMDB_wait
      24   SMDB_cashless_vend
        24   -> MDBCASHLESS_start_vend
        24   -> SMDB_release
        24   -> SMDB_wait
       8   SMDB_ini
         8   -> SMC_ini
         8   -> SMDBILL_set_bloqueio
         8   -> xQueueCreate
         8   -> xQueueGenericSend
       8   SMDB_release
         8   -> xQueueGenericSend
       8   SMDB_tick
         8   -> SMC_tick
         8   -> SMDBCOIN_tick
         8   -> SMDBILL_tick
         8   -> vTaskDelay
         8   -> xQueueGenericReceive
         8   -> xQueueGenericSend
      16   SMDB_vend_success
        16   -> MDBCASHLESS_vend_success
        16   -> SMDB_release
        16   -> SMDB_wait
      24   SMDB_venda_cartao
        24   -> CASHLESS_poll_device
        24   -> MDBCASHLESS_start_vend
        24   -> SMDB_release
        24   -> SMDB_vend_success
        24   -> SMDB_wait
        24   -> vTaskDelay
       8   SMDB_wait
         8   -> xQueueGenericReceive


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      48  SMDB_cancela_venda
      66  SMDB_cashless_vend
      48  SMDB_ini
      18  SMDB_release
       4  SMDB_semaforo_barramento
      54  SMDB_tick
      54  SMDB_vend_success
     172  SMDB_venda_cartao
      22  SMDB_wait

 
   4 bytes in section .bss
 486 bytes in section .text
 
 486 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      07/Jul/2017  17:07:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabol #
#                    a_g2\FIRMWARE\app\Protocolo\dxt_file_system.c            #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabol #
#                    a_g2\FIRMWARE\app\Protocolo\dxt_file_system.c -lC        #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\dxt_file_system.lst            #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\dxt_file_system.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabola_g2\FIRMWARE\app\Protocolo\dxt_file_system.c
      1          /*__________________________________________________________________________________
      2          |	Dextro Soluções Tecnológicas
      3          |       
      4          |       Itajaí - SC
      5          |       www.dextro-st.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Dextro  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Dextro 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Dextro  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Dextro  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  dxt_file_sustem.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  07/07/2017
     21          |
     22          |       Revisões           :  001
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>
     34          #include "dxt_file_system.h"
     35          #include "dxt_file_target.h"
     36          
     37          /***********************************************************************************
     38          *       Definições locais
     39          ***********************************************************************************/
     40          #define TAM_BLOCO_DESCRITOR_ARQUIVO                     36
     41          
     42          /***********************************************************************************
     43          *       Constantes locais
     44          ***********************************************************************************/
     45          
     46          
     47          /***********************************************************************************
     48          *       Variaveis locais
     49          ***********************************************************************************/

   \                                 In section .bss, align 4
     50          eDXF_file_descritor DXF_handler_arquivo_aberto=NULL;
   \                     DXF_handler_arquivo_aberto:
   \   00000000                      DS8 40

   \                                 In section .bss, align 1
     51          unsigned char DXF_arquivo_aberto=0;
   \                     DXF_arquivo_aberto:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     52          unsigned char DXF_indice_arquivo;
   \                     DXF_indice_arquivo:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     53          unsigned int DXF_ponteiro_escrita_arquivo=0;
   \                     DXF_ponteiro_escrita_arquivo:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     54          unsigned int DXF_ponteiro_leitura_arquivo= 0;
   \                     DXF_ponteiro_leitura_arquivo:
   \   00000000                      DS8 4
     55          /***********************************************************************************
     56          *       Funções locais
     57          ***********************************************************************************/
     58          void DXF_serializa(eDXF_file_descritor *descritor,unsigned char *pData);
     59          
     60          void DXF_deserealiza(eDXF_file_descritor *descritor,unsigned char *pData);
     61          
     62          void DXT_grava(unsigned char indice_arquivo,eDXF_file_descritor *descritor);
     63          
     64          unsigned char DXT_calcula_checksum(unsigned int endereco_inicial,
     65                                             unsigned int tamanho);
     66          
     67          unsigned char DXT_carrega(unsigned char indice_arquivo,eDXF_file_descritor *descritor);
     68          
     69          unsigned char DXT_checksum_check(eDXF_file_descritor *descritor);
     70          
     71          void DXT_file_checksum_generate(unsigned char arquivo,eDXF_file_descritor *descritor);
     72          
     73          /***********************************************************************************
     74          *       Implementação das funções
     75          ***********************************************************************************/
     76          
     77          /***********************************************************************************
     78          *       Descrição       :       Inicialização do módulo
     79          *       Parametros      :       nenhum
     80          *       Retorno         :       nenhum
     81          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          void DXF_ini(void){
     83            
     84            
     85          }
   \                     DXF_ini:
   \   00000000   0x4770             BX       LR               ;; return
     86          /***********************************************************************************
     87          *       Descrição       :       Serializa o arquivo para um buffer de bytes
     88          *       Parametros      :       (eDXF_file_descritor*) descritor do arquivo
     89          *                               (unsigned char*) ponteiro para o vetor
     90          *       Retorno         :       nenhum
     91          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     92          void DXF_serializa(eDXF_file_descritor *descritor,unsigned char *pData){
   \                     DXF_serializa:
   \   00000000   0xB410             PUSH     {R4}
     93            
     94            pData[0] = descritor->estado_bloco>>24;
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0x0E12             LSRS     R2,R2,#+24
   \   00000006   0x700A             STRB     R2,[R1, #+0]
     95            pData[1] = descritor->estado_bloco>>16;
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x0C12             LSRS     R2,R2,#+16
   \   0000000C   0x704A             STRB     R2,[R1, #+1]
     96            pData[2] = descritor->estado_bloco>>8;
   \   0000000E   0x6802             LDR      R2,[R0, #+0]
   \   00000010   0x0A12             LSRS     R2,R2,#+8
   \   00000012   0x708A             STRB     R2,[R1, #+2]
     97            pData[3] = descritor->estado_bloco;
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x70CA             STRB     R2,[R1, #+3]
     98            
     99            for(unsigned char i=0;i<16;i++)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xE008             B.N      ??DXF_serializa_0
    100              pData[4+i] = descritor->nome_arquivo[i+i];
   \                     ??DXF_serializa_1:
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x1893             ADDS     R3,R2,R2
   \   00000022   0x181B             ADDS     R3,R3,R0
   \   00000024   0x791B             LDRB     R3,[R3, #+4]
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x1854             ADDS     R4,R2,R1
   \   0000002A   0x7123             STRB     R3,[R4, #+4]
   \   0000002C   0x1C52             ADDS     R2,R2,#+1
   \                     ??DXF_serializa_0:
   \   0000002E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000030   0x2A10             CMP      R2,#+16
   \   00000032   0xDBF3             BLT.N    ??DXF_serializa_1
    101            
    102            pData[20] = descritor->extensao[0];
   \   00000034   0x7D02             LDRB     R2,[R0, #+20]
   \   00000036   0x750A             STRB     R2,[R1, #+20]
    103            pData[21] = descritor->extensao[1];
   \   00000038   0x7D42             LDRB     R2,[R0, #+21]
   \   0000003A   0x754A             STRB     R2,[R1, #+21]
    104            pData[22] = descritor->extensao[2];
   \   0000003C   0x7D82             LDRB     R2,[R0, #+22]
   \   0000003E   0x758A             STRB     R2,[R1, #+22]
    105            
    106            pData[23] = descritor->inicio_memoria>>24;
   \   00000040   0x6982             LDR      R2,[R0, #+24]
   \   00000042   0x0E12             LSRS     R2,R2,#+24
   \   00000044   0x75CA             STRB     R2,[R1, #+23]
    107            pData[24] = descritor->inicio_memoria>>16;
   \   00000046   0x6982             LDR      R2,[R0, #+24]
   \   00000048   0x0C12             LSRS     R2,R2,#+16
   \   0000004A   0x760A             STRB     R2,[R1, #+24]
    108            pData[25] = descritor->inicio_memoria>>8;
   \   0000004C   0x6982             LDR      R2,[R0, #+24]
   \   0000004E   0x0A12             LSRS     R2,R2,#+8
   \   00000050   0x764A             STRB     R2,[R1, #+25]
    109            pData[26] = descritor->inicio_memoria;
   \   00000052   0x6982             LDR      R2,[R0, #+24]
   \   00000054   0x768A             STRB     R2,[R1, #+26]
    110            
    111            pData[27] = descritor->tamanho_bloco>>24;
   \   00000056   0x69C2             LDR      R2,[R0, #+28]
   \   00000058   0x0E12             LSRS     R2,R2,#+24
   \   0000005A   0x76CA             STRB     R2,[R1, #+27]
    112            pData[28] = descritor->tamanho_bloco>>16;
   \   0000005C   0x69C2             LDR      R2,[R0, #+28]
   \   0000005E   0x0C12             LSRS     R2,R2,#+16
   \   00000060   0x770A             STRB     R2,[R1, #+28]
    113            pData[29] = descritor->tamanho_bloco>>8;
   \   00000062   0x69C2             LDR      R2,[R0, #+28]
   \   00000064   0x0A12             LSRS     R2,R2,#+8
   \   00000066   0x774A             STRB     R2,[R1, #+29]
    114            pData[30] = descritor->tamanho_bloco;
   \   00000068   0x69C2             LDR      R2,[R0, #+28]
   \   0000006A   0x778A             STRB     R2,[R1, #+30]
    115            
    116            pData[31] = descritor->time_stamp>>24;
   \   0000006C   0x6A02             LDR      R2,[R0, #+32]
   \   0000006E   0x0E12             LSRS     R2,R2,#+24
   \   00000070   0x77CA             STRB     R2,[R1, #+31]
    117            pData[32] = descritor->time_stamp>>16;
   \   00000072   0x6A02             LDR      R2,[R0, #+32]
   \   00000074   0x0C12             LSRS     R2,R2,#+16
   \   00000076   0xF881 0x2020      STRB     R2,[R1, #+32]
    118            pData[33] = descritor->time_stamp>>8;
   \   0000007A   0x6A02             LDR      R2,[R0, #+32]
   \   0000007C   0x0A12             LSRS     R2,R2,#+8
   \   0000007E   0xF881 0x2021      STRB     R2,[R1, #+33]
    119            pData[34] = descritor->time_stamp;
   \   00000082   0x6A02             LDR      R2,[R0, #+32]
   \   00000084   0xF881 0x2022      STRB     R2,[R1, #+34]
    120            
    121            pData[35] = descritor->checksum;  
   \   00000088   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \   0000008C   0xF881 0x0023      STRB     R0,[R1, #+35]
    122          }
   \   00000090   0xBC10             POP      {R4}
   \   00000092   0x4770             BX       LR               ;; return
    123          /***********************************************************************************
    124          *       Descrição       :       Deserealizao os dados contidos em um vetor
    125          *                               de bytes para um descritor de arquivo
    126          *       Parametros      :       (eDXF_file_descritor*) descritor
    127          *                               (unsigned char*) buffer
    128          *       Retorno         :       nenhum
    129          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          void DXF_deserealiza(eDXF_file_descritor *descritor,unsigned char *pData){
   \                     DXF_deserealiza:
   \   00000000   0xB410             PUSH     {R4}
    131            
    132            descritor->estado_bloco  = pData[0]<<24;
   \   00000002   0x780A             LDRB     R2,[R1, #+0]
   \   00000004   0x0612             LSLS     R2,R2,#+24
   \   00000006   0x6002             STR      R2,[R0, #+0]
    133            descritor->estado_bloco |= pData[1]<<16;
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x784B             LDRB     R3,[R1, #+1]
   \   0000000C   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   00000010   0x6002             STR      R2,[R0, #+0]
    134            descritor->estado_bloco |= pData[2]<<8;
   \   00000012   0x6802             LDR      R2,[R0, #+0]
   \   00000014   0x788B             LDRB     R3,[R1, #+2]
   \   00000016   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   0000001A   0x6002             STR      R2,[R0, #+0]
    135            descritor->estado_bloco |= pData[3];
   \   0000001C   0x6802             LDR      R2,[R0, #+0]
   \   0000001E   0x78CB             LDRB     R3,[R1, #+3]
   \   00000020   0x431A             ORRS     R2,R3,R2
   \   00000022   0x6002             STR      R2,[R0, #+0]
    136            
    137            for(unsigned char i=0;i<16;i++)
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0xE008             B.N      ??DXF_deserealiza_0
    138              pData[4+i] = descritor->nome_arquivo[i+i];
   \                     ??DXF_deserealiza_1:
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002C   0x1893             ADDS     R3,R2,R2
   \   0000002E   0x181B             ADDS     R3,R3,R0
   \   00000030   0x791B             LDRB     R3,[R3, #+4]
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x1854             ADDS     R4,R2,R1
   \   00000036   0x7123             STRB     R3,[R4, #+4]
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \                     ??DXF_deserealiza_0:
   \   0000003A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   0x2A10             CMP      R2,#+16
   \   0000003E   0xDBF3             BLT.N    ??DXF_deserealiza_1
    139            
    140            descritor->extensao[0] = pData[20];
   \   00000040   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000042   0x7502             STRB     R2,[R0, #+20]
    141            descritor->extensao[1] = pData[21];
   \   00000044   0x7D4A             LDRB     R2,[R1, #+21]
   \   00000046   0x7542             STRB     R2,[R0, #+21]
    142            descritor->extensao[2] = pData[22];
   \   00000048   0x7D8A             LDRB     R2,[R1, #+22]
   \   0000004A   0x7582             STRB     R2,[R0, #+22]
    143            
    144            descritor->inicio_memoria  = pData[23]<<24;
   \   0000004C   0x7DCA             LDRB     R2,[R1, #+23]
   \   0000004E   0x0612             LSLS     R2,R2,#+24
   \   00000050   0x6182             STR      R2,[R0, #+24]
    145            descritor->inicio_memoria |= pData[24]<<16;
   \   00000052   0x6982             LDR      R2,[R0, #+24]
   \   00000054   0x7E0B             LDRB     R3,[R1, #+24]
   \   00000056   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   0000005A   0x6182             STR      R2,[R0, #+24]
    146            descritor->inicio_memoria |= pData[25]<<8;
   \   0000005C   0x6982             LDR      R2,[R0, #+24]
   \   0000005E   0x7E4B             LDRB     R3,[R1, #+25]
   \   00000060   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   00000064   0x6182             STR      R2,[R0, #+24]
    147            descritor->inicio_memoria |= pData[26];
   \   00000066   0x6982             LDR      R2,[R0, #+24]
   \   00000068   0x7E8B             LDRB     R3,[R1, #+26]
   \   0000006A   0x431A             ORRS     R2,R3,R2
   \   0000006C   0x6182             STR      R2,[R0, #+24]
    148            
    149            descritor->tamanho_bloco  = pData[27]<<24;
   \   0000006E   0x7ECA             LDRB     R2,[R1, #+27]
   \   00000070   0x0612             LSLS     R2,R2,#+24
   \   00000072   0x61C2             STR      R2,[R0, #+28]
    150            descritor->tamanho_bloco |= pData[28]<<16;
   \   00000074   0x69C2             LDR      R2,[R0, #+28]
   \   00000076   0x7F0B             LDRB     R3,[R1, #+28]
   \   00000078   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   0000007C   0x61C2             STR      R2,[R0, #+28]
    151            descritor->tamanho_bloco |= pData[29]<<8;
   \   0000007E   0x69C2             LDR      R2,[R0, #+28]
   \   00000080   0x7F4B             LDRB     R3,[R1, #+29]
   \   00000082   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   00000086   0x61C2             STR      R2,[R0, #+28]
    152            descritor->tamanho_bloco |= pData[30];
   \   00000088   0x69C2             LDR      R2,[R0, #+28]
   \   0000008A   0x7F8B             LDRB     R3,[R1, #+30]
   \   0000008C   0x431A             ORRS     R2,R3,R2
   \   0000008E   0x61C2             STR      R2,[R0, #+28]
    153            
    154            descritor->time_stamp  = pData[31];
   \   00000090   0x7FCA             LDRB     R2,[R1, #+31]
   \   00000092   0x6202             STR      R2,[R0, #+32]
    155            descritor->time_stamp |= pData[32];
   \   00000094   0x6A02             LDR      R2,[R0, #+32]
   \   00000096   0xF891 0x3020      LDRB     R3,[R1, #+32]
   \   0000009A   0x431A             ORRS     R2,R3,R2
   \   0000009C   0x6202             STR      R2,[R0, #+32]
    156            descritor->time_stamp |= pData[33];
   \   0000009E   0x6A02             LDR      R2,[R0, #+32]
   \   000000A0   0xF891 0x3021      LDRB     R3,[R1, #+33]
   \   000000A4   0x431A             ORRS     R2,R3,R2
   \   000000A6   0x6202             STR      R2,[R0, #+32]
    157            descritor->time_stamp |= pData[34]; 
   \   000000A8   0x6A02             LDR      R2,[R0, #+32]
   \   000000AA   0xF891 0x3022      LDRB     R3,[R1, #+34]
   \   000000AE   0x431A             ORRS     R2,R3,R2
   \   000000B0   0x6202             STR      R2,[R0, #+32]
    158            
    159            descritor->checksum   = pData[35];
   \   000000B2   0xF891 0x1023      LDRB     R1,[R1, #+35]
   \   000000B6   0xF880 0x1024      STRB     R1,[R0, #+36]
    160          }
   \   000000BA   0xBC10             POP      {R4}
   \   000000BC   0x4770             BX       LR               ;; return
    161          /***********************************************************************************
    162          *       Descrição       :       Persiste o descritor na tabela de arquivos
    163          *                               do sistema
    164          *       Parametros      :       (unsigned char) indice do arquivo
    165          *                               (eDXF_file_descritor*) descritor do arquivo
    166          *       Retorno         :       (unsigned char) nenhum
    167          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    168          void DXT_grava(unsigned char indice_arquivo,eDXF_file_descritor *descritor){
   \                     DXT_grava:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0008             MOVS     R0,R1
    169            unsigned char buffer[36];
    170          
    171            DXF_serializa(descritor,buffer);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x.... 0x....      BL       DXF_serializa
    172            DXF_write_block(DXT_FILE_SYSTEM_INICIO_TABELA + (TAM_BLOCO_DESCRITOR_ARQUIVO*indice_arquivo),  
    173                            TAM_BLOCO_DESCRITOR_ARQUIVO,
    174                            buffer);                  
   \   0000000E   0xAA00             ADD      R2,SP,#+0
   \   00000010   0x2124             MOVS     R1,#+36
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2024             MOVS     R0,#+36
   \   00000016   0x....             LDR.N    R3,??DataTable5  ;; 0x77777
   \   00000018   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   0000001C   0x.... 0x....      BL       DXF_write_block
    175          }
   \   00000020   0xB00A             ADD      SP,SP,#+40
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    176          /***********************************************************************************
    177          *       Descrição       :       Carrega o descritor a partir da tabela de 
    178          *                               arquivos do sistema
    179          *       Parametros      :       (unsigned char) indice do arquivo
    180          *                               (eDXF_file_descritor*) descritor do arquivo
    181          *       Retorno         :       (unsigned char) maior do que zero se o 
    182          *                               arquivo estiver com o checksum correto
    183          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    184          unsigned char DXT_carrega(unsigned char indice_arquivo,eDXF_file_descritor *descritor){
   \                     DXT_carrega:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000C             MOVS     R4,R1
    185            unsigned char buffer[36];
    186          
    187            DXF_read_block(DXT_FILE_SYSTEM_INICIO_TABELA + (TAM_BLOCO_DESCRITOR_ARQUIVO*indice_arquivo),  
    188                           TAM_BLOCO_DESCRITOR_ARQUIVO,
    189                           buffer);       
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0x2124             MOVS     R1,#+36
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2324             MOVS     R3,#+36
   \   0000000E   0x....             LDR.N    R5,??DataTable5  ;; 0x77777
   \   00000010   0xFB03 0x5000      MLA      R0,R3,R0,R5
   \   00000014   0x.... 0x....      BL       DXF_read_block
    190            DXF_deserealiza(descritor,buffer);    
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       DXF_deserealiza
    191            //teria uma consistência auqi, mas não vai ter mais...
    192            return 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xB009             ADD      SP,SP,#+36
   \   00000024   0xBD30             POP      {R4,R5,PC}       ;; return
    193          }
    194          /***********************************************************************************
    195          *       Descrição       :       Calcula o checksum de um arquivo persistido
    196          *                               na flash
    197          *       Parametros      :       (unsigned int) endereço inicial
    198          *                               (unsigned int) tamanho
    199          *       Retorno         :       (unsigned char) checksum
    200          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    201          unsigned char DXT_calcula_checksum(unsigned int endereco_inicial,
    202                                             unsigned int tamanho){
   \                     DXT_calcula_checksum:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x0004             MOVS     R4,R0
    203            unsigned char soma=0;                                     
   \   00000008   0x2500             MOVS     R5,#+0
    204            unsigned char buffer[36];
    205            unsigned int loop=tamanho/36;
   \   0000000A   0x2024             MOVS     R0,#+36
   \   0000000C   0xFBB1 0xF6F0      UDIV     R6,R1,R0
    206            unsigned int resto = tamanho%36;
   \   00000010   0x2024             MOVS     R0,#+36
   \   00000012   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000016   0xFB00 0x1712      MLS      R7,R0,R2,R1
    207            
    208            for(unsigned int i=0;i<loop;i++){
   \   0000001A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000001E   0xE009             B.N      ??DXT_calcula_checksum_0
    209              DXF_read_block(endereco_inicial,36,buffer);
    210              for(unsigned char j=0;j<36;j++)
    211                soma+= buffer[j];
   \                     ??DXT_calcula_checksum_1:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x5C41             LDRB     R1,[R0, R1]
   \   00000026   0x194D             ADDS     R5,R1,R5
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??DXT_calcula_checksum_2:
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2824             CMP      R0,#+36
   \   0000002E   0xDBF7             BLT.N    ??DXT_calcula_checksum_1
   \   00000030   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??DXT_calcula_checksum_0:
   \   00000034   0x45B0             CMP      R8,R6
   \   00000036   0xD206             BCS.N    ??DXT_calcula_checksum_3
   \   00000038   0xAA00             ADD      R2,SP,#+0
   \   0000003A   0x2124             MOVS     R1,#+36
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       DXF_read_block
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE7F1             B.N      ??DXT_calcula_checksum_2
    212            }
    213            
    214            for(unsigned int i=0;i<resto;i++){
   \                     ??DXT_calcula_checksum_3:
   \   00000046   0x2600             MOVS     R6,#+0
   \   00000048   0xE008             B.N      ??DXT_calcula_checksum_4
    215              DXF_read_block(endereco_inicial,resto,buffer);
    216              for(unsigned char j=0;j<resto;j++)
    217                soma+= buffer[j];    
   \                     ??DXT_calcula_checksum_5:
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0x5C41             LDRB     R1,[R0, R1]
   \   00000050   0x194D             ADDS     R5,R1,R5
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \                     ??DXT_calcula_checksum_6:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x42B8             CMP      R0,R7
   \   00000058   0xD3F7             BCC.N    ??DXT_calcula_checksum_5
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \                     ??DXT_calcula_checksum_4:
   \   0000005C   0x42BE             CMP      R6,R7
   \   0000005E   0xD206             BCS.N    ??DXT_calcula_checksum_7
   \   00000060   0xAA00             ADD      R2,SP,#+0
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       DXF_read_block
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE7F2             B.N      ??DXT_calcula_checksum_6
    218            }
    219            
    220            return soma;                                    
   \                     ??DXT_calcula_checksum_7:
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0xB00A             ADD      SP,SP,#+40
   \   00000074   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    221          }
    222          /***********************************************************************************
    223          *       Descrição       :       Verifica se o checksum do bloco de dados
    224          *                               é o mesmo do 
    225          *       Parametros      :       (eDXF_file_descritor*) descritor
    226          *       Retorno         :       nenhum
    227          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          unsigned char DXT_checksum_check(eDXF_file_descritor *descritor){
   \                     DXT_checksum_check:
   \   00000000   0xB510             PUSH     {R4,LR}
    229            
    230            if(descritor->checksum == DXT_calcula_checksum(descritor->inicio_memoria,descritor->tamanho_bloco))
   \   00000002   0xF890 0x4024      LDRB     R4,[R0, #+36]
   \   00000006   0x69C1             LDR      R1,[R0, #+28]
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x.... 0x....      BL       DXT_calcula_checksum
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD101             BNE.N    ??DXT_checksum_check_0
    231              return 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B.N      ??DXT_checksum_check_1
    232            
    233            return 0;
   \                     ??DXT_checksum_check_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??DXT_checksum_check_1:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    234          }
    235          /***********************************************************************************
    236          *       Decrição        :       Preenche o check de um determinado arquivo
    237          *                               na tabela
    238          *       Parametros      :       (unsigned char) arquivo
    239          *       Retorno         :       nenhum
    240          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    241          void DXT_file_checksum_generate(unsigned char arquivo,eDXF_file_descritor *descritor){
   \                     DXT_file_checksum_generate:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    242            
    243            descritor->checksum = DXT_calcula_checksum(descritor->inicio_memoria,descritor->tamanho_bloco);
   \   00000006   0x69E9             LDR      R1,[R5, #+28]
   \   00000008   0x69A8             LDR      R0,[R5, #+24]
   \   0000000A   0x.... 0x....      BL       DXT_calcula_checksum
   \   0000000E   0xF885 0x0024      STRB     R0,[R5, #+36]
    244            DXT_grava(arquivo,descritor);
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       DXT_grava
    245          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    246          /***********************************************************************************
    247          *       Descrição       :       Abre o arquivo para escrita
    248          *       Parametros      :       (unsigned char) arquivo
    249          *       Retorno         :       nenhum
    250          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    251          eDXF_file_descritor *DXT_open_file(unsigned char arquivo){
   \                     DXT_open_file:
   \   00000000   0xB580             PUSH     {R7,LR}
    252            
    253            DXF_arquivo_aberto = 0xFF;
   \   00000002   0x....             LDR.N    R1,??DataTable5_1
   \   00000004   0x22FF             MOVS     R2,#+255
   \   00000006   0x700A             STRB     R2,[R1, #+0]
    254            
    255            DXF_ponteiro_escrita_arquivo=0;
   \   00000008   0x....             LDR.N    R1,??DataTable5_2
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    256            DXF_ponteiro_leitura_arquivo=0;
   \   0000000E   0x....             LDR.N    R1,??DataTable5_3
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x600A             STR      R2,[R1, #+0]
    257          
    258            DXF_indice_arquivo = arquivo;
   \   00000014   0x....             LDR.N    R1,??DataTable5_4
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    259            DXT_carrega(arquivo,&DXF_handler_arquivo_aberto);  
   \   00000018   0x....             LDR.N    R1,??DataTable5_5
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       DXT_carrega
    260            
    261            return (eDXF_file_descritor*)(&DXF_handler_arquivo_aberto);
   \   00000020   0x....             LDR.N    R0,??DataTable5_5
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
    262          }
    263          /***********************************************************************************
    264          *       Descrição       :       Getter para o descritor de arquivo da bilioteca
    265          *       Parametros      :       nenhum
    266          *       Retorno         :       (eDXF_file_descritor*) descritor do arquivo
    267          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    268          void DXF_close_file(void){
    269           
    270            DXF_arquivo_aberto = 0;
   \                     DXF_close_file:
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    271          }
   \   00000006   0x4770             BX       LR               ;; return
    272          /***********************************************************************************
    273          *       Descrição       :     Escreve um bloco de dados no arquivo
    274          *       Parametros      :     (eDXF_file_descritor*) descritor
    275          *                             (unsigned char*) ponteiro para os dados
    276          *                       :     (unsigned short int) tamanho do bloco
    277          *       Retorno         :     (unsigned short int) bytes escritos
    278          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    279          unsigned short int DXF_write(eDXF_file_descritor *descritor,unsigned char *pData,
    280                                       unsigned short int tamanho){
   \                     DXF_write:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0014             MOVS     R4,R2
    281            unsigned short int escritos=0;                                                   
   \   00000004   0x2500             MOVS     R5,#+0
    282            
    283            if( (descritor->inicio_memoria+descritor->tamanho_bloco) <= (descritor->inicio_memoria+tamanho)){
   \   00000006   0x6982             LDR      R2,[R0, #+24]
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x18A2             ADDS     R2,R4,R2
   \   0000000C   0x6983             LDR      R3,[R0, #+24]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
   \   00000010   0x18F3             ADDS     R3,R6,R3
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xD310             BCC.N    ??DXF_write_0
    284              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_escrita_arquivo,tamanho,pData);
   \   00000016   0x000A             MOVS     R2,R1
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x6980             LDR      R0,[R0, #+24]
   \   0000001E   0x....             LDR.N    R3,??DataTable5_2
   \   00000020   0x681B             LDR      R3,[R3, #+0]
   \   00000022   0x1818             ADDS     R0,R3,R0
   \   00000024   0x.... 0x....      BL       DXF_write_block
    285              escritos = tamanho;
   \   00000028   0x0025             MOVS     R5,R4
    286              // Ajusta o ponteiro de escrita com os bytes escritos
    287              DXF_ponteiro_escrita_arquivo+=escritos;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000030   0x1828             ADDS     R0,R5,R0
   \   00000032   0x....             LDR.N    R1,??DataTable5_2
   \   00000034   0x6008             STR      R0,[R1, #+0]
   \   00000036   0xE014             B.N      ??DXF_write_1
    288            }
    289            else{
    290              escritos = (descritor->inicio_memoria+tamanho) - (descritor->inicio_memoria+descritor->tamanho_bloco);
   \                     ??DXF_write_0:
   \   00000038   0x6982             LDR      R2,[R0, #+24]
   \   0000003A   0x18A2             ADDS     R2,R4,R2
   \   0000003C   0x6983             LDR      R3,[R0, #+24]
   \   0000003E   0x1AD2             SUBS     R2,R2,R3
   \   00000040   0x69C3             LDR      R3,[R0, #+28]
   \   00000042   0x1AD5             SUBS     R5,R2,R3
    291              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_escrita_arquivo,DXF_ponteiro_escrita_arquivo,pData);
   \   00000044   0x000A             MOVS     R2,R1
   \   00000046   0x....             LDR.N    R1,??DataTable5_2
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6980             LDR      R0,[R0, #+24]
   \   0000004C   0x....             LDR.N    R3,??DataTable5_2
   \   0000004E   0x681B             LDR      R3,[R3, #+0]
   \   00000050   0x1818             ADDS     R0,R3,R0
   \   00000052   0x.... 0x....      BL       DXF_write_block
    292              // Ajusta o ponteiro de escrita com os bytes que foram efetivamente escritos
    293              DXF_ponteiro_escrita_arquivo+=escritos;
   \   00000056   0x....             LDR.N    R0,??DataTable5_2
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0x1828             ADDS     R0,R5,R0
   \   0000005E   0x....             LDR.N    R1,??DataTable5_2
   \   00000060   0x6008             STR      R0,[R1, #+0]
    294            }
    295                                            
    296            return escritos;
   \                     ??DXF_write_1:
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
    297          }
    298          /***********************************************************************************
    299          *       Descrição       :       Lê um bloco de dados a partir do bloco
    300          *                               do arquivo
    301          *       Parametros      :       (eDXF_file_descritor*) descritor
    302          *                               (unsigned short int)tamamnho do bloco
    303          *                               (unsigned short int*) lidos
    304          *       Retorno         :       nenhum
    305          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    306          void DXF_read(eDXF_file_descritor *descritor,unsigned short int tamanho,unsigned char *pData,
    307                        unsigned short int *lidos){
   \                     DXF_read:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x001D             MOVS     R5,R3
    308            *lidos = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x8029             STRH     R1,[R5, #+0]
    309            
    310            if( (descritor->inicio_memoria+descritor->tamanho_bloco) <= (descritor->inicio_memoria+tamanho)){
   \   0000000A   0x6981             LDR      R1,[R0, #+24]
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x1861             ADDS     R1,R4,R1
   \   00000010   0x6983             LDR      R3,[R0, #+24]
   \   00000012   0x69C6             LDR      R6,[R0, #+28]
   \   00000014   0x18F3             ADDS     R3,R6,R3
   \   00000016   0x4299             CMP      R1,R3
   \   00000018   0xD30E             BCC.N    ??DXF_read_0
    311              DXF_read_block(descritor->inicio_memoria+DXF_ponteiro_leitura_arquivo,tamanho,pData);
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0x6980             LDR      R0,[R0, #+24]
   \   00000020   0x....             LDR.N    R3,??DataTable5_3
   \   00000022   0x681B             LDR      R3,[R3, #+0]
   \   00000024   0x1818             ADDS     R0,R3,R0
   \   00000026   0x.... 0x....      BL       DXF_read_block
    312              // Ajusta o ponteiro da leitura com o tamanho do bloco lido
    313              DXF_ponteiro_leitura_arquivo+=tamanho;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_3
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000030   0x1820             ADDS     R0,R4,R0
   \   00000032   0x....             LDR.N    R1,??DataTable5_3
   \   00000034   0x6008             STR      R0,[R1, #+0]
   \   00000036   0xE013             B.N      ??DXF_read_1
    314            }
    315            else{
    316              *lidos = (descritor->inicio_memoria+tamanho) - (descritor->inicio_memoria+descritor->tamanho_bloco);
   \                     ??DXF_read_0:
   \   00000038   0x6981             LDR      R1,[R0, #+24]
   \   0000003A   0x1861             ADDS     R1,R4,R1
   \   0000003C   0x6983             LDR      R3,[R0, #+24]
   \   0000003E   0x1AC9             SUBS     R1,R1,R3
   \   00000040   0x69C3             LDR      R3,[R0, #+28]
   \   00000042   0x1AC9             SUBS     R1,R1,R3
   \   00000044   0x8029             STRH     R1,[R5, #+0]
    317              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_leitura_arquivo,*lidos,pData);
   \   00000046   0x8829             LDRH     R1,[R5, #+0]
   \   00000048   0x6980             LDR      R0,[R0, #+24]
   \   0000004A   0x....             LDR.N    R3,??DataTable5_3
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0x1818             ADDS     R0,R3,R0
   \   00000050   0x.... 0x....      BL       DXF_write_block
    318              // Ajusta o ponteiro de escrita com os bytes que foram efetivamente escritos
    319              DXF_ponteiro_leitura_arquivo+= *lidos;        
   \   00000054   0x....             LDR.N    R0,??DataTable5_3
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x8829             LDRH     R1,[R5, #+0]
   \   0000005A   0x1808             ADDS     R0,R1,R0
   \   0000005C   0x....             LDR.N    R1,??DataTable5_3
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    320            }
    321          }
   \                     ??DXF_read_1:
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00077777         DC32     0x77777

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     DXF_arquivo_aberto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     DXF_ponteiro_escrita_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     DXF_ponteiro_leitura_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     DXF_indice_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     DXF_handler_arquivo_aberto
    322          /***********************************************************************************
    323          *       Fim do arquivo
    324          ***********************************************************************************/
    325          
    326            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DXF_close_file
       4   DXF_deserealiza
       0   DXF_ini
      16   DXF_read
        16   -> DXF_read_block
        16   -> DXF_write_block
       4   DXF_serializa
      16   DXF_write
        16   -> DXF_write_block
      64   DXT_calcula_checksum
        64   -> DXF_read_block
      48   DXT_carrega
        48   -> DXF_deserealiza
        48   -> DXF_read_block
       8   DXT_checksum_check
         8   -> DXT_calcula_checksum
      16   DXT_file_checksum_generate
        16   -> DXT_calcula_checksum
        16   -> DXT_grava
      48   DXT_grava
        48   -> DXF_serializa
        48   -> DXF_write_block
       8   DXT_open_file
         8   -> DXT_carrega


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       1  DXF_arquivo_aberto
       8  DXF_close_file
     190  DXF_deserealiza
      40  DXF_handler_arquivo_aberto
       1  DXF_indice_arquivo
       2  DXF_ini
       4  DXF_ponteiro_escrita_arquivo
       4  DXF_ponteiro_leitura_arquivo
      98  DXF_read
     148  DXF_serializa
     104  DXF_write
     120  DXT_calcula_checksum
      38  DXT_carrega
      26  DXT_checksum_check
      30  DXT_file_checksum_generate
      36  DXT_grava
      36  DXT_open_file

 
  50 bytes in section .bss
 860 bytes in section .text
 
 860 bytes of CODE memory
  50 bytes of DATA memory

Errors: none
Warnings: none

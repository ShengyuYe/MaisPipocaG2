###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      10/Jul/2017  15:20:25 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabol #
#                    a_g2\FIRMWARE\app\Protocolo\dxt_file_system.c            #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabol #
#                    a_g2\FIRMWARE\app\Protocolo\dxt_file_system.c -lC        #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\dxt_file_system.lst            #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\dxt_file_system.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\pegabola_g2\FIRMWARE\app\Protocolo\dxt_file_system.c
      1          /*__________________________________________________________________________________
      2          |	Dextro Soluções Tecnológicas
      3          |       
      4          |       Itajaí - SC
      5          |       www.dextro-st.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Dextro  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Dextro 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Dextro  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Dextro  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  dxt_file_sustem.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  07/07/2017
     21          |
     22          |       Revisões           :  001
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>
     34          #include "dxt_file_system.h"
     35          #include "dxt_file_target.h"
     36          
     37          /***********************************************************************************
     38          *       Definições locais
     39          ***********************************************************************************/
     40          #define TAM_BLOCO_DESCRITOR_ARQUIVO                     36
     41          
     42          /***********************************************************************************
     43          *       Constantes locais
     44          ***********************************************************************************/
     45          
     46          
     47          /***********************************************************************************
     48          *       Variaveis locais
     49          ***********************************************************************************/

   \                                 In section .bss, align 4
     50          eDXF_file_descritor DXF_handler_arquivo_aberto=NULL;
   \                     DXF_handler_arquivo_aberto:
   \   00000000                      DS8 40

   \                                 In section .bss, align 1
     51          unsigned char DXF_arquivo_aberto=0;
   \                     DXF_arquivo_aberto:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     52          unsigned char DXF_indice_arquivo;
   \                     DXF_indice_arquivo:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     53          unsigned int DXF_ponteiro_escrita_arquivo=0;
   \                     DXF_ponteiro_escrita_arquivo:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     54          unsigned int DXF_ponteiro_leitura_arquivo=0;
   \                     DXF_ponteiro_leitura_arquivo:
   \   00000000                      DS8 4
     55          
     56          /***********************************************************************************
     57          *       Funções locais
     58          ***********************************************************************************/
     59          void DXF_serializa(eDXF_file_descritor *descritor,unsigned char *pData);
     60          
     61          void DXF_deserealiza(eDXF_file_descritor *descritor,unsigned char *pData);
     62          
     63          void DXT_grava(unsigned char indice_arquivo,eDXF_file_descritor *descritor);
     64          
     65          unsigned char DXT_calcula_checksum(unsigned int endereco_inicial,
     66                                             unsigned int tamanho);
     67          
     68          unsigned char DXT_carrega(unsigned char indice_arquivo,eDXF_file_descritor *descritor);
     69          
     70          unsigned char DXT_checksum_check(eDXF_file_descritor *descritor);
     71          
     72          void DXT_file_checksum_generate(unsigned char arquivo,eDXF_file_descritor *descritor);
     73          
     74          /***********************************************************************************
     75          *       Implementação das funções
     76          ***********************************************************************************/
     77          
     78          /***********************************************************************************
     79          *       Descrição       :       Inicialização do módulo
     80          *       Parametros      :       nenhum
     81          *       Retorno         :       nenhum
     82          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     83          void DXF_ini(void){
     84            
     85            
     86          }
   \                     DXF_ini:
   \   00000000   0x4770             BX       LR               ;; return
     87          /***********************************************************************************
     88          *       Descrição       :       Serializa o arquivo para um buffer de bytes
     89          *       Parametros      :       (eDXF_file_descritor*) descritor do arquivo
     90          *                               (unsigned char*) ponteiro para o vetor
     91          *       Retorno         :       nenhum
     92          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          void DXF_serializa(eDXF_file_descritor *descritor,unsigned char *pData){
   \                     DXF_serializa:
   \   00000000   0xB410             PUSH     {R4}
     94            
     95            pData[0] = descritor->estado_bloco>>24;
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0x0E12             LSRS     R2,R2,#+24
   \   00000006   0x700A             STRB     R2,[R1, #+0]
     96            pData[1] = descritor->estado_bloco>>16;
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x0C12             LSRS     R2,R2,#+16
   \   0000000C   0x704A             STRB     R2,[R1, #+1]
     97            pData[2] = descritor->estado_bloco>>8;
   \   0000000E   0x6802             LDR      R2,[R0, #+0]
   \   00000010   0x0A12             LSRS     R2,R2,#+8
   \   00000012   0x708A             STRB     R2,[R1, #+2]
     98            pData[3] = descritor->estado_bloco;
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x70CA             STRB     R2,[R1, #+3]
     99            
    100            for(unsigned char i=0;i<16;i++)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xE008             B.N      ??DXF_serializa_0
    101              pData[4+i] = descritor->nome_arquivo[i+i];
   \                     ??DXF_serializa_1:
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x1893             ADDS     R3,R2,R2
   \   00000022   0x181B             ADDS     R3,R3,R0
   \   00000024   0x791B             LDRB     R3,[R3, #+4]
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x1854             ADDS     R4,R2,R1
   \   0000002A   0x7123             STRB     R3,[R4, #+4]
   \   0000002C   0x1C52             ADDS     R2,R2,#+1
   \                     ??DXF_serializa_0:
   \   0000002E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000030   0x2A10             CMP      R2,#+16
   \   00000032   0xDBF3             BLT.N    ??DXF_serializa_1
    102            
    103            pData[20] = descritor->extensao[0];
   \   00000034   0x7D02             LDRB     R2,[R0, #+20]
   \   00000036   0x750A             STRB     R2,[R1, #+20]
    104            pData[21] = descritor->extensao[1];
   \   00000038   0x7D42             LDRB     R2,[R0, #+21]
   \   0000003A   0x754A             STRB     R2,[R1, #+21]
    105            pData[22] = descritor->extensao[2];
   \   0000003C   0x7D82             LDRB     R2,[R0, #+22]
   \   0000003E   0x758A             STRB     R2,[R1, #+22]
    106            
    107            pData[23] = descritor->inicio_memoria>>24;
   \   00000040   0x6982             LDR      R2,[R0, #+24]
   \   00000042   0x0E12             LSRS     R2,R2,#+24
   \   00000044   0x75CA             STRB     R2,[R1, #+23]
    108            pData[24] = descritor->inicio_memoria>>16;
   \   00000046   0x6982             LDR      R2,[R0, #+24]
   \   00000048   0x0C12             LSRS     R2,R2,#+16
   \   0000004A   0x760A             STRB     R2,[R1, #+24]
    109            pData[25] = descritor->inicio_memoria>>8;
   \   0000004C   0x6982             LDR      R2,[R0, #+24]
   \   0000004E   0x0A12             LSRS     R2,R2,#+8
   \   00000050   0x764A             STRB     R2,[R1, #+25]
    110            pData[26] = descritor->inicio_memoria;
   \   00000052   0x6982             LDR      R2,[R0, #+24]
   \   00000054   0x768A             STRB     R2,[R1, #+26]
    111            
    112            pData[27] = descritor->tamanho_bloco>>24;
   \   00000056   0x69C2             LDR      R2,[R0, #+28]
   \   00000058   0x0E12             LSRS     R2,R2,#+24
   \   0000005A   0x76CA             STRB     R2,[R1, #+27]
    113            pData[28] = descritor->tamanho_bloco>>16;
   \   0000005C   0x69C2             LDR      R2,[R0, #+28]
   \   0000005E   0x0C12             LSRS     R2,R2,#+16
   \   00000060   0x770A             STRB     R2,[R1, #+28]
    114            pData[29] = descritor->tamanho_bloco>>8;
   \   00000062   0x69C2             LDR      R2,[R0, #+28]
   \   00000064   0x0A12             LSRS     R2,R2,#+8
   \   00000066   0x774A             STRB     R2,[R1, #+29]
    115            pData[30] = descritor->tamanho_bloco;
   \   00000068   0x69C2             LDR      R2,[R0, #+28]
   \   0000006A   0x778A             STRB     R2,[R1, #+30]
    116            
    117            pData[31] = descritor->time_stamp>>24;
   \   0000006C   0x6A02             LDR      R2,[R0, #+32]
   \   0000006E   0x0E12             LSRS     R2,R2,#+24
   \   00000070   0x77CA             STRB     R2,[R1, #+31]
    118            pData[32] = descritor->time_stamp>>16;
   \   00000072   0x6A02             LDR      R2,[R0, #+32]
   \   00000074   0x0C12             LSRS     R2,R2,#+16
   \   00000076   0xF881 0x2020      STRB     R2,[R1, #+32]
    119            pData[33] = descritor->time_stamp>>8;
   \   0000007A   0x6A02             LDR      R2,[R0, #+32]
   \   0000007C   0x0A12             LSRS     R2,R2,#+8
   \   0000007E   0xF881 0x2021      STRB     R2,[R1, #+33]
    120            pData[34] = descritor->time_stamp;
   \   00000082   0x6A02             LDR      R2,[R0, #+32]
   \   00000084   0xF881 0x2022      STRB     R2,[R1, #+34]
    121            
    122            pData[35] = descritor->checksum;  
   \   00000088   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \   0000008C   0xF881 0x0023      STRB     R0,[R1, #+35]
    123          }
   \   00000090   0xBC10             POP      {R4}
   \   00000092   0x4770             BX       LR               ;; return
    124          /***********************************************************************************
    125          *       Descrição       :       Deserealizao os dados contidos em um vetor
    126          *                               de bytes para um descritor de arquivo
    127          *       Parametros      :       (eDXF_file_descritor*) descritor
    128          *                               (unsigned char*) buffer
    129          *       Retorno         :       nenhum
    130          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          void DXF_deserealiza(eDXF_file_descritor *descritor,unsigned char *pData){
   \                     DXF_deserealiza:
   \   00000000   0xB410             PUSH     {R4}
    132            
    133            descritor->estado_bloco  = pData[0]<<24;
   \   00000002   0x780A             LDRB     R2,[R1, #+0]
   \   00000004   0x0612             LSLS     R2,R2,#+24
   \   00000006   0x6002             STR      R2,[R0, #+0]
    134            descritor->estado_bloco |= pData[1]<<16;
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x784B             LDRB     R3,[R1, #+1]
   \   0000000C   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   00000010   0x6002             STR      R2,[R0, #+0]
    135            descritor->estado_bloco |= pData[2]<<8;
   \   00000012   0x6802             LDR      R2,[R0, #+0]
   \   00000014   0x788B             LDRB     R3,[R1, #+2]
   \   00000016   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   0000001A   0x6002             STR      R2,[R0, #+0]
    136            descritor->estado_bloco |= pData[3];
   \   0000001C   0x6802             LDR      R2,[R0, #+0]
   \   0000001E   0x78CB             LDRB     R3,[R1, #+3]
   \   00000020   0x431A             ORRS     R2,R3,R2
   \   00000022   0x6002             STR      R2,[R0, #+0]
    137            
    138            for(unsigned char i=0;i<16;i++)
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0xE008             B.N      ??DXF_deserealiza_0
    139              pData[4+i] = descritor->nome_arquivo[i+i];
   \                     ??DXF_deserealiza_1:
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002C   0x1893             ADDS     R3,R2,R2
   \   0000002E   0x181B             ADDS     R3,R3,R0
   \   00000030   0x791B             LDRB     R3,[R3, #+4]
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x1854             ADDS     R4,R2,R1
   \   00000036   0x7123             STRB     R3,[R4, #+4]
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \                     ??DXF_deserealiza_0:
   \   0000003A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   0x2A10             CMP      R2,#+16
   \   0000003E   0xDBF3             BLT.N    ??DXF_deserealiza_1
    140            
    141            descritor->extensao[0] = pData[20];
   \   00000040   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000042   0x7502             STRB     R2,[R0, #+20]
    142            descritor->extensao[1] = pData[21];
   \   00000044   0x7D4A             LDRB     R2,[R1, #+21]
   \   00000046   0x7542             STRB     R2,[R0, #+21]
    143            descritor->extensao[2] = pData[22];
   \   00000048   0x7D8A             LDRB     R2,[R1, #+22]
   \   0000004A   0x7582             STRB     R2,[R0, #+22]
    144            
    145            descritor->inicio_memoria  = pData[23]<<24;
   \   0000004C   0x7DCA             LDRB     R2,[R1, #+23]
   \   0000004E   0x0612             LSLS     R2,R2,#+24
   \   00000050   0x6182             STR      R2,[R0, #+24]
    146            descritor->inicio_memoria |= pData[24]<<16;
   \   00000052   0x6982             LDR      R2,[R0, #+24]
   \   00000054   0x7E0B             LDRB     R3,[R1, #+24]
   \   00000056   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   0000005A   0x6182             STR      R2,[R0, #+24]
    147            descritor->inicio_memoria |= pData[25]<<8;
   \   0000005C   0x6982             LDR      R2,[R0, #+24]
   \   0000005E   0x7E4B             LDRB     R3,[R1, #+25]
   \   00000060   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   00000064   0x6182             STR      R2,[R0, #+24]
    148            descritor->inicio_memoria |= pData[26];
   \   00000066   0x6982             LDR      R2,[R0, #+24]
   \   00000068   0x7E8B             LDRB     R3,[R1, #+26]
   \   0000006A   0x431A             ORRS     R2,R3,R2
   \   0000006C   0x6182             STR      R2,[R0, #+24]
    149            
    150            descritor->tamanho_bloco  = pData[27]<<24;
   \   0000006E   0x7ECA             LDRB     R2,[R1, #+27]
   \   00000070   0x0612             LSLS     R2,R2,#+24
   \   00000072   0x61C2             STR      R2,[R0, #+28]
    151            descritor->tamanho_bloco |= pData[28]<<16;
   \   00000074   0x69C2             LDR      R2,[R0, #+28]
   \   00000076   0x7F0B             LDRB     R3,[R1, #+28]
   \   00000078   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \   0000007C   0x61C2             STR      R2,[R0, #+28]
    152            descritor->tamanho_bloco |= pData[29]<<8;
   \   0000007E   0x69C2             LDR      R2,[R0, #+28]
   \   00000080   0x7F4B             LDRB     R3,[R1, #+29]
   \   00000082   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   00000086   0x61C2             STR      R2,[R0, #+28]
    153            descritor->tamanho_bloco |= pData[30];
   \   00000088   0x69C2             LDR      R2,[R0, #+28]
   \   0000008A   0x7F8B             LDRB     R3,[R1, #+30]
   \   0000008C   0x431A             ORRS     R2,R3,R2
   \   0000008E   0x61C2             STR      R2,[R0, #+28]
    154            
    155            descritor->time_stamp  = pData[31];
   \   00000090   0x7FCA             LDRB     R2,[R1, #+31]
   \   00000092   0x6202             STR      R2,[R0, #+32]
    156            descritor->time_stamp |= pData[32];
   \   00000094   0x6A02             LDR      R2,[R0, #+32]
   \   00000096   0xF891 0x3020      LDRB     R3,[R1, #+32]
   \   0000009A   0x431A             ORRS     R2,R3,R2
   \   0000009C   0x6202             STR      R2,[R0, #+32]
    157            descritor->time_stamp |= pData[33];
   \   0000009E   0x6A02             LDR      R2,[R0, #+32]
   \   000000A0   0xF891 0x3021      LDRB     R3,[R1, #+33]
   \   000000A4   0x431A             ORRS     R2,R3,R2
   \   000000A6   0x6202             STR      R2,[R0, #+32]
    158            descritor->time_stamp |= pData[34]; 
   \   000000A8   0x6A02             LDR      R2,[R0, #+32]
   \   000000AA   0xF891 0x3022      LDRB     R3,[R1, #+34]
   \   000000AE   0x431A             ORRS     R2,R3,R2
   \   000000B0   0x6202             STR      R2,[R0, #+32]
    159            
    160            descritor->checksum   = pData[35];
   \   000000B2   0xF891 0x1023      LDRB     R1,[R1, #+35]
   \   000000B6   0xF880 0x1024      STRB     R1,[R0, #+36]
    161          }
   \   000000BA   0xBC10             POP      {R4}
   \   000000BC   0x4770             BX       LR               ;; return
    162          /***********************************************************************************
    163          *       Descrição       :       Persiste o descritor na tabela de arquivos
    164          *                               do sistema
    165          *       Parametros      :       (unsigned char) indice do arquivo
    166          *                               (eDXF_file_descritor*) descritor do arquivo
    167          *       Retorno         :       (unsigned char) nenhum
    168          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          void DXT_grava(unsigned char indice_arquivo,eDXF_file_descritor *descritor){
   \                     DXT_grava:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0008             MOVS     R0,R1
    170            unsigned char buffer[36];
    171          
    172            DXF_serializa(descritor,buffer);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x.... 0x....      BL       DXF_serializa
    173            DXF_write_block(DXT_FILE_SYSTEM_INICIO_TABELA + (TAM_BLOCO_DESCRITOR_ARQUIVO*indice_arquivo),  
    174                            TAM_BLOCO_DESCRITOR_ARQUIVO,
    175                            buffer);                  
   \   0000000E   0xAA00             ADD      R2,SP,#+0
   \   00000010   0x2124             MOVS     R1,#+36
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2024             MOVS     R0,#+36
   \   00000016   0x....             LDR.N    R3,??DataTable6  ;; 0x77777
   \   00000018   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   0000001C   0x.... 0x....      BL       DXF_write_block
    176          }
   \   00000020   0xB00A             ADD      SP,SP,#+40
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    177          /***********************************************************************************
    178          *       Descrição       :       Carrega o descritor a partir da tabela de 
    179          *                               arquivos do sistema
    180          *       Parametros      :       (unsigned char) indice do arquivo
    181          *                               (eDXF_file_descritor*) descritor do arquivo
    182          *       Retorno         :       (unsigned char) maior do que zero se o 
    183          *                               arquivo estiver com o checksum correto
    184          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    185          unsigned char DXT_carrega(unsigned char indice_arquivo,eDXF_file_descritor *descritor){
   \                     DXT_carrega:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000C             MOVS     R4,R1
    186            unsigned char buffer[36];
    187          
    188            DXF_read_block(DXT_FILE_SYSTEM_INICIO_TABELA + (TAM_BLOCO_DESCRITOR_ARQUIVO*indice_arquivo),  
    189                           TAM_BLOCO_DESCRITOR_ARQUIVO,
    190                           buffer);       
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0x2124             MOVS     R1,#+36
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2324             MOVS     R3,#+36
   \   0000000E   0x....             LDR.N    R5,??DataTable6  ;; 0x77777
   \   00000010   0xFB03 0x5000      MLA      R0,R3,R0,R5
   \   00000014   0x.... 0x....      BL       DXF_read_block
    191            DXF_deserealiza(descritor,buffer);    
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       DXF_deserealiza
    192            //teria uma consistência auqi, mas não vai ter mais...
    193            return 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xB009             ADD      SP,SP,#+36
   \   00000024   0xBD30             POP      {R4,R5,PC}       ;; return
    194          }
    195          /***********************************************************************************
    196          *       Descrição       :       Calcula o checksum de um arquivo persistido
    197          *                               na flash
    198          *       Parametros      :       (unsigned int) endereço inicial
    199          *                               (unsigned int) tamanho
    200          *       Retorno         :       (unsigned char) checksum
    201          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    202          unsigned char DXT_calcula_checksum(unsigned int endereco_inicial,
    203                                             unsigned int tamanho){
   \                     DXT_calcula_checksum:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x0004             MOVS     R4,R0
    204            unsigned char soma=0;                                     
   \   00000008   0x2500             MOVS     R5,#+0
    205            unsigned char buffer[36];
    206            unsigned int loop=tamanho/36;
   \   0000000A   0x2024             MOVS     R0,#+36
   \   0000000C   0xFBB1 0xF6F0      UDIV     R6,R1,R0
    207            unsigned int resto = tamanho%36;
   \   00000010   0x2024             MOVS     R0,#+36
   \   00000012   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000016   0xFB00 0x1712      MLS      R7,R0,R2,R1
    208            
    209            for(unsigned int i=0;i<loop;i++){
   \   0000001A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000001E   0xE009             B.N      ??DXT_calcula_checksum_0
    210              DXF_read_block(endereco_inicial,36,buffer);
    211              for(unsigned char j=0;j<36;j++)
    212                soma+= buffer[j];
   \                     ??DXT_calcula_checksum_1:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x5C41             LDRB     R1,[R0, R1]
   \   00000026   0x194D             ADDS     R5,R1,R5
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??DXT_calcula_checksum_2:
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2824             CMP      R0,#+36
   \   0000002E   0xDBF7             BLT.N    ??DXT_calcula_checksum_1
   \   00000030   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??DXT_calcula_checksum_0:
   \   00000034   0x45B0             CMP      R8,R6
   \   00000036   0xD206             BCS.N    ??DXT_calcula_checksum_3
   \   00000038   0xAA00             ADD      R2,SP,#+0
   \   0000003A   0x2124             MOVS     R1,#+36
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       DXF_read_block
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE7F1             B.N      ??DXT_calcula_checksum_2
    213            }
    214            
    215            for(unsigned int i=0;i<resto;i++){
   \                     ??DXT_calcula_checksum_3:
   \   00000046   0x2600             MOVS     R6,#+0
   \   00000048   0xE008             B.N      ??DXT_calcula_checksum_4
    216              DXF_read_block(endereco_inicial,resto,buffer);
    217              for(unsigned char j=0;j<resto;j++)
    218                soma+= buffer[j];    
   \                     ??DXT_calcula_checksum_5:
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0x5C41             LDRB     R1,[R0, R1]
   \   00000050   0x194D             ADDS     R5,R1,R5
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \                     ??DXT_calcula_checksum_6:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x42B8             CMP      R0,R7
   \   00000058   0xD3F7             BCC.N    ??DXT_calcula_checksum_5
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \                     ??DXT_calcula_checksum_4:
   \   0000005C   0x42BE             CMP      R6,R7
   \   0000005E   0xD206             BCS.N    ??DXT_calcula_checksum_7
   \   00000060   0xAA00             ADD      R2,SP,#+0
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       DXF_read_block
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE7F2             B.N      ??DXT_calcula_checksum_6
    219            }
    220            
    221            return soma;                                    
   \                     ??DXT_calcula_checksum_7:
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0xB00A             ADD      SP,SP,#+40
   \   00000074   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    222          }
    223          /***********************************************************************************
    224          *       Descrição       :       Verifica se o checksum do bloco de dados
    225          *                               é o mesmo do 
    226          *       Parametros      :       (eDXF_file_descritor*) descritor
    227          *       Retorno         :       nenhum
    228          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    229          unsigned char DXT_checksum_check(eDXF_file_descritor *descritor){
   \                     DXT_checksum_check:
   \   00000000   0xB510             PUSH     {R4,LR}
    230            
    231            if(descritor->checksum == DXT_calcula_checksum(descritor->inicio_memoria,descritor->tamanho_bloco))
   \   00000002   0xF890 0x4024      LDRB     R4,[R0, #+36]
   \   00000006   0x69C1             LDR      R1,[R0, #+28]
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x.... 0x....      BL       DXT_calcula_checksum
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD101             BNE.N    ??DXT_checksum_check_0
    232              return 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B.N      ??DXT_checksum_check_1
    233            
    234            return 0;
   \                     ??DXT_checksum_check_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??DXT_checksum_check_1:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    235          }
    236          /***********************************************************************************
    237          *       Decrição        :       Preenche o check de um determinado arquivo
    238          *                               na tabela
    239          *       Parametros      :       (unsigned char) arquivo
    240          *       Retorno         :       nenhum
    241          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    242          void DXT_file_checksum_generate(unsigned char arquivo,eDXF_file_descritor *descritor){
   \                     DXT_file_checksum_generate:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    243            
    244            descritor->checksum = DXT_calcula_checksum(descritor->inicio_memoria,descritor->tamanho_bloco);
   \   00000006   0x69E9             LDR      R1,[R5, #+28]
   \   00000008   0x69A8             LDR      R0,[R5, #+24]
   \   0000000A   0x.... 0x....      BL       DXT_calcula_checksum
   \   0000000E   0xF885 0x0024      STRB     R0,[R5, #+36]
    245            DXT_grava(arquivo,descritor);
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       DXT_grava
    246          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    247          /***********************************************************************************
    248          *       Descrição       :       Abre o arquivo para escrita
    249          *       Parametros      :       (unsigned char) arquivo
    250          *       Retorno         :       nenhum
    251          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    252          eDXF_file_descritor *DXT_open_file(unsigned char arquivo){
   \                     DXT_open_file:
   \   00000000   0xB580             PUSH     {R7,LR}
    253            
    254            DXF_arquivo_aberto = 0xFF;
   \   00000002   0x....             LDR.N    R1,??DataTable6_1
   \   00000004   0x22FF             MOVS     R2,#+255
   \   00000006   0x700A             STRB     R2,[R1, #+0]
    255            
    256            DXF_ponteiro_escrita_arquivo=0;
   \   00000008   0x....             LDR.N    R1,??DataTable6_2
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    257            DXF_ponteiro_leitura_arquivo=0;
   \   0000000E   0x....             LDR.N    R1,??DataTable6_3
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x600A             STR      R2,[R1, #+0]
    258          
    259            DXF_indice_arquivo = arquivo;
   \   00000014   0x....             LDR.N    R1,??DataTable6_4
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    260            DXT_carrega(arquivo,&DXF_handler_arquivo_aberto);  
   \   00000018   0x....             LDR.N    R1,??DataTable6_5
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       DXT_carrega
    261            
    262            return (eDXF_file_descritor*)(&DXF_handler_arquivo_aberto);
   \   00000020   0x....             LDR.N    R0,??DataTable6_5
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
    263          }
    264          /***********************************************************************************
    265          *       Descrição       :       Getter para o descritor de arquivo da bilioteca
    266          *       Parametros      :       nenhum
    267          *       Retorno         :       (eDXF_file_descritor*) descritor do arquivo
    268          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    269          void DXF_close_file(void){
    270           
    271            DXF_arquivo_aberto = 0;
   \                     DXF_close_file:
   \   00000000   0x....             LDR.N    R0,??DataTable6_1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    272          }
   \   00000006   0x4770             BX       LR               ;; return
    273          /***********************************************************************************
    274          *       Descrição       :     Escreve um bloco de dados no arquivo
    275          *       Parametros      :     (eDXF_file_descritor*) descritor
    276          *                             (unsigned char*) ponteiro para os dados
    277          *                       :     (unsigned short int) tamanho do bloco
    278          *       Retorno         :     (unsigned short int) bytes escritos
    279          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    280          unsigned short int DXF_write(eDXF_file_descritor *descritor,unsigned char *pData,
    281                                       unsigned short int tamanho){
   \                     DXF_write:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0014             MOVS     R4,R2
    282            unsigned short int escritos=0;                                                   
   \   00000004   0x2500             MOVS     R5,#+0
    283            
    284            if( (descritor->inicio_memoria+descritor->tamanho_bloco) <= (descritor->inicio_memoria+tamanho+DXF_ponteiro_escrita_arquivo)){
   \   00000006   0x6982             LDR      R2,[R0, #+24]
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x18A2             ADDS     R2,R4,R2
   \   0000000C   0x....             LDR.N    R3,??DataTable6_2
   \   0000000E   0x681B             LDR      R3,[R3, #+0]
   \   00000010   0x189A             ADDS     R2,R3,R2
   \   00000012   0x6983             LDR      R3,[R0, #+24]
   \   00000014   0x69C6             LDR      R6,[R0, #+28]
   \   00000016   0x18F3             ADDS     R3,R6,R3
   \   00000018   0x429A             CMP      R2,R3
   \   0000001A   0xD310             BCC.N    ??DXF_write_0
    285              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_escrita_arquivo,tamanho,pData);
   \   0000001C   0x000A             MOVS     R2,R1
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x6980             LDR      R0,[R0, #+24]
   \   00000024   0x....             LDR.N    R3,??DataTable6_2
   \   00000026   0x681B             LDR      R3,[R3, #+0]
   \   00000028   0x1818             ADDS     R0,R3,R0
   \   0000002A   0x.... 0x....      BL       DXF_write_block
    286              escritos = tamanho;
   \   0000002E   0x0025             MOVS     R5,R4
    287              // Ajusta o ponteiro de escrita com os bytes escritos
    288              DXF_ponteiro_escrita_arquivo+=escritos;
   \   00000030   0x....             LDR.N    R0,??DataTable6_2
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000036   0x1828             ADDS     R0,R5,R0
   \   00000038   0x....             LDR.N    R1,??DataTable6_2
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0xE014             B.N      ??DXF_write_1
    289            }
    290            else{
    291              escritos = (descritor->inicio_memoria+tamanho) - (descritor->inicio_memoria+descritor->tamanho_bloco);
   \                     ??DXF_write_0:
   \   0000003E   0x6982             LDR      R2,[R0, #+24]
   \   00000040   0x18A2             ADDS     R2,R4,R2
   \   00000042   0x6983             LDR      R3,[R0, #+24]
   \   00000044   0x1AD2             SUBS     R2,R2,R3
   \   00000046   0x69C3             LDR      R3,[R0, #+28]
   \   00000048   0x1AD5             SUBS     R5,R2,R3
    292              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_escrita_arquivo,DXF_ponteiro_escrita_arquivo,pData);
   \   0000004A   0x000A             MOVS     R2,R1
   \   0000004C   0x....             LDR.N    R1,??DataTable6_2
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x6980             LDR      R0,[R0, #+24]
   \   00000052   0x....             LDR.N    R3,??DataTable6_2
   \   00000054   0x681B             LDR      R3,[R3, #+0]
   \   00000056   0x1818             ADDS     R0,R3,R0
   \   00000058   0x.... 0x....      BL       DXF_write_block
    293              // Ajusta o ponteiro de escrita com os bytes que foram efetivamente escritos
    294              DXF_ponteiro_escrita_arquivo+=escritos;
   \   0000005C   0x....             LDR.N    R0,??DataTable6_2
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000062   0x1828             ADDS     R0,R5,R0
   \   00000064   0x....             LDR.N    R1,??DataTable6_2
   \   00000066   0x6008             STR      R0,[R1, #+0]
    295            }
    296                                            
    297            return escritos;
   \                     ??DXF_write_1:
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0xBD70             POP      {R4-R6,PC}       ;; return
    298          }
    299          /***********************************************************************************
    300          *       Descrição       :       Lê um bloco de dados a partir do bloco
    301          *                               do arquivo
    302          *       Parametros      :       (eDXF_file_descritor*) descritor
    303          *                               (unsigned short int)tamamnho do bloco
    304          *                               (unsigned short int*) lidos
    305          *       Retorno         :       nenhum
    306          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    307          void DXF_read(eDXF_file_descritor *descritor,unsigned short int tamanho,unsigned char *pData,
    308                        unsigned short int *lidos){
   \                     DXF_read:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x001D             MOVS     R5,R3
    309            *lidos = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x8029             STRH     R1,[R5, #+0]
    310            
    311            if( (descritor->inicio_memoria+descritor->tamanho_bloco) <= (descritor->inicio_memoria+tamanho+DXF_ponteiro_leitura_arquivo)){
   \   0000000A   0x6981             LDR      R1,[R0, #+24]
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x1861             ADDS     R1,R4,R1
   \   00000010   0x....             LDR.N    R3,??DataTable6_3
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x1859             ADDS     R1,R3,R1
   \   00000016   0x6983             LDR      R3,[R0, #+24]
   \   00000018   0x69C6             LDR      R6,[R0, #+28]
   \   0000001A   0x18F3             ADDS     R3,R6,R3
   \   0000001C   0x4299             CMP      R1,R3
   \   0000001E   0xD30E             BCC.N    ??DXF_read_0
    312              DXF_read_block(descritor->inicio_memoria+DXF_ponteiro_leitura_arquivo,tamanho,pData);
   \   00000020   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x6980             LDR      R0,[R0, #+24]
   \   00000026   0x....             LDR.N    R3,??DataTable6_3
   \   00000028   0x681B             LDR      R3,[R3, #+0]
   \   0000002A   0x1818             ADDS     R0,R3,R0
   \   0000002C   0x.... 0x....      BL       DXF_read_block
    313              // Ajusta o ponteiro da leitura com o tamanho do bloco lido
    314              DXF_ponteiro_leitura_arquivo+=tamanho;
   \   00000030   0x....             LDR.N    R0,??DataTable6_3
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000036   0x1820             ADDS     R0,R4,R0
   \   00000038   0x....             LDR.N    R1,??DataTable6_3
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0xE013             B.N      ??DXF_read_1
    315            }
    316            else{
    317              *lidos = (descritor->inicio_memoria+tamanho) - (descritor->inicio_memoria+descritor->tamanho_bloco);
   \                     ??DXF_read_0:
   \   0000003E   0x6981             LDR      R1,[R0, #+24]
   \   00000040   0x1861             ADDS     R1,R4,R1
   \   00000042   0x6983             LDR      R3,[R0, #+24]
   \   00000044   0x1AC9             SUBS     R1,R1,R3
   \   00000046   0x69C3             LDR      R3,[R0, #+28]
   \   00000048   0x1AC9             SUBS     R1,R1,R3
   \   0000004A   0x8029             STRH     R1,[R5, #+0]
    318              DXF_write_block(descritor->inicio_memoria+DXF_ponteiro_leitura_arquivo,*lidos,pData);
   \   0000004C   0x8829             LDRH     R1,[R5, #+0]
   \   0000004E   0x6980             LDR      R0,[R0, #+24]
   \   00000050   0x....             LDR.N    R3,??DataTable6_3
   \   00000052   0x681B             LDR      R3,[R3, #+0]
   \   00000054   0x1818             ADDS     R0,R3,R0
   \   00000056   0x.... 0x....      BL       DXF_write_block
    319              // Ajusta o ponteiro de escrita com os bytes que foram efetivamente escritos
    320              DXF_ponteiro_leitura_arquivo+= *lidos;        
   \   0000005A   0x....             LDR.N    R0,??DataTable6_3
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x8829             LDRH     R1,[R5, #+0]
   \   00000060   0x1808             ADDS     R0,R1,R0
   \   00000062   0x....             LDR.N    R1,??DataTable6_3
   \   00000064   0x6008             STR      R0,[R1, #+0]
    321            }
    322          }
   \                     ??DXF_read_1:
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
    323          /***********************************************************************************
    324          *       Descrição       :       posiciona os ponteiros de leitura e 
    325          *                               escrita no inicio do arquivo
    326          *       Parametros      :       nenhum
    327          *       Retoro          :       nenhum
    328          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          void DXT_append(void){
    330            
    331            DXF_ponteiro_escrita_arquivo=0;
   \                     DXT_append:
   \   00000000   0x....             LDR.N    R0,??DataTable6_2
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    332            DXF_ponteiro_leitura_arquivo=0;  
   \   00000006   0x....             LDR.N    R0,??DataTable6_3
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    333          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x00077777         DC32     0x77777

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     DXF_arquivo_aberto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     DXF_ponteiro_escrita_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     DXF_ponteiro_leitura_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     DXF_indice_arquivo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     DXF_handler_arquivo_aberto
    334          /***********************************************************************************
    335          *       Fim do arquivo
    336          ***********************************************************************************/
    337          
    338            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DXF_close_file
       4   DXF_deserealiza
       0   DXF_ini
      16   DXF_read
        16   -> DXF_read_block
        16   -> DXF_write_block
       4   DXF_serializa
      16   DXF_write
        16   -> DXF_write_block
       0   DXT_append
      64   DXT_calcula_checksum
        64   -> DXF_read_block
      48   DXT_carrega
        48   -> DXF_deserealiza
        48   -> DXF_read_block
       8   DXT_checksum_check
         8   -> DXT_calcula_checksum
      16   DXT_file_checksum_generate
        16   -> DXT_calcula_checksum
        16   -> DXT_grava
      48   DXT_grava
        48   -> DXF_serializa
        48   -> DXF_write_block
       8   DXT_open_file
         8   -> DXT_carrega


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       1  DXF_arquivo_aberto
       8  DXF_close_file
     190  DXF_deserealiza
      40  DXF_handler_arquivo_aberto
       1  DXF_indice_arquivo
       2  DXF_ini
       4  DXF_ponteiro_escrita_arquivo
       4  DXF_ponteiro_leitura_arquivo
     104  DXF_read
     148  DXF_serializa
     110  DXF_write
      14  DXT_append
     120  DXT_calcula_checksum
      38  DXT_carrega
      26  DXT_checksum_check
      30  DXT_file_checksum_generate
      36  DXT_grava
      36  DXT_open_file

 
  50 bytes in section .bss
 886 bytes in section .text
 
 886 bytes of CODE memory
  50 bytes of DATA memory

Errors: none
Warnings: none

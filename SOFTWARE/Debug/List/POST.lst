###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      20/Jul/2017  15:39:27 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\POST.c                          #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\POST.c -lC                      #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\POST.lst                       #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\POST.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Aplicacao\POST.c
      1          /*__________________________________________________________________________________
      2          |	DEXTRO SOLUÇÕES TECNOLÓGICAS
      3          |       
      4          |       ITAJAÍ - SC
      5          |       www.dextro.ind.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by DEXTRO  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by DEXTRO 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da DEXTRO  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       DEXTRO  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  POST.c
     18          |       Descrição          :  Funções que executam o autoteste da máquina
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  25/04/2017
     22          |
     23          |       Revisões           :  1.0.0.0
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          
     29          /***********************************************************************************
     30          *       Includes
     31          ***********************************************************************************/
     32          #include <stdio.h>
     33          #include <stdlib.h>
     34          #include <string.h>
     35          #include "..\includes.h"
     36          #include "post.h"
     37          
     38          /***********************************************************************************
     39          *       Definições locais
     40          ***********************************************************************************/
     41          #define TEMPO_TESTE_MOTOR                       30000
     42          #define TEMPO_TESTE_RESISTENCIA                 60000
     43          /***********************************************************************************
     44          *       Constantes locais
     45          ***********************************************************************************/
     46          
     47          
     48          /***********************************************************************************
     49          *       Variaveis locais
     50          ***********************************************************************************/
     51          
     52          
     53          /***********************************************************************************
     54          *       Funções locais
     55          ***********************************************************************************/
     56          
     57          
     58          /***********************************************************************************
     59          *       Implementação das funções
     60          ***********************************************************************************/
     61          
     62          /***********************************************************************************
     63          *       Descrição       :       Ponto de entrada para o Post do sistema
     64          *       Parametros      :       nenhum
     65          *       Retorno         :       (ePOST_RESULT) resultado do POST
     66          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     67          ePOST_RESULT POST_entry(void){
   \                     POST_entry:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     68            unsigned int tempo;
     69            eIDIOMA idioma  = (eIDIOMA)APLICACAO_carrega_idioma();  
   \   00000002   0x.... 0x....      BL       APLICACAO_carrega_idioma
   \   00000006   0x0004             MOVS     R4,R0
     70          
     71          
     72            STRING_write_to_internal(CLEAR_DISPLAY,
     73                                    (char*)STRING_mensagem_inicio_autoteste[idioma][0],
     74                                    (char*)STRING_mensagem_inicio_autoteste[idioma][1]);
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000010   0x6842             LDR      R2,[R0, #+4]
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable0
   \   00000016   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       STRING_write_to_internal
     75              
     76            STRING_write_to_external(CLEAR_DISPLAY,
     77                                     (char*)STRING_mensagem_inicio_autoteste[idioma][0],
     78                                     (char*)STRING_mensagem_inicio_autoteste[idioma][1]);
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable0
   \   00000024   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000028   0x6842             LDR      R2,[R0, #+4]
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x....             LDR.N    R0,??DataTable0
   \   0000002E   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       STRING_write_to_external
     79                                         
     80            POTENCIA_set_neutro(1);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       POTENCIA_set_neutro
     81            vTaskDelay(1000);
   \   0000003E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000042   0x.... 0x....      BL       vTaskDelay
     82            POTENCIA_setRPM(5000);
   \   00000046   0xF241 0x3088      MOVW     R0,#+5000
   \   0000004A   0x.... 0x....      BL       POTENCIA_setRPM
     83            
     84            // Teste do motor
     85            tempo = TEMPO_TESTE_MOTOR;
   \   0000004E   0xF247 0x5430      MOVW     R4,#+30000
   \   00000052   0xE002             B.N      ??POST_entry_0
     86            while(POTENCIA_getRPMmedido()<1000 && --tempo)
     87              vTaskDelay(1);
   \                     ??POST_entry_1:
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       vTaskDelay
   \                     ??POST_entry_0:
   \   0000005A   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000005E   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000062   0xD202             BCS.N    ??POST_entry_2
   \   00000064   0x1E64             SUBS     R4,R4,#+1
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD1F4             BNE.N    ??POST_entry_1
     88            
     89            if(!tempo){
   \                     ??POST_entry_2:
   \   0000006A   0x2C00             CMP      R4,#+0
   \   0000006C   0xD107             BNE.N    ??POST_entry_3
     90              POTENCIA_set_neutro(0);
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       POTENCIA_set_neutro
     91              POTENCIA_setRPM(0);
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       POTENCIA_setRPM
     92              return POST_FALHA_VENTILADOR;
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0xE028             B.N      ??POST_entry_4
     93            }
     94            
     95            // Teste da resistência
     96            unsigned int temperatura_inicial=AA_calculaTemperatura();  
   \                     ??POST_entry_3:
   \   0000007E   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000082   0x0005             MOVS     R5,R0
     97            tempo = TEMPO_TESTE_RESISTENCIA;
   \   00000084   0xF64E 0x2460      MOVW     R4,#+60000
     98            CT_set_temperatura(temperatura_inicial+5);
   \   00000088   0x1D68             ADDS     R0,R5,#+5
   \   0000008A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008C   0x.... 0x....      BL       CT_set_temperatura
   \   00000090   0xE002             B.N      ??POST_entry_5
     99            while(AA_calculaTemperatura()<(temperatura_inicial+3) && --tempo)
    100              vTaskDelay(1);
   \                     ??POST_entry_6:
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x.... 0x....      BL       vTaskDelay
   \                     ??POST_entry_5:
   \   00000098   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000009C   0x1CE9             ADDS     R1,R5,#+3
   \   0000009E   0x4288             CMP      R0,R1
   \   000000A0   0xD202             BCS.N    ??POST_entry_7
   \   000000A2   0x1E64             SUBS     R4,R4,#+1
   \   000000A4   0x2C00             CMP      R4,#+0
   \   000000A6   0xD1F4             BNE.N    ??POST_entry_6
    101          
    102            POTENCIA_set_neutro(0);
   \                     ??POST_entry_7:
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      BL       POTENCIA_set_neutro
    103            POTENCIA_setRPM(0);
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       POTENCIA_setRPM
    104            CT_set_temperatura(0);
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      BL       CT_set_temperatura
    105              
    106            if(!tempo)
   \   000000BA   0x2C00             CMP      R4,#+0
   \   000000BC   0xD101             BNE.N    ??POST_entry_8
    107              return POST_FALHA_VENTILADOR;  
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE006             B.N      ??POST_entry_4
    108            
    109            // Verifica se existem embalagens
    110            // no reservatório
    111            if(EMBALAGEM_verifica_estoque()==EMBALAGEM_SEM_PACOTES)
   \                     ??POST_entry_8:
   \   000000C2   0x.... 0x....      BL       EMBALAGEM_verifica_estoque
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD101             BNE.N    ??POST_entry_9
    112              return POST_FALHA_PAPEL;  
   \   000000CA   0x2007             MOVS     R0,#+7
   \   000000CC   0xE000             B.N      ??POST_entry_4
    113                    
    114            return POST_SUCESSO;
   \                     ??POST_entry_9:
   \   000000CE   0x2000             MOVS     R0,#+0
   \                     ??POST_entry_4:
   \   000000D0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    115          }
    116          /***********************************************************************************
    117          *       Descrição       :       Faz a verificação cíclica dos componentes
    118          *       Parametros      :       nenhum
    119          *       Retorno         :      ePOST_CICLICO_RESULT
    120          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          ePOST_CICLICO_RESULT POST_verificacao_ciclica(void){
   \                     POST_verificacao_ciclica:
   \   00000000   0xB580             PUSH     {R7,LR}
    122            unsigned int temperatura;
    123            
    124            if(EMBALAGEM_verifica_estoque()==EMBALAGEM_SEM_PACOTES)
   \   00000002   0x.... 0x....      BL       EMBALAGEM_verifica_estoque
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??POST_verificacao_ciclica_0
    125              return POST_CICLICO_FALHA_EMBALAGEM;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE009             B.N      ??POST_verificacao_ciclica_1
    126            
    127            temperatura = AA_calculaTemperatura();
   \                     ??POST_verificacao_ciclica_0:
   \   0000000E   0x.... 0x....      BL       AA_calculaTemperatura
    128            if(!temperatura || temperatura>=500)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD002             BEQ.N    ??POST_verificacao_ciclica_2
   \   00000016   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000001A   0xD301             BCC.N    ??POST_verificacao_ciclica_3
    129              return POST_CICLICO_FALHA_TERMISTOR;
   \                     ??POST_verificacao_ciclica_2:
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xE000             B.N      ??POST_verificacao_ciclica_1
    130            
    131            return POST_CICLICO_SUCESSO;
   \                     ??POST_verificacao_ciclica_3:
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??POST_verificacao_ciclica_1:
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
    132          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     STRING_mensagem_inicio_autoteste
    133          /***********************************************************************************
    134          *       Fim do arquivo
    135          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   POST_entry
        16   -> AA_calculaTemperatura
        16   -> APLICACAO_carrega_idioma
        16   -> CT_set_temperatura
        16   -> EMBALAGEM_verifica_estoque
        16   -> POTENCIA_getRPMmedido
        16   -> POTENCIA_setRPM
        16   -> POTENCIA_set_neutro
        16   -> STRING_write_to_external
        16   -> STRING_write_to_internal
        16   -> vTaskDelay
       8   POST_verificacao_ciclica
         8   -> AA_calculaTemperatura
         8   -> EMBALAGEM_verifica_estoque


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
     210  POST_entry
      36  POST_verificacao_ciclica

 
 250 bytes in section .text
 
 250 bytes of CODE memory

Errors: none
Warnings: none

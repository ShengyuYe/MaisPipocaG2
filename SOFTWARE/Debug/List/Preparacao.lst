###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      20/Jul/2017  11:07:11 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\Preparacao.c                    #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Aplicacao\Preparacao.c -lC                #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\Preparacao.lst                 #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\Preparacao.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Aplicacao\Preparacao.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Preparacao.c
     18          |       Descrição          :  Interface para a preparação da pipoca
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  22/04/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |                             (22/04/2017) Criado módulo que faz a preparação
     26          |                             da pipoca - Marcos
     27          |                    
     28          |
     29          |
     30          | __________________________________________________________________________________
     31          */
     32          
     33          /**********************************************************************************
     34          *       Includes
     35          **********************************************************************************/
     36          #include <stdio.h>
     37          #include <stdlib.h>
     38          #include <string.h>
     39          #include "..\includes.h"
     40          
     41          /**********************************************************************************
     42          *       Definições locais
     43          **********************************************************************************/
     44          #define TEMPO_PREPARO                   80*1000
     45          #define TEMPO_ABRIR_PACOTE              50*1000
     46          #define TEMPO_RAMPA                     3000
     47          #define THRESOLD_RESFRIAMENTO           1
     48          #define RELOAD_COMPENSADOR              2*60000 // 5 minutos
     49          /**********************************************************************************
     50          *       Constantes
     51          **********************************************************************************/
     52          
     53          
     54          /**********************************************************************************
     55          *       Variaveis locais
     56          **********************************************************************************/

   \                                 In section .bss, align 4
     57          unsigned int PREPARACAO_cnt_preparo=0;
   \                     PREPARACAO_cnt_preparo:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          unsigned int PREPARACAO_cnt_rampa=0;
   \                     PREPARACAO_cnt_rampa:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          unsigned int PREPARACAO_contador_compensacao=0;
   \                     PREPARACAO_contador_compensacao:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          unsigned int PREPARACAO_compensador=0;
   \                     PREPARACAO_compensador:
   \   00000000                      DS8 4
     61          
     62          /**********************************************************************************
     63          *       Funções locais
     64          **********************************************************************************/
     65          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo);
     66          unsigned char PREPARACAO_verificaVentilador(void);
     67          unsigned char PREPARACAO_verifica_resistencia(void);
     68          void PREPARACAO_tela_interna(void);
     69          unsigned char PREPARACAO_dosagem_milho(void);
     70          void PREPARACAO_resfriamento(unsigned char idioma);
     71          
     72          /**********************************************************************************
     73          *       Implementação das funções
     74          **********************************************************************************/
     75          
     76          /**********************************************************************************
     77          *       Descrição       :       Ponto de entrada do menu da interface para
     78          *                               preparação das pipocas
     79          *       Parametros      :       nenhum
     80          *       Retorno         :       nenhum
     81          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          ePREPARACAO_RESULT PREPARACAO_entry(unsigned int *ajuste_out,
     83                                              eCONTABILIZAR contabiliza){
   \                     PREPARACAO_entry:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x000C             MOVS     R4,R1
     84            unsigned int temperatura_processo;
     85            unsigned int velocidade_processo;
     86            unsigned int tempo_embalagem;
     87            unsigned char idioma;
     88            unsigned char delta=0;
   \   00000006   0x2500             MOVS     R5,#+0
     89            unsigned int valor_pipoca;
     90            unsigned char flag_correcao_erro;
     91            
     92            PAGAMENTOS_set_bloqueio(1);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       PAGAMENTOS_set_bloqueio
     93            
     94            PARAMETROS_le(ADR_FLAG_IDIOMA,(void*)&idioma);
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       PARAMETROS_le
     95            PARAMETROS_le(ADR_TEMPERATURA_PREPARACAO,(void*)&temperatura_processo);
   \   00000016   0xA901             ADD      R1,SP,#+4
   \   00000018   0x201A             MOVS     R0,#+26
   \   0000001A   0x.... 0x....      BL       PARAMETROS_le
     96            PARAMETROS_le(ADR_VELOCIDADE_PREPARACAO,(void*)&velocidade_processo);
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0x201B             MOVS     R0,#+27
   \   00000022   0x.... 0x....      BL       PARAMETROS_le
     97            PARAMETROS_le(ADR_TEMPO_EMBALAGEM,(void*)&tempo_embalagem);
   \   00000026   0xA903             ADD      R1,SP,#+12
   \   00000028   0x201C             MOVS     R0,#+28
   \   0000002A   0x.... 0x....      BL       PARAMETROS_le
     98            PARAMETROS_le(ADR_VALOR_PIPOCA,(void*)&valor_pipoca);  
   \   0000002E   0xA904             ADD      R1,SP,#+16
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x.... 0x....      BL       PARAMETROS_le
     99            PARAMETROS_le(ADR_COMPENSADOR_ERRO_ROTACAO,(void*)&flag_correcao_erro);    
   \   00000036   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000003A   0x2040             MOVS     R0,#+64
   \   0000003C   0x.... 0x....      BL       PARAMETROS_le
    100          
    101            //-----------------------------------------------
    102            // Por falta de testes, deixei esse trecho abaixo
    103            // para garantir que funcionará mesmo que ocorra
    104            // uma falha na leitura da memória flash externa
    105            // Faz a consistência dos parametros
    106            //**********************************************
    107            if(temperatura_processo>170)
   \   00000040   0x9801             LDR      R0,[SP, #+4]
   \   00000042   0x28AB             CMP      R0,#+171
   \   00000044   0xD301             BCC.N    ??PREPARACAO_entry_0
    108              temperatura_processo = 85;
   \   00000046   0x2055             MOVS     R0,#+85
   \   00000048   0x9001             STR      R0,[SP, #+4]
    109            if(velocidade_processo>8500)
   \                     ??PREPARACAO_entry_0:
   \   0000004A   0x9802             LDR      R0,[SP, #+8]
   \   0000004C   0xF242 0x1135      MOVW     R1,#+8501
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD302             BCC.N    ??PREPARACAO_entry_1
    110              velocidade_processo = 5700;
   \   00000054   0xF241 0x6044      MOVW     R0,#+5700
   \   00000058   0x9002             STR      R0,[SP, #+8]
    111            if(tempo_embalagem>10000 || !tempo_embalagem)
   \                     ??PREPARACAO_entry_1:
   \   0000005A   0x9803             LDR      R0,[SP, #+12]
   \   0000005C   0xF242 0x7111      MOVW     R1,#+10001
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD202             BCS.N    ??PREPARACAO_entry_2
   \   00000064   0x9803             LDR      R0,[SP, #+12]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD102             BNE.N    ??PREPARACAO_entry_3
    112              tempo_embalagem = 4200;
   \                     ??PREPARACAO_entry_2:
   \   0000006A   0xF241 0x0068      MOVW     R0,#+4200
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    113            
    114            BOARD_setter_led_instrucao(LED_INSIRA_DINHEIRO,ACESO);
   \                     ??PREPARACAO_entry_3:
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2002             MOVS     R0,#+2
   \   00000074   0x.... 0x....      BL       BOARD_setter_led_instrucao
    115                 
    116            //Faz o ajuste de compensação da panela
    117            //unsigned int ajuste = AA_calculaTemperatura();
    118            if(PREPARACAO_contador_compensacao){
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD00B             BEQ.N    ??PREPARACAO_entry_4
    119              if(PREPARACAO_compensador<5)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x2805             CMP      R0,#+5
   \   0000008A   0xD206             BCS.N    ??PREPARACAO_entry_4
    120                PREPARACAO_compensador++;
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000098   0x6008             STR      R0,[R1, #+0]
    121            }
    122            
    123            PREPARACAO_contador_compensacao = RELOAD_COMPENSADOR;  
   \                     ??PREPARACAO_entry_4:
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x1d4c0
   \   000000A2   0x6001             STR      R1,[R0, #+0]
    124            
    125            temperatura_processo += PREPARACAO_compensador;
   \   000000A4   0x9801             LDR      R0,[SP, #+4]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x1808             ADDS     R0,R1,R0
   \   000000AE   0x9001             STR      R0,[SP, #+4]
    126            
    127            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000B0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000B8   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000BC   0x6842             LDR      R2,[R0, #+4]
   \   000000BE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000C6   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       STRING_write_to_external
    128            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000D0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000D8   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000DC   0x6842             LDR      R2,[R0, #+4]
   \   000000DE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000E6   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x.... 0x....      BL       STRING_write_to_internal
    129            
    130            // Inicializa o PID de controle
    131            // da rotação do motor
    132            POTENCIA_set_neutro(1);
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       POTENCIA_set_neutro
    133            vTaskDelay(500);
   \   000000F6   0xF44F 0x70FA      MOV      R0,#+500
   \   000000FA   0x.... 0x....      BL       vTaskDelay
    134            if(flag_correcao_erro)
   \   000000FE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD004             BEQ.N    ??PREPARACAO_entry_5
    135              POTENCIA_setRPM(2500);
   \   00000106   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000010A   0x.... 0x....      BL       POTENCIA_setRPM
   \   0000010E   0xE003             B.N      ??PREPARACAO_entry_6
    136            else
    137              POTENCIA_setRPM(4000);
   \                     ??PREPARACAO_entry_5:
   \   00000110   0xF44F 0x607A      MOV      R0,#+4000
   \   00000114   0x.... 0x....      BL       POTENCIA_setRPM
    138          
    139            PREPARACAO_cnt_preparo = TEMPO_PREPARO;  
   \                     ??PREPARACAO_entry_6:
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable5_5  ;; 0x13880
   \   00000120   0x6001             STR      R1,[R0, #+0]
    140            // Faz a verificação do ventilador
    141            if(!PREPARACAO_verificaVentilador()){
   \   00000122   0x.... 0x....      BL       PREPARACAO_verificaVentilador
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD107             BNE.N    ??PREPARACAO_entry_7
    142              // Se não detectar o giro
    143              // desliga a parte de alta-tensão
    144              // e sinaliza o erro
    145              POTENCIA_setRPM(0);
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x.... 0x....      BL       POTENCIA_setRPM
    146              POTENCIA_set_neutro(0);
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x.... 0x....      BL       POTENCIA_set_neutro
    147              return FALHA_VENTILADOR;
   \   00000136   0x2001             MOVS     R0,#+1
   \   00000138   0xE0EA             B.N      ??PREPARACAO_entry_8
    148            }
    149              
    150            // Inicia o controlador de temperatura
    151            CT_set_temperatura(temperatura_processo);
   \                     ??PREPARACAO_entry_7:
   \   0000013A   0x9801             LDR      R0,[SP, #+4]
   \   0000013C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013E   0x.... 0x....      BL       CT_set_temperatura
    152            
    153            // Aguarda até a temperatura de início de processo
    154            // chegar ao valor da inicial
    155            unsigned int timeout=60000;
   \   00000142   0xF64E 0x2660      MOVW     R6,#+60000
   \   00000146   0xE004             B.N      ??PREPARACAO_entry_9
    156            //do vTaskDelay(1);
    157            while(AA_calculaTemperatura()<temperatura_processo && --timeout){
    158              vTaskDelay(1);
   \                     ??PREPARACAO_entry_10:
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x.... 0x....      BL       vTaskDelay
    159              APLICACAO_tela_descanso();
                     ^
Warning[Pe223]: function "APLICACAO_tela_descanso" declared implicitly
   \   0000014E   0x.... 0x....      BL       APLICACAO_tela_descanso
    160            }  
   \                     ??PREPARACAO_entry_9:
   \   00000152   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000156   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000158   0x9901             LDR      R1,[SP, #+4]
   \   0000015A   0x4288             CMP      R0,R1
   \   0000015C   0xD202             BCS.N    ??PREPARACAO_entry_11
   \   0000015E   0x1E76             SUBS     R6,R6,#+1
   \   00000160   0x2E00             CMP      R6,#+0
   \   00000162   0xD1F1             BNE.N    ??PREPARACAO_entry_10
    161            
    162            if(!timeout){
   \                     ??PREPARACAO_entry_11:
   \   00000164   0x2E00             CMP      R6,#+0
   \   00000166   0xD10A             BNE.N    ??PREPARACAO_entry_12
    163              POTENCIA_setRPM(0);
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x.... 0x....      BL       POTENCIA_setRPM
    164              POTENCIA_set_neutro(0);
   \   0000016E   0x2000             MOVS     R0,#+0
   \   00000170   0x.... 0x....      BL       POTENCIA_set_neutro
    165              CT_set_temperatura(0);
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       CT_set_temperatura
    166              return FALHA_RESISTENCIA;   
   \   0000017A   0x2002             MOVS     R0,#+2
   \   0000017C   0xE0C8             B.N      ??PREPARACAO_entry_8
    167            }  
    168            
    169            if(!PREPARACAO_dosagem_milho()){
   \                     ??PREPARACAO_entry_12:
   \   0000017E   0x.... 0x....      BL       PREPARACAO_dosagem_milho
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD10A             BNE.N    ??PREPARACAO_entry_13
    170              POTENCIA_setRPM(0);
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x.... 0x....      BL       POTENCIA_setRPM
    171              POTENCIA_set_neutro(0);
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x.... 0x....      BL       POTENCIA_set_neutro
    172              CT_set_temperatura(0);
   \   00000192   0x2000             MOVS     R0,#+0
   \   00000194   0x.... 0x....      BL       CT_set_temperatura
    173              return FALHA_DOSE;     
   \   00000198   0x2003             MOVS     R0,#+3
   \   0000019A   0xE0B9             B.N      ??PREPARACAO_entry_8
    174            }
    175            
    176            POTENCIA_setRPM(velocidade_processo);
   \                     ??PREPARACAO_entry_13:
   \   0000019C   0x9802             LDR      R0,[SP, #+8]
   \   0000019E   0x.... 0x....      BL       POTENCIA_setRPM
    177            if(flag_correcao_erro)
   \   000001A2   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001A6   0x2800             CMP      R0,#+0
   \   000001A8   0xD005             BEQ.N    ??PREPARACAO_entry_14
    178              while(POTENCIA_getRPMmedido()<velocidade_processo);
   \                     ??PREPARACAO_entry_15:
   \   000001AA   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000001AE   0x9902             LDR      R1,[SP, #+8]
   \   000001B0   0x4288             CMP      R0,R1
   \   000001B2   0xD207             BCS.N    ??PREPARACAO_entry_16
   \   000001B4   0xE7F9             B.N      ??PREPARACAO_entry_15
    179            else
    180              while(POTENCIA_getRPMmedido()<(velocidade_processo-1000));
   \                     ??PREPARACAO_entry_14:
   \   000001B6   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000001BA   0x9902             LDR      R1,[SP, #+8]
   \   000001BC   0xF5B1 0x717A      SUBS     R1,R1,#+1000
   \   000001C0   0x4288             CMP      R0,R1
   \   000001C2   0xD3F8             BCC.N    ??PREPARACAO_entry_14
    181            
    182            BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,PISCANDO); // Indica na plac ade instrução para pegar a embalagem
   \                     ??PREPARACAO_entry_16:
   \   000001C4   0x2102             MOVS     R1,#+2
   \   000001C6   0x2003             MOVS     R0,#+3
   \   000001C8   0x.... 0x....      BL       BOARD_setter_led_instrucao
    183            //if(
    184            EMBALAGEM_libera_pacote(tempo_embalagem);//!=EMBALAGEM_LIBERADA);
   \   000001CC   0x9803             LDR      R0,[SP, #+12]
   \   000001CE   0x.... 0x....      BL       EMBALAGEM_libera_pacote
    185            //  POTENCIA_setRPM(0);
    186            //  POTENCIA_set_neutro(0);
    187            //  CT_set_temperatura(0);    
    188            //  return FALHA_EMBALAGEM;
    189            //}    
    190            
    191            PLAYERWAVE_iniciaMusica(AUDIO_PEGA_PACOTE,0);
   \   000001D2   0x2100             MOVS     R1,#+0
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    192            while(PLAYERWAVE_verificaToque());
   \                     ??PREPARACAO_entry_17:
   \   000001DA   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD1FB             BNE.N    ??PREPARACAO_entry_17
    193           
    194            STRING_write_to_external(CLEAR_DISPLAY,NULL,NULL);
   \   000001E2   0x2200             MOVS     R2,#+0
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x.... 0x....      BL       STRING_write_to_external
    195            STRING_write_to_internal(CLEAR_DISPLAY,NULL,NULL);
   \   000001EC   0x2200             MOVS     R2,#+0
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x.... 0x....      BL       STRING_write_to_internal
    196            PREPARACAO_cnt_rampa = TEMPO_RAMPA;
   \   000001F6   0x....             LDR.N    R0,??DataTable5_6
   \   000001F8   0xF640 0x31B8      MOVW     R1,#+3000
   \   000001FC   0x6001             STR      R1,[R0, #+0]
    197            PREPARACAO_cnt_preparo = TEMPO_PREPARO;
   \   000001FE   0x....             LDR.N    R0,??DataTable5_4
   \   00000200   0x....             LDR.N    R1,??DataTable5_5  ;; 0x13880
   \   00000202   0x6001             STR      R1,[R0, #+0]
    198            
    199            PLAYERWAVE_iniciaMusica(MUSICA_PREPARO,0);
   \   00000204   0x2100             MOVS     R1,#+0
   \   00000206   0x2001             MOVS     R0,#+1
   \   00000208   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
   \   0000020C   0xE007             B.N      ??PREPARACAO_entry_18
    200            //while(PLAYERWAVE_verificaToque());
    201            
    202            // Loop de preparação da pipoca
    203            for(;PREPARACAO_cnt_preparo;){
    204              
    205              PREPARACAO_atualiza_info_tempo(idioma,PREPARACAO_cnt_preparo);    
    206              PREPARACAO_tela_interna();
    207              
    208              // Falha no motor do ventilador
    209              if(POTENCIA_getRPMmedido()<1000){
    210                POTENCIA_setRPM(0);
    211                POTENCIA_set_neutro(0);
    212                CT_set_temperatura(0);   
    213                return FALHA_VENTILADOR;
    214              }
    215                  
    216              // Gera a rampa de aquecimento
    217              // na preparação da pipoca
    218              if(!PREPARACAO_cnt_rampa){
    219                //temperatura_processo;
    220                if(delta<20)
    221                  delta++;
    222                CT_set_temperatura(temperatura_processo+delta);
    223                PREPARACAO_cnt_rampa = TEMPO_RAMPA;
    224              }
    225              
    226              // Controle da placa de instrução
    227              // do usuário
    228              if(PREPARACAO_cnt_preparo>TEMPO_ABRIR_PACOTE){
    229                 BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,ACESO);
   \                     ??PREPARACAO_entry_19:
   \   0000020E   0x2101             MOVS     R1,#+1
   \   00000210   0x2003             MOVS     R0,#+3
   \   00000212   0x.... 0x....      BL       BOARD_setter_led_instrucao
    230                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,PISCANDO);
   \   00000216   0x2102             MOVS     R1,#+2
   \   00000218   0x2004             MOVS     R0,#+4
   \   0000021A   0x.... 0x....      BL       BOARD_setter_led_instrucao
    231              }
   \                     ??PREPARACAO_entry_18:
   \   0000021E   0x....             LDR.N    R0,??DataTable5_4
   \   00000220   0x6800             LDR      R0,[R0, #+0]
   \   00000222   0x2800             CMP      R0,#+0
   \   00000224   0xD038             BEQ.N    ??PREPARACAO_entry_20
   \   00000226   0x....             LDR.N    R0,??DataTable5_4
   \   00000228   0x6801             LDR      R1,[R0, #+0]
   \   0000022A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000022E   0x.... 0x....      BL       PREPARACAO_atualiza_info_tempo
   \   00000232   0x.... 0x....      BL       PREPARACAO_tela_interna
   \   00000236   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000023A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000023E   0xD20A             BCS.N    ??PREPARACAO_entry_21
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       POTENCIA_setRPM
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x.... 0x....      BL       POTENCIA_set_neutro
   \   0000024C   0x2000             MOVS     R0,#+0
   \   0000024E   0x.... 0x....      BL       CT_set_temperatura
   \   00000252   0x2001             MOVS     R0,#+1
   \   00000254   0xE05C             B.N      ??PREPARACAO_entry_8
   \                     ??PREPARACAO_entry_21:
   \   00000256   0x....             LDR.N    R0,??DataTable5_6
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0x2800             CMP      R0,#+0
   \   0000025C   0xD10D             BNE.N    ??PREPARACAO_entry_22
   \   0000025E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000260   0x2D14             CMP      R5,#+20
   \   00000262   0xDA00             BGE.N    ??PREPARACAO_entry_23
   \   00000264   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PREPARACAO_entry_23:
   \   00000266   0x9801             LDR      R0,[SP, #+4]
   \   00000268   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000026A   0x1828             ADDS     R0,R5,R0
   \   0000026C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000026E   0x.... 0x....      BL       CT_set_temperatura
   \   00000272   0x....             LDR.N    R0,??DataTable5_6
   \   00000274   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000278   0x6001             STR      R1,[R0, #+0]
   \                     ??PREPARACAO_entry_22:
   \   0000027A   0x....             LDR.N    R0,??DataTable5_4
   \   0000027C   0x6800             LDR      R0,[R0, #+0]
   \   0000027E   0xF24C 0x3151      MOVW     R1,#+50001
   \   00000282   0x4288             CMP      R0,R1
   \   00000284   0xD2C3             BCS.N    ??PREPARACAO_entry_19
    232              else{
    233                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,ACESO);        
   \   00000286   0x2101             MOVS     R1,#+1
   \   00000288   0x2004             MOVS     R0,#+4
   \   0000028A   0x.... 0x....      BL       BOARD_setter_led_instrucao
    234                 BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,PISCANDO);         
   \   0000028E   0x2102             MOVS     R1,#+2
   \   00000290   0x2005             MOVS     R0,#+5
   \   00000292   0x.... 0x....      BL       BOARD_setter_led_instrucao
   \   00000296   0xE7C2             B.N      ??PREPARACAO_entry_18
    235              }
    236            }  
    237            
    238            BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,ACESO);
   \                     ??PREPARACAO_entry_20:
   \   00000298   0x2101             MOVS     R1,#+1
   \   0000029A   0x2005             MOVS     R0,#+5
   \   0000029C   0x.... 0x....      BL       BOARD_setter_led_instrucao
    239                
    240            // Desliga os controles
    241            // da potência
    242            POTENCIA_setRPM(0);
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x.... 0x....      BL       POTENCIA_setRPM
    243            POTENCIA_set_neutro(0);
   \   000002A6   0x2000             MOVS     R0,#+0
   \   000002A8   0x.... 0x....      BL       POTENCIA_set_neutro
    244            CT_set_temperatura(0);
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      BL       CT_set_temperatura
    245            
    246            PREPARACAO_limpeza(idioma);
   \   000002B2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002B6   0x.... 0x....      BL       PREPARACAO_limpeza
    247            
    248            PLAYER_interrompeMusica();
   \   000002BA   0x.... 0x....      BL       PLAYER_interrompeMusica
    249            vTaskDelay(500);
   \   000002BE   0xF44F 0x70FA      MOV      R0,#+500
   \   000002C2   0x.... 0x....      BL       vTaskDelay
    250            PLAYERWAVE_iniciaMusica(AUDIO_PIPOCAS_PRONTAS,0);
   \   000002C6   0x2100             MOVS     R1,#+0
   \   000002C8   0x2002             MOVS     R0,#+2
   \   000002CA   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    251            while(PLAYERWAVE_verificaToque());  
   \                     ??PREPARACAO_entry_24:
   \   000002CE   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000002D2   0x2800             CMP      R0,#+0
   \   000002D4   0xD1FB             BNE.N    ??PREPARACAO_entry_24
    252            vTaskDelay(500); 
   \   000002D6   0xF44F 0x70FA      MOV      R0,#+500
   \   000002DA   0x.... 0x....      BL       vTaskDelay
    253            //-----------------------------------------------
    254            // Local para inserção dos dados no faturamento
    255            // e liberação do troco
    256            //-----------------------------------------------
    257            if(contabiliza==CONTABILIZA){
   \   000002DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002E0   0x2C01             CMP      R4,#+1
   \   000002E2   0xD10C             BNE.N    ??PREPARACAO_entry_25
    258              // Só contabiliza as unidades vendidadas
    259              // quando houver necessidade
    260              FATURAMENTO_add_contagem_parcial(1);
   \   000002E4   0x2001             MOVS     R0,#+1
   \   000002E6   0x.... 0x....      BL       FATURAMENTO_add_contagem_parcial
    261              FATURAMENTO_add_arrecadacao_parcial(valor_pipoca);
   \   000002EA   0x9804             LDR      R0,[SP, #+16]
   \   000002EC   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_parcial
    262              FATURAMENTO_add_contagem_total(1);
   \   000002F0   0x2001             MOVS     R0,#+1
   \   000002F2   0x.... 0x....      BL       FATURAMENTO_add_contagem_total
    263              FATURAMENTO_add_arrecadacao_total(valor_pipoca);
   \   000002F6   0x9804             LDR      R0,[SP, #+16]
   \   000002F8   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_total
   \   000002FC   0xE001             B.N      ??PREPARACAO_entry_26
    264            }
    265            else
    266              FATURAMENTO_inc_contador_pipocas_teste();  
   \                     ??PREPARACAO_entry_25:
   \   000002FE   0x.... 0x....      BL       FATURAMENTO_inc_contador_pipocas_teste
    267           
    268            //----------------------------------------------
    269            // Fim da coleta dos dados de faturamento
    270            //----------------------------------------------   
    271            
    272            BOARD_liga_placa_instrucao(0);
   \                     ??PREPARACAO_entry_26:
   \   00000302   0x2000             MOVS     R0,#+0
   \   00000304   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    273            BOARD_liga_placa_instrucao(1);  
   \   00000308   0x2001             MOVS     R0,#+1
   \   0000030A   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    274            
    275            //PAGAMENTOS_set_bloqueio(0);
    276            
    277            return SUCESSO;
   \   0000030E   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_entry_8:
   \   00000310   0xB006             ADD      SP,SP,#+24
   \   00000312   0xBD70             POP      {R4-R6,PC}       ;; return
    278          }
    279          /**********************************************************************************
    280          *       Descrição       :       Atualiza o display frontal com o tempo restante
    281          *                               do processo de preparo
    282          *       Parametros      :       nenhum
    283          *       Retorno         :       nenhum
    284          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    285          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo){
   \                     PREPARACAO_atualiza_info_tempo:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    286            char buffer_linha[17];
    287            unsigned int minutos;
    288            unsigned int segundos;
    289            
    290            minutos  = PREPARACAO_cnt_preparo/1000;
   \   00000006   0x....             LDR.N    R0,??DataTable5_4
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
    291            segundos = minutos % 60;
   \   00000012   0x203C             MOVS     R0,#+60
   \   00000014   0xFBB2 0xF1F0      UDIV     R1,R2,R0
   \   00000018   0xFB00 0x2311      MLS      R3,R0,R1,R2
    292            minutos  = minutos/60;
   \   0000001C   0x203C             MOVS     R0,#+60
   \   0000001E   0xFBB2 0xF2F0      UDIV     R2,R2,R0
    293            
    294            sprintf(buffer_linha,"  %01d:%02d  ",minutos,segundos);
   \   00000022   0x....             LDR.N    R1,??DataTable5_7
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       sprintf
    295            STRING_write_to_external(NO_CLEAR,(char*)STRING_mensagem_pipocas_prontas[idioma],buffer_linha);  
   \   0000002A   0xAA00             ADD      R2,SP,#+0
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x....             LDR.N    R0,??DataTable5_8
   \   00000030   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       STRING_write_to_external
    296          }
   \   0000003A   0xB006             ADD      SP,SP,#+24
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    297          /**********************************************************************************
    298          *       Descrição       :       Verifica se o ventilador está funcionando
    299          *       Parametros      :       nenhum
    300          *       Retorno         :       (unsigned char) maior do que zero se conseguir
    301          *                               detectar o RPM do motor
    302          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    303          unsigned char PREPARACAO_verificaVentilador(void){
   \                     PREPARACAO_verificaVentilador:
   \   00000000   0xB510             PUSH     {R4,LR}
    304            unsigned short int tempo=50000;  
   \   00000002   0xF24C 0x3450      MOVW     R4,#+50000
    305            
    306            do{
    307              
    308              if(POTENCIA_getRPMmedido()>1000)
   \                     ??PREPARACAO_verificaVentilador_0:
   \   00000006   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000000E   0xD901             BLS.N    ??PREPARACAO_verificaVentilador_1
    309                return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE008             B.N      ??PREPARACAO_verificaVentilador_2
    310              else
    311                vTaskDelay(1);
   \                     ??PREPARACAO_verificaVentilador_1:
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       vTaskDelay
    312                  
    313            }
    314            while(tempo--);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x1E44             SUBS     R4,R0,#+1
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F0             BNE.N    ??PREPARACAO_verificaVentilador_0
    315            
    316            return 0; 
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verificaVentilador_2:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    317          }
    318          /**********************************************************************************
    319          *       Descrição       :       Faz a verificação do aquecimento da resistência
    320          *       Parametros      :       nenhum
    321          *       Retorno         :       (unsigned char) maior do que zero se 
    322          *                               conseguir aquecer a panela 2 graus em até 5 segundos
    323          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    324          unsigned char PREPARACAO_verifica_resistencia(void){
   \                     PREPARACAO_verifica_resistencia:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    325            unsigned int temperaturaInicial;
    326            unsigned short int tempo = 15000;
   \   00000002   0xF643 0x2598      MOVW     R5,#+15000
    327            
    328            temperaturaInicial = AA_calculaTemperatura();
   \   00000006   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000000A   0x0004             MOVS     R4,R0
    329            
    330            do{
    331              
    332              if(AA_calculaTemperatura()>(temperaturaInicial+2))
   \                     ??PREPARACAO_verifica_resistencia_0:
   \   0000000C   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000010   0x1CA1             ADDS     R1,R4,#+2
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xD201             BCS.N    ??PREPARACAO_verifica_resistencia_1
    333                return 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE008             B.N      ??PREPARACAO_verifica_resistencia_2
    334              else
    335                vTaskDelay(1);
   \                     ??PREPARACAO_verifica_resistencia_1:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       vTaskDelay
    336              
    337            }
    338            while(tempo--);
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x1E45             SUBS     R5,R0,#+1
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F0             BNE.N    ??PREPARACAO_verifica_resistencia_0
    339            
    340            return 0;  
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verifica_resistencia_2:
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    341          }
    342          /**********************************************************************************
    343          *       Descrição       :       Tela informativa do processo exibida
    344          *                               no display interno
    345          *       Parametros      :       nenhum
    346          *       Retorno         :       nenhum
    347          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    348          void PREPARACAO_tela_interna(void){
   \                     PREPARACAO_tela_interna:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    349            char buffer_linha[17];
    350            
    351            sprintf(buffer_linha,"%05d RPM-%03doC",POTENCIA_getRPMmedido(),AA_calculaTemperatura());
   \   00000004   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0023             MOVS     R3,R4
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x....             LDR.N    R1,??DataTable5_9
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       sprintf
    352            STRING_write_to_internal(NO_CLEAR,buffer_linha,NULL);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       STRING_write_to_internal
    353          }
   \   00000026   0xB006             ADD      SP,SP,#+24
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    354          /**********************************************************************************
    355          *       Descrição       :       Libera uma dose de milho na panela
    356          *       Parametros      :       nenhum
    357          *       Retorno         :       (unsigned char) maior do que zero
    358          *                               se conseguir dosar
    359          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    360          unsigned char PREPARACAO_dosagem_milho(void){
   \                     PREPARACAO_dosagem_milho:
   \   00000000   0xB510             PUSH     {R4,LR}
    361            unsigned char sensor_dose; 
    362            unsigned int tempo=2000; 
   \   00000002   0xF44F 0x64FA      MOV      R4,#+2000
    363            
    364            BOARD_set_motor_dose(DOSAR);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       BOARD_set_motor_dose
   \   0000000C   0xE002             B.N      ??PREPARACAO_dosagem_milho_0
    365            while(GET_SENSOR_DOSE() && tempo--)
    366              vTaskDelay(1);
   \                     ??PREPARACAO_dosagem_milho_1:
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       vTaskDelay
   \                     ??PREPARACAO_dosagem_milho_0:
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       BOARD_get_sinal
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??PREPARACAO_dosagem_milho_2
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x1E44             SUBS     R4,R0,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F3             BNE.N    ??PREPARACAO_dosagem_milho_1
    367            
    368            tempo = 15000;
   \                     ??PREPARACAO_dosagem_milho_2:
   \   00000026   0xF643 0x2498      MOVW     R4,#+15000
    369                  
    370            do{
    371              
    372              sensor_dose = GET_SENSOR_DOSE();  
   \                     ??PREPARACAO_dosagem_milho_3:
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x.... 0x....      BL       BOARD_get_sinal
    373              if(sensor_dose){
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD004             BEQ.N    ??PREPARACAO_dosagem_milho_4
    374                BOARD_set_motor_dose(PARADO);
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       BOARD_set_motor_dose
    375                return 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xE00A             B.N      ??PREPARACAO_dosagem_milho_5
    376              }
    377              else
    378                vTaskDelay(1);
   \                     ??PREPARACAO_dosagem_milho_4:
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       vTaskDelay
    379              
    380            }
    381            while(tempo--);
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x1E44             SUBS     R4,R0,#+1
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1ED             BNE.N    ??PREPARACAO_dosagem_milho_3
    382            
    383            BOARD_set_motor_dose(PARADO);  
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       BOARD_set_motor_dose
    384            //BOARD_set_motor_dose(DOSAR);          
    385            //BOARD_set_motor_dose(REVERTER);
    386            //BOARD_set_motor_dose(PARADO);
    387            
    388            return 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_dosagem_milho_5:
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    389          }
    390          /**********************************************************************************
    391          *       Descrição       :       Limpeza da panela e agradecimento pela
    392          *                               compra
    393          *       Parametros      :       nenhum
    394          *       Retorno         :       nenhum
    395          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    396          void PREPARACAO_limpeza(unsigned char idioma){
   \                     PREPARACAO_limpeza:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    397            
    398            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    399            POTENCIA_setRPM(13000);
   \   0000000A   0xF243 0x20C8      MOVW     R0,#+13000
   \   0000000E   0x.... 0x....      BL       POTENCIA_setRPM
    400            
    401            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza[idioma][0],(char*)STRING_mensagem_limpeza[idioma][1]);
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable5_10
   \   00000016   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   0000001A   0x6842             LDR      R2,[R0, #+4]
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable5_10
   \   00000020   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       STRING_write_to_external
    402            vTaskDelay(7000);
   \   0000002A   0xF641 0x3058      MOVW     R0,#+7000
   \   0000002E   0x.... 0x....      BL       vTaskDelay
    403            
    404            POTENCIA_setRPM(0);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       POTENCIA_setRPM
    405            POTENCIA_set_neutro(0);  
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       POTENCIA_set_neutro
    406          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    407          /**********************************************************************************
    408          *       Descrição       :       Resfriamento do sistema
    409          *       Parametros      :       nenhum
    410          *       Retorno         :       nenhum
    411          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    412          void PREPARACAO_resfriamento(unsigned char idioma){
   \                     PREPARACAO_resfriamento:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    413            
    414            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    415            vTaskDelay(500);  
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    416            POTENCIA_setRPM(6000);
   \   00000012   0xF241 0x7070      MOVW     R0,#+6000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    417            
    418            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_resfriando[idioma][0],
    419                                                   (char*)STRING_mensagem_resfriando[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_11
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_11
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    420            vTaskDelay(30000);
   \   00000032   0xF247 0x5030      MOVW     R0,#+30000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    421            
    422            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    423            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    424          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    425          /**********************************************************************************
    426          *       Descrição       :       Limpeza da panela e agradecimento pela
    427          *                               compra
    428          *       Parametros      :       nenhum
    429          *       Retorno         :       nenhum
    430          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    431          void PREPARACAO_limpeza_inicial(unsigned char idioma){
   \                     PREPARACAO_limpeza_inicial:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    432            
    433            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    434            vTaskDelay(500);
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    435            POTENCIA_setRPM(12000);
   \   00000012   0xF642 0x60E0      MOVW     R0,#+12000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    436            
    437            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza_inicial[idioma][0],(char*)STRING_mensagem_limpeza_inicial[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_12
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_12
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    438            vTaskDelay(7000);
   \   00000032   0xF641 0x3058      MOVW     R0,#+7000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    439            
    440            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    441            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    442          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     PREPARACAO_contador_compensacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     PREPARACAO_compensador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x0001D4C0         DC32     0x1d4c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     STRING_mensagem_inicio_preparacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     PREPARACAO_cnt_preparo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x00013880         DC32     0x13880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     PREPARACAO_cnt_rampa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "  %01d:%02d  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     STRING_mensagem_pipocas_prontas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `?<Constant "%05d RPM-%03doC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     STRING_mensagem_resfriando

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza_inicial

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %01d:%02d  ">`:
   \   00000000   0x20 0x20          DC8 "  %01d:%02d  "
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%05d RPM-%03doC">`:
   \   00000000   0x25 0x30          DC8 "%05d RPM-%03doC"
   \              0x35 0x64    
   \              0x20 0x52    
   \              0x50 0x4D    
   \              0x2D 0x25    
   \              0x30 0x33    
   \              0x64 0x6F    
   \              0x43 0x00    
    443          /**********************************************************************************
    444          *       Fim do arquivo
    445          **********************************************************************************/
    446          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   PREPARACAO_atualiza_info_tempo
        32   -> STRING_write_to_external
        32   -> sprintf
       8   PREPARACAO_dosagem_milho
         8   -> BOARD_get_sinal
         8   -> BOARD_set_motor_dose
         8   -> vTaskDelay
      40   PREPARACAO_entry
        40   -> AA_calculaTemperatura
        40   -> APLICACAO_tela_descanso
        40   -> BOARD_liga_placa_instrucao
        40   -> BOARD_setter_led_instrucao
        40   -> CT_set_temperatura
        40   -> EMBALAGEM_libera_pacote
        40   -> FATURAMENTO_add_arrecadacao_parcial
        40   -> FATURAMENTO_add_arrecadacao_total
        40   -> FATURAMENTO_add_contagem_parcial
        40   -> FATURAMENTO_add_contagem_total
        40   -> FATURAMENTO_inc_contador_pipocas_teste
        40   -> PAGAMENTOS_set_bloqueio
        40   -> PARAMETROS_le
        40   -> PLAYERWAVE_iniciaMusica
        40   -> PLAYERWAVE_verificaToque
        40   -> PLAYER_interrompeMusica
        40   -> POTENCIA_getRPMmedido
        40   -> POTENCIA_setRPM
        40   -> POTENCIA_set_neutro
        40   -> PREPARACAO_atualiza_info_tempo
        40   -> PREPARACAO_dosagem_milho
        40   -> PREPARACAO_limpeza
        40   -> PREPARACAO_tela_interna
        40   -> PREPARACAO_verificaVentilador
        40   -> STRING_write_to_external
        40   -> STRING_write_to_internal
        40   -> vTaskDelay
       8   PREPARACAO_limpeza
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_limpeza_inicial
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_resfriamento
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
      32   PREPARACAO_tela_interna
        32   -> AA_calculaTemperatura
        32   -> POTENCIA_getRPMmedido
        32   -> STRING_write_to_internal
        32   -> sprintf
       8   PREPARACAO_verificaVentilador
         8   -> POTENCIA_getRPMmedido
         8   -> vTaskDelay
      16   PREPARACAO_verifica_resistencia
        16   -> AA_calculaTemperatura
        16   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "  %01d:%02d  ">
      16  ?<Constant "%05d RPM-%03doC">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      62  PREPARACAO_atualiza_info_tempo
       4  PREPARACAO_cnt_preparo
       4  PREPARACAO_cnt_rampa
       4  PREPARACAO_compensador
       4  PREPARACAO_contador_compensacao
      88  PREPARACAO_dosagem_milho
     788  PREPARACAO_entry
      64  PREPARACAO_limpeza
      72  PREPARACAO_limpeza_inicial
      72  PREPARACAO_resfriamento
      42  PREPARACAO_tela_interna
      40  PREPARACAO_verificaVentilador
      46  PREPARACAO_verifica_resistencia

 
    16 bytes in section .bss
    32 bytes in section .rodata
 1 326 bytes in section .text
 
 1 326 bytes of CODE  memory
    32 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: 1

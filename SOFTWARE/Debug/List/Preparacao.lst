###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      12/Sep/2017  15:11:53 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparac #
#                    ao.c                                                     #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparac #
#                    ao.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Lis #
#                    t\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\ #
#                     -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\Prepara #
#                    cao.lst                                                  #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\Preparac #
#                    ao.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparacao.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Preparacao.c
     18          |       Descrição          :  Interface para a preparação da pipoca
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  22/04/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |                             (22/04/2017) Criado módulo que faz a preparação
     26          |                             da pipoca - Marcos
     27          |                    
     28          |
     29          |
     30          | __________________________________________________________________________________
     31          */
     32          
     33          /**********************************************************************************
     34          *       Includes
     35          **********************************************************************************/
     36          #include <stdio.h>
     37          #include <stdlib.h>
     38          #include <string.h>
     39          #include "..\includes.h"
     40          
     41          /**********************************************************************************
     42          *       Definições locais
     43          **********************************************************************************/
     44          #define TEMPO_PREPARO                   80*1000
     45          #define TEMPO_ABRIR_PACOTE              50*1000
     46          #define TEMPO_RAMPA                     3000
     47          #define THRESOLD_RESFRIAMENTO           1
     48          #define RELOAD_COMPENSADOR              2*60000 // 5 minutos
     49          /**********************************************************************************
     50          *       Constantes
     51          **********************************************************************************/
     52          
     53          
     54          /**********************************************************************************
     55          *       Variaveis locais
     56          **********************************************************************************/

   \                                 In section .bss, align 4
     57          unsigned int PREPARACAO_cnt_preparo=0;
   \                     PREPARACAO_cnt_preparo:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          unsigned int PREPARACAO_cnt_rampa=0;
   \                     PREPARACAO_cnt_rampa:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          unsigned int PREPARACAO_contador_compensacao=0;
   \                     PREPARACAO_contador_compensacao:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          unsigned int PREPARACAO_compensador=0;
   \                     PREPARACAO_compensador:
   \   00000000                      DS8 4
     61          
     62          /**********************************************************************************
     63          *       Funções locais
     64          **********************************************************************************/
     65          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo);
     66          unsigned char PREPARACAO_verificaVentilador(void);
     67          unsigned char PREPARACAO_verifica_resistencia(void);
     68          void PREPARACAO_tela_interna(void);
     69          unsigned char PREPARACAO_dosagem_milho(void);
     70          void PREPARACAO_resfriamento(unsigned char idioma);
     71          
     72          /**********************************************************************************
     73          *       Implementação das funções
     74          **********************************************************************************/
     75          
     76          /**********************************************************************************
     77          *       Descrição       :       Ponto de entrada do menu da interface para
     78          *                               preparação das pipocas
     79          *       Parametros      :       nenhum
     80          *       Retorno         :       nenhum
     81          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          ePREPARACAO_RESULT PREPARACAO_entry(unsigned int *ajuste_out,
     83                                              eCONTABILIZAR contabiliza){
   \                     PREPARACAO_entry:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     84            unsigned int temperatura_processo;
     85            unsigned int velocidade_processo;
     86            unsigned int tempo_embalagem;
     87            unsigned char idioma;
     88            unsigned char delta=0;
   \   00000008   0x2600             MOVS     R6,#+0
     89            unsigned int valor_pipoca;
     90            
     91            PAGAMENTOS_set_bloqueio(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       PAGAMENTOS_set_bloqueio
     92            
     93            PARAMETROS_le(ADR_FLAG_IDIOMA,(void*)&idioma);
   \   00000010   0xA901             ADD      R1,SP,#+4
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       PARAMETROS_le
     94            PARAMETROS_le(ADR_TEMPERATURA_PREPARACAO,(void*)&temperatura_processo);
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x201A             MOVS     R0,#+26
   \   0000001C   0x.... 0x....      BL       PARAMETROS_le
     95            PARAMETROS_le(ADR_VELOCIDADE_PREPARACAO,(void*)&velocidade_processo);
   \   00000020   0xA903             ADD      R1,SP,#+12
   \   00000022   0x201B             MOVS     R0,#+27
   \   00000024   0x.... 0x....      BL       PARAMETROS_le
     96            PARAMETROS_le(ADR_TEMPO_EMBALAGEM,(void*)&tempo_embalagem);
   \   00000028   0xA902             ADD      R1,SP,#+8
   \   0000002A   0x201C             MOVS     R0,#+28
   \   0000002C   0x.... 0x....      BL       PARAMETROS_le
     97            PARAMETROS_le(ADR_VALOR_PIPOCA,(void*)&valor_pipoca);  
   \   00000030   0xA904             ADD      R1,SP,#+16
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x.... 0x....      BL       PARAMETROS_le
     98          
     99            //-----------------------------------------------
    100            // Por falta de testes, deixei esse trecho abaixo
    101            // para garantir que funcionará mesmo que ocorra
    102            // uma falha na leitura da memória flash externa
    103            // Faz a consistência dos parametros
    104            //**********************************************
    105            if(temperatura_processo>170)
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x28AB             CMP      R0,#+171
   \   0000003C   0xD301             BCC.N    ??PREPARACAO_entry_0
    106              temperatura_processo = 85;
   \   0000003E   0x2055             MOVS     R0,#+85
   \   00000040   0x9000             STR      R0,[SP, #+0]
    107            if(velocidade_processo>8500)
   \                     ??PREPARACAO_entry_0:
   \   00000042   0x9803             LDR      R0,[SP, #+12]
   \   00000044   0xF242 0x1135      MOVW     R1,#+8501
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD302             BCC.N    ??PREPARACAO_entry_1
    108              velocidade_processo = 5700;
   \   0000004C   0xF241 0x6044      MOVW     R0,#+5700
   \   00000050   0x9003             STR      R0,[SP, #+12]
    109            if(tempo_embalagem>10000 || !tempo_embalagem)
   \                     ??PREPARACAO_entry_1:
   \   00000052   0x9802             LDR      R0,[SP, #+8]
   \   00000054   0xF242 0x7111      MOVW     R1,#+10001
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD202             BCS.N    ??PREPARACAO_entry_2
   \   0000005C   0x9802             LDR      R0,[SP, #+8]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD102             BNE.N    ??PREPARACAO_entry_3
    110              tempo_embalagem = 4200;
   \                     ??PREPARACAO_entry_2:
   \   00000062   0xF241 0x0068      MOVW     R0,#+4200
   \   00000066   0x9002             STR      R0,[SP, #+8]
    111            
    112            BOARD_setter_led_instrucao(LED_INSIRA_DINHEIRO,ACESO);
   \                     ??PREPARACAO_entry_3:
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x.... 0x....      BL       BOARD_setter_led_instrucao
    113                 
    114            //Faz o ajuste de compensação da panela
    115            //unsigned int ajuste = AA_calculaTemperatura();
    116            if(PREPARACAO_contador_compensacao){
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD00C             BEQ.N    ??PREPARACAO_entry_4
    117              if(PREPARACAO_compensador<5)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x2805             CMP      R0,#+5
   \   00000082   0xD213             BCS.N    ??PREPARACAO_entry_5
    118                PREPARACAO_compensador++;
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000090   0x6008             STR      R0,[R1, #+0]
   \   00000092   0xE00B             B.N      ??PREPARACAO_entry_5
    119            }
    120            else{
    121              if(PREPARACAO_compensador)
   \                     ??PREPARACAO_entry_4:
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD006             BEQ.N    ??PREPARACAO_entry_5
    122                PREPARACAO_compensador--;
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x1E40             SUBS     R0,R0,#+1
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    123            }
    124            
    125            PREPARACAO_contador_compensacao = RELOAD_COMPENSADOR;  
   \                     ??PREPARACAO_entry_5:
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable5
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x1d4c0
   \   000000B4   0x6001             STR      R1,[R0, #+0]
    126            
    127            temperatura_processo += PREPARACAO_compensador;
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000BC   0x6809             LDR      R1,[R1, #+0]
   \   000000BE   0x1808             ADDS     R0,R1,R0
   \   000000C0   0x9000             STR      R0,[SP, #+0]
    128            
    129            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000C2   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000CA   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000CE   0x6842             LDR      R2,[R0, #+4]
   \   000000D0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000D8   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x.... 0x....      BL       STRING_write_to_external
    130            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000E2   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000EA   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000EE   0x6842             LDR      R2,[R0, #+4]
   \   000000F0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000000F8   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x.... 0x....      BL       STRING_write_to_internal
    131            
    132            // Inicializa o PID de controle
    133            // da rotação do motor
    134            POTENCIA_set_neutro(1);
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       POTENCIA_set_neutro
    135            vTaskDelay(500);
   \   00000108   0xF44F 0x70FA      MOV      R0,#+500
   \   0000010C   0x.... 0x....      BL       vTaskDelay
    136            POTENCIA_setRPM(velocidade_processo);
   \   00000110   0x9803             LDR      R0,[SP, #+12]
   \   00000112   0x.... 0x....      BL       POTENCIA_setRPM
    137          
    138            PREPARACAO_cnt_preparo = TEMPO_PREPARO;  
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable5_5  ;; 0x13880
   \   0000011E   0x6001             STR      R1,[R0, #+0]
    139            // Faz a verificação do ventilador
    140            if(!PREPARACAO_verificaVentilador()){
   \   00000120   0x.... 0x....      BL       PREPARACAO_verificaVentilador
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD107             BNE.N    ??PREPARACAO_entry_6
    141              // Se não detectar o giro
    142              // desliga a parte de alta-tensão
    143              // e sinaliza o erro
    144              POTENCIA_setRPM(0);
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      BL       POTENCIA_setRPM
    145              POTENCIA_set_neutro(0);
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x.... 0x....      BL       POTENCIA_set_neutro
    146              return FALHA_VENTILADOR;
   \   00000134   0x2001             MOVS     R0,#+1
   \   00000136   0xE0E3             B.N      ??PREPARACAO_entry_7
    147            }
    148              
    149            // Inicia o controlador de temperatura
    150            CT_set_temperatura(temperatura_processo);
   \                     ??PREPARACAO_entry_6:
   \   00000138   0x9800             LDR      R0,[SP, #+0]
   \   0000013A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013C   0x.... 0x....      BL       CT_set_temperatura
    151            
    152            // Faz a verificação da resistência
    153            /*
    154            if(!PREPARACAO_verifica_resistencia()){
    155              POTENCIA_setRPM(0);
    156              POTENCIA_set_neutro(0);
    157              CT_set_temperatura(0);
    158              return FALHA_RESISTENCIA;        
    159            }
    160            */
    161            // Aguarda até a temperatura de início de processo
    162            // chegar ao valor da inicial
    163            unsigned int timeout=60000;
   \   00000140   0xF64E 0x2760      MOVW     R7,#+60000
    164            //do vTaskDelay(1);
    165            while(AA_calculaTemperatura()<temperatura_processo && --timeout){
   \                     ??PREPARACAO_entry_8:
   \   00000144   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000148   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014A   0x9900             LDR      R1,[SP, #+0]
   \   0000014C   0x4288             CMP      R0,R1
   \   0000014E   0xD208             BCS.N    ??PREPARACAO_entry_9
   \   00000150   0x1E7F             SUBS     R7,R7,#+1
   \   00000152   0x2F00             CMP      R7,#+0
   \   00000154   0xD005             BEQ.N    ??PREPARACAO_entry_9
    166              vTaskDelay(1);
   \   00000156   0x2001             MOVS     R0,#+1
   \   00000158   0x.... 0x....      BL       vTaskDelay
    167              APLICACAO_tela_descanso();
                     ^
Warning[Pe223]: function "APLICACAO_tela_descanso" declared implicitly
   \   0000015C   0x.... 0x....      BL       APLICACAO_tela_descanso
   \   00000160   0xE7F0             B.N      ??PREPARACAO_entry_8
    168            }
    169            
    170            if(!timeout){
   \                     ??PREPARACAO_entry_9:
   \   00000162   0x2F00             CMP      R7,#+0
   \   00000164   0xD10A             BNE.N    ??PREPARACAO_entry_10
    171              POTENCIA_setRPM(0);
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x.... 0x....      BL       POTENCIA_setRPM
    172              POTENCIA_set_neutro(0);
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x.... 0x....      BL       POTENCIA_set_neutro
    173              CT_set_temperatura(0);
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       CT_set_temperatura
    174              return FALHA_RESISTENCIA;   
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0xE0C1             B.N      ??PREPARACAO_entry_7
    175            }
    176            
    177            POTENCIA_setRPM(4000);
   \                     ??PREPARACAO_entry_10:
   \   0000017C   0xF44F 0x607A      MOV      R0,#+4000
   \   00000180   0x.... 0x....      BL       POTENCIA_setRPM
    178            while(POTENCIA_getRPMmedido()>4200);
   \                     ??PREPARACAO_entry_11:
   \   00000184   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   00000188   0xF241 0x0169      MOVW     R1,#+4201
   \   0000018C   0x4288             CMP      R0,R1
   \   0000018E   0xD2F9             BCS.N    ??PREPARACAO_entry_11
    179            
    180            if(!PREPARACAO_dosagem_milho()){
   \   00000190   0x.... 0x....      BL       PREPARACAO_dosagem_milho
   \   00000194   0x2800             CMP      R0,#+0
   \   00000196   0xD10A             BNE.N    ??PREPARACAO_entry_12
    181              POTENCIA_setRPM(0);
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       POTENCIA_setRPM
    182              POTENCIA_set_neutro(0);
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x.... 0x....      BL       POTENCIA_set_neutro
    183              CT_set_temperatura(0);
   \   000001A4   0x2000             MOVS     R0,#+0
   \   000001A6   0x.... 0x....      BL       CT_set_temperatura
    184              return FALHA_DOSE;     
   \   000001AA   0x2003             MOVS     R0,#+3
   \   000001AC   0xE0A8             B.N      ??PREPARACAO_entry_7
    185            }
    186            
    187            POTENCIA_setRPM(velocidade_processo);
   \                     ??PREPARACAO_entry_12:
   \   000001AE   0x9803             LDR      R0,[SP, #+12]
   \   000001B0   0x.... 0x....      BL       POTENCIA_setRPM
    188            
    189            BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,PISCANDO); // Indica na plac ade instrução para pegar a embalagem
   \   000001B4   0x2102             MOVS     R1,#+2
   \   000001B6   0x2003             MOVS     R0,#+3
   \   000001B8   0x.... 0x....      BL       BOARD_setter_led_instrucao
    190            //if(
    191            EMBALAGEM_libera_pacote(tempo_embalagem);//!=EMBALAGEM_LIBERADA);
   \   000001BC   0x9802             LDR      R0,[SP, #+8]
   \   000001BE   0x.... 0x....      BL       EMBALAGEM_libera_pacote
    192            //  POTENCIA_setRPM(0);
    193            //  POTENCIA_set_neutro(0);
    194            //  CT_set_temperatura(0);    
    195            //  return FALHA_EMBALAGEM;
    196            //}    
    197            
    198            PLAYERWAVE_iniciaMusica(AUDIO_PEGA_PACOTE,0);
   \   000001C2   0x2100             MOVS     R1,#+0
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    199            while(PLAYERWAVE_verificaToque());
   \                     ??PREPARACAO_entry_13:
   \   000001CA   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000001CE   0x2800             CMP      R0,#+0
   \   000001D0   0xD1FB             BNE.N    ??PREPARACAO_entry_13
    200           
    201            STRING_write_to_external(CLEAR_DISPLAY,NULL,NULL);
   \   000001D2   0x2200             MOVS     R2,#+0
   \   000001D4   0x2100             MOVS     R1,#+0
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x.... 0x....      BL       STRING_write_to_external
    202            STRING_write_to_internal(CLEAR_DISPLAY,NULL,NULL);
   \   000001DC   0x2200             MOVS     R2,#+0
   \   000001DE   0x2100             MOVS     R1,#+0
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      BL       STRING_write_to_internal
    203            PREPARACAO_cnt_rampa = TEMPO_RAMPA;
   \   000001E6   0x....             LDR.N    R0,??DataTable5_6
   \   000001E8   0xF640 0x31B8      MOVW     R1,#+3000
   \   000001EC   0x6001             STR      R1,[R0, #+0]
    204            PREPARACAO_cnt_preparo = TEMPO_PREPARO;
   \   000001EE   0x....             LDR.N    R0,??DataTable5_4
   \   000001F0   0x....             LDR.N    R1,??DataTable5_5  ;; 0x13880
   \   000001F2   0x6001             STR      R1,[R0, #+0]
    205            
    206            PLAYERWAVE_iniciaMusica(MUSICA_PREPARO,0);
   \   000001F4   0x2100             MOVS     R1,#+0
   \   000001F6   0x2001             MOVS     R0,#+1
   \   000001F8   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    207            //while(PLAYERWAVE_verificaToque());
    208            
    209            // Loop de preparação da pipoca
    210            for(;PREPARACAO_cnt_preparo;){
   \                     ??PREPARACAO_entry_14:
   \   000001FC   0x....             LDR.N    R0,??DataTable5_4
   \   000001FE   0x6800             LDR      R0,[R0, #+0]
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD041             BEQ.N    ??PREPARACAO_entry_15
    211              
    212              PREPARACAO_atualiza_info_tempo(idioma,PREPARACAO_cnt_preparo);    
   \   00000204   0x....             LDR.N    R0,??DataTable5_4
   \   00000206   0x6801             LDR      R1,[R0, #+0]
   \   00000208   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000020C   0x.... 0x....      BL       PREPARACAO_atualiza_info_tempo
    213              PREPARACAO_tela_interna();
   \   00000210   0x.... 0x....      BL       PREPARACAO_tela_interna
    214              
    215              // Falha no motor do ventilador
    216              if(POTENCIA_getRPMmedido()<1000){
   \   00000214   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   00000218   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000021C   0xD20A             BCS.N    ??PREPARACAO_entry_16
    217                POTENCIA_setRPM(0);
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0x.... 0x....      BL       POTENCIA_setRPM
    218                POTENCIA_set_neutro(0);
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x.... 0x....      BL       POTENCIA_set_neutro
    219                CT_set_temperatura(0);   
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x.... 0x....      BL       CT_set_temperatura
    220                return FALHA_VENTILADOR;
   \   00000230   0x2001             MOVS     R0,#+1
   \   00000232   0xE065             B.N      ??PREPARACAO_entry_7
    221              }
    222                  
    223              // Gera a rampa de aquecimento
    224              // na preparação da pipoca
    225              if(!PREPARACAO_cnt_rampa){
   \                     ??PREPARACAO_entry_16:
   \   00000234   0x....             LDR.N    R0,??DataTable5_6
   \   00000236   0x6800             LDR      R0,[R0, #+0]
   \   00000238   0x2800             CMP      R0,#+0
   \   0000023A   0xD10D             BNE.N    ??PREPARACAO_entry_17
    226                //temperatura_processo;
    227                if(delta<20)
   \   0000023C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000023E   0x2E14             CMP      R6,#+20
   \   00000240   0xDA00             BGE.N    ??PREPARACAO_entry_18
    228                  delta++;
   \   00000242   0x1C76             ADDS     R6,R6,#+1
    229                CT_set_temperatura(temperatura_processo+delta);
   \                     ??PREPARACAO_entry_18:
   \   00000244   0x9800             LDR      R0,[SP, #+0]
   \   00000246   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000248   0x1830             ADDS     R0,R6,R0
   \   0000024A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000024C   0x.... 0x....      BL       CT_set_temperatura
    230                PREPARACAO_cnt_rampa = TEMPO_RAMPA;
   \   00000250   0x....             LDR.N    R0,??DataTable5_6
   \   00000252   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000256   0x6001             STR      R1,[R0, #+0]
    231              }
    232              
    233              // Controle da placa de instrução
    234              // do usuário
    235              if(PREPARACAO_cnt_preparo>TEMPO_ABRIR_PACOTE){
   \                     ??PREPARACAO_entry_17:
   \   00000258   0x....             LDR.N    R0,??DataTable5_4
   \   0000025A   0x6800             LDR      R0,[R0, #+0]
   \   0000025C   0xF24C 0x3151      MOVW     R1,#+50001
   \   00000260   0x4288             CMP      R0,R1
   \   00000262   0xD308             BCC.N    ??PREPARACAO_entry_19
    236                 BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,ACESO);
   \   00000264   0x2101             MOVS     R1,#+1
   \   00000266   0x2003             MOVS     R0,#+3
   \   00000268   0x.... 0x....      BL       BOARD_setter_led_instrucao
    237                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,PISCANDO);
   \   0000026C   0x2102             MOVS     R1,#+2
   \   0000026E   0x2004             MOVS     R0,#+4
   \   00000270   0x.... 0x....      BL       BOARD_setter_led_instrucao
   \   00000274   0xE7C2             B.N      ??PREPARACAO_entry_14
    238              }
    239              else{
    240                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,ACESO);        
   \                     ??PREPARACAO_entry_19:
   \   00000276   0x2101             MOVS     R1,#+1
   \   00000278   0x2004             MOVS     R0,#+4
   \   0000027A   0x.... 0x....      BL       BOARD_setter_led_instrucao
    241                 BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,PISCANDO);         
   \   0000027E   0x2102             MOVS     R1,#+2
   \   00000280   0x2005             MOVS     R0,#+5
   \   00000282   0x.... 0x....      BL       BOARD_setter_led_instrucao
   \   00000286   0xE7B9             B.N      ??PREPARACAO_entry_14
    242              }
    243            }  
    244            
    245            BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,ACESO);
   \                     ??PREPARACAO_entry_15:
   \   00000288   0x2101             MOVS     R1,#+1
   \   0000028A   0x2005             MOVS     R0,#+5
   \   0000028C   0x.... 0x....      BL       BOARD_setter_led_instrucao
    246                
    247            // Desliga os controles
    248            // da potência
    249            POTENCIA_setRPM(0);
   \   00000290   0x2000             MOVS     R0,#+0
   \   00000292   0x.... 0x....      BL       POTENCIA_setRPM
    250            POTENCIA_set_neutro(0);
   \   00000296   0x2000             MOVS     R0,#+0
   \   00000298   0x.... 0x....      BL       POTENCIA_set_neutro
    251            CT_set_temperatura(0);
   \   0000029C   0x2000             MOVS     R0,#+0
   \   0000029E   0x.... 0x....      BL       CT_set_temperatura
    252            
    253            PREPARACAO_limpeza(idioma);
   \   000002A2   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000002A6   0x.... 0x....      BL       PREPARACAO_limpeza
    254            
    255            PLAYER_interrompeMusica();
   \   000002AA   0x.... 0x....      BL       PLAYER_interrompeMusica
    256            vTaskDelay(500);
   \   000002AE   0xF44F 0x70FA      MOV      R0,#+500
   \   000002B2   0x.... 0x....      BL       vTaskDelay
    257            PLAYERWAVE_iniciaMusica(AUDIO_PIPOCAS_PRONTAS,0);
   \   000002B6   0x2100             MOVS     R1,#+0
   \   000002B8   0x2002             MOVS     R0,#+2
   \   000002BA   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    258            while(PLAYERWAVE_verificaToque());  
   \                     ??PREPARACAO_entry_20:
   \   000002BE   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000002C2   0x2800             CMP      R0,#+0
   \   000002C4   0xD1FB             BNE.N    ??PREPARACAO_entry_20
    259            vTaskDelay(500); 
   \   000002C6   0xF44F 0x70FA      MOV      R0,#+500
   \   000002CA   0x.... 0x....      BL       vTaskDelay
    260            //-----------------------------------------------
    261            // Local para inserção dos dados no faturamento
    262            // e liberação do troco
    263            //-----------------------------------------------
    264            if(contabiliza==CONTABILIZA){
   \   000002CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D0   0x2D01             CMP      R5,#+1
   \   000002D2   0xD10C             BNE.N    ??PREPARACAO_entry_21
    265              // Só contabiliza as unidades vendidadas
    266              // quando houver necessidade
    267              FATURAMENTO_add_contagem_parcial(1);
   \   000002D4   0x2001             MOVS     R0,#+1
   \   000002D6   0x.... 0x....      BL       FATURAMENTO_add_contagem_parcial
    268              FATURAMENTO_add_arrecadacao_parcial(valor_pipoca);
   \   000002DA   0x9804             LDR      R0,[SP, #+16]
   \   000002DC   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_parcial
    269              FATURAMENTO_add_contagem_total(1);
   \   000002E0   0x2001             MOVS     R0,#+1
   \   000002E2   0x.... 0x....      BL       FATURAMENTO_add_contagem_total
    270              FATURAMENTO_add_arrecadacao_total(valor_pipoca);
   \   000002E6   0x9804             LDR      R0,[SP, #+16]
   \   000002E8   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_total
   \   000002EC   0xE001             B.N      ??PREPARACAO_entry_22
    271            }
    272            else
    273              FATURAMENTO_inc_contador_pipocas_teste();  
   \                     ??PREPARACAO_entry_21:
   \   000002EE   0x.... 0x....      BL       FATURAMENTO_inc_contador_pipocas_teste
    274           
    275            //----------------------------------------------
    276            // Fim da coleta dos dados de faturamento
    277            //----------------------------------------------   
    278            
    279            BOARD_liga_placa_instrucao(0);
   \                     ??PREPARACAO_entry_22:
   \   000002F2   0x2000             MOVS     R0,#+0
   \   000002F4   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    280            BOARD_liga_placa_instrucao(1);  
   \   000002F8   0x2001             MOVS     R0,#+1
   \   000002FA   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    281            
    282            //PAGAMENTOS_set_bloqueio(0);
    283            
    284            return SUCESSO;
   \   000002FE   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_entry_7:
   \   00000300   0xB005             ADD      SP,SP,#+20
   \   00000302   0xBDF0             POP      {R4-R7,PC}       ;; return
    285          }
    286          /**********************************************************************************
    287          *       Descrição       :       Atualiza o display frontal com o tempo restante
    288          *                               do processo de preparo
    289          *       Parametros      :       nenhum
    290          *       Retorno         :       nenhum
    291          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    292          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo){
   \                     PREPARACAO_atualiza_info_tempo:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    293            char buffer_linha[17];
    294            unsigned int minutos;
    295            unsigned int segundos;
    296            
    297            minutos  = PREPARACAO_cnt_preparo/1000;
   \   00000008   0x....             LDR.N    R0,??DataTable5_4
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000010   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000014   0x0006             MOVS     R6,R0
    298            segundos = minutos % 60;
   \   00000016   0x203C             MOVS     R0,#+60
   \   00000018   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   0000001C   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   00000020   0x0007             MOVS     R7,R0
    299            minutos  = minutos/60;
   \   00000022   0x203C             MOVS     R0,#+60
   \   00000024   0xFBB6 0xF6F0      UDIV     R6,R6,R0
    300            
    301            sprintf(buffer_linha,"  %01d:%02d  ",minutos,segundos);
   \   00000028   0x003B             MOVS     R3,R7
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0x....             LDR.N    R1,??DataTable5_7
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x.... 0x....      BL       sprintf
    302            STRING_write_to_external(NO_CLEAR,(char*)STRING_mensagem_pipocas_prontas[idioma],buffer_linha);  
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x....             LDR.N    R0,??DataTable5_8
   \   0000003A   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       STRING_write_to_external
    303          }
   \   00000044   0xB005             ADD      SP,SP,#+20
   \   00000046   0xBDF0             POP      {R4-R7,PC}       ;; return
    304          /**********************************************************************************
    305          *       Descrição       :       Verifica se o ventilador está funcionando
    306          *       Parametros      :       nenhum
    307          *       Retorno         :       (unsigned char) maior do que zero se conseguir
    308          *                               detectar o RPM do motor
    309          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          unsigned char PREPARACAO_verificaVentilador(void){
   \                     PREPARACAO_verificaVentilador:
   \   00000000   0xB510             PUSH     {R4,LR}
    311            unsigned short int tempo=50000;  
   \   00000002   0xF24C 0x3450      MOVW     R4,#+50000
    312            
    313            do{
    314              
    315              if(POTENCIA_getRPMmedido()>1000)
   \                     ??PREPARACAO_verificaVentilador_0:
   \   00000006   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000000E   0xD901             BLS.N    ??PREPARACAO_verificaVentilador_1
    316                return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE008             B.N      ??PREPARACAO_verificaVentilador_2
    317              else
    318                vTaskDelay(1);
   \                     ??PREPARACAO_verificaVentilador_1:
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       vTaskDelay
    319                  
    320            }
    321            while(tempo--);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x1E44             SUBS     R4,R0,#+1
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F0             BNE.N    ??PREPARACAO_verificaVentilador_0
    322            
    323            return 0; 
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verificaVentilador_2:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    324          }
    325          /**********************************************************************************
    326          *       Descrição       :       Faz a verificação do aquecimento da resistência
    327          *       Parametros      :       nenhum
    328          *       Retorno         :       (unsigned char) maior do que zero se 
    329          *                               conseguir aquecer a panela 2 graus em até 5 segundos
    330          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    331          unsigned char PREPARACAO_verifica_resistencia(void){
   \                     PREPARACAO_verifica_resistencia:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    332            unsigned int temperaturaInicial;
    333            unsigned short int tempo = 15000;
   \   00000002   0xF643 0x2598      MOVW     R5,#+15000
    334            
    335            temperaturaInicial = AA_calculaTemperatura();
   \   00000006   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000000A   0x0004             MOVS     R4,R0
    336            
    337            do{
    338              
    339              if(AA_calculaTemperatura()>(temperaturaInicial+2))
   \                     ??PREPARACAO_verifica_resistencia_0:
   \   0000000C   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000010   0x1CA1             ADDS     R1,R4,#+2
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xD201             BCS.N    ??PREPARACAO_verifica_resistencia_1
    340                return 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE008             B.N      ??PREPARACAO_verifica_resistencia_2
    341              else
    342                vTaskDelay(1);
   \                     ??PREPARACAO_verifica_resistencia_1:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       vTaskDelay
    343              
    344            }
    345            while(tempo--);
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x1E45             SUBS     R5,R0,#+1
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F0             BNE.N    ??PREPARACAO_verifica_resistencia_0
    346            
    347            return 0;  
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verifica_resistencia_2:
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    348          }
    349          /**********************************************************************************
    350          *       Descrição       :       Tela informativa do processo exibida
    351          *                               no display interno
    352          *       Parametros      :       nenhum
    353          *       Retorno         :       nenhum
    354          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    355          void PREPARACAO_tela_interna(void){
   \                     PREPARACAO_tela_interna:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    356            char buffer_linha[17];
    357            
    358            sprintf(buffer_linha,"%05d RPM-%03doC",POTENCIA_getRPMmedido(),AA_calculaTemperatura());
   \   00000004   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0023             MOVS     R3,R4
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x....             LDR.N    R1,??DataTable5_9
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       sprintf
    359            STRING_write_to_internal(NO_CLEAR,buffer_linha,NULL);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       STRING_write_to_internal
    360          }
   \   00000026   0xB006             ADD      SP,SP,#+24
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    361          /**********************************************************************************
    362          *       Descrição       :       Libera uma dose de milho na panela
    363          *       Parametros      :       nenhum
    364          *       Retorno         :       (unsigned char) maior do que zero
    365          *                               se conseguir dosar
    366          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    367          unsigned char PREPARACAO_dosagem_milho(void){
   \                     PREPARACAO_dosagem_milho:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    368            unsigned char sensor_dose; 
    369            unsigned int tempo=2000; 
   \   00000002   0xF44F 0x65FA      MOV      R5,#+2000
    370            
    371            BOARD_set_motor_dose(DOSAR);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       BOARD_set_motor_dose
    372            while(GET_SENSOR_DOSE() && tempo--)
   \                     ??PREPARACAO_dosagem_milho_0:
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       BOARD_get_sinal
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD007             BEQ.N    ??PREPARACAO_dosagem_milho_1
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x1E45             SUBS     R5,R0,#+1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??PREPARACAO_dosagem_milho_1
    373              vTaskDelay(1);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       vTaskDelay
   \   00000024   0xE7F2             B.N      ??PREPARACAO_dosagem_milho_0
    374            
    375            tempo = 15000;
   \                     ??PREPARACAO_dosagem_milho_1:
   \   00000026   0xF643 0x2098      MOVW     R0,#+15000
   \   0000002A   0x0005             MOVS     R5,R0
    376                  
    377            do{
    378              
    379              sensor_dose = GET_SENSOR_DOSE();  
   \                     ??PREPARACAO_dosagem_milho_2:
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       BOARD_get_sinal
   \   00000032   0x0004             MOVS     R4,R0
    380              if(sensor_dose){
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD004             BEQ.N    ??PREPARACAO_dosagem_milho_3
    381                BOARD_set_motor_dose(PARADO);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       BOARD_set_motor_dose
    382                return 1;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xE00A             B.N      ??PREPARACAO_dosagem_milho_4
    383              }
    384              else
    385                vTaskDelay(1);
   \                     ??PREPARACAO_dosagem_milho_3:
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       vTaskDelay
    386              
    387            }
    388            while(tempo--);
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x1E45             SUBS     R5,R0,#+1
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1EC             BNE.N    ??PREPARACAO_dosagem_milho_2
    389            
    390            BOARD_set_motor_dose(PARADO);  
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       BOARD_set_motor_dose
    391            //BOARD_set_motor_dose(DOSAR);          
    392            //BOARD_set_motor_dose(REVERTER);
    393            //BOARD_set_motor_dose(PARADO);
    394            
    395            return 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_dosagem_milho_4:
   \   0000005A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    396          }
    397          /**********************************************************************************
    398          *       Descrição       :       Limpeza da panela e agradecimento pela
    399          *                               compra
    400          *       Parametros      :       nenhum
    401          *       Retorno         :       nenhum
    402          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    403          void PREPARACAO_limpeza(unsigned char idioma){
   \                     PREPARACAO_limpeza:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    404            
    405            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    406            POTENCIA_setRPM(13000);
   \   0000000A   0xF243 0x20C8      MOVW     R0,#+13000
   \   0000000E   0x.... 0x....      BL       POTENCIA_setRPM
    407            
    408            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza[idioma][0],(char*)STRING_mensagem_limpeza[idioma][1]);
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable5_10
   \   00000016   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   0000001A   0x6842             LDR      R2,[R0, #+4]
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable5_10
   \   00000020   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       STRING_write_to_external
    409            vTaskDelay(7000);
   \   0000002A   0xF641 0x3058      MOVW     R0,#+7000
   \   0000002E   0x.... 0x....      BL       vTaskDelay
    410            
    411            POTENCIA_setRPM(0);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       POTENCIA_setRPM
    412            POTENCIA_set_neutro(0);  
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       POTENCIA_set_neutro
    413          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    414          /**********************************************************************************
    415          *       Descrição       :       Resfriamento do sistema
    416          *       Parametros      :       nenhum
    417          *       Retorno         :       nenhum
    418          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    419          void PREPARACAO_resfriamento(unsigned char idioma){
   \                     PREPARACAO_resfriamento:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    420            
    421            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    422            vTaskDelay(500);  
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    423            POTENCIA_setRPM(6000);
   \   00000012   0xF241 0x7070      MOVW     R0,#+6000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    424            
    425            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_resfriando[idioma][0],
    426                                                   (char*)STRING_mensagem_resfriando[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_11
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_11
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    427            vTaskDelay(30000);
   \   00000032   0xF247 0x5030      MOVW     R0,#+30000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    428            
    429            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    430            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    431          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    432          /**********************************************************************************
    433          *       Descrição       :       Limpeza da panela e agradecimento pela
    434          *                               compra
    435          *       Parametros      :       nenhum
    436          *       Retorno         :       nenhum
    437          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    438          void PREPARACAO_limpeza_inicial(unsigned char idioma){
   \                     PREPARACAO_limpeza_inicial:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    439            
    440            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    441            vTaskDelay(500);
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    442            POTENCIA_setRPM(12000);
   \   00000012   0xF642 0x60E0      MOVW     R0,#+12000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    443            
    444            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza_inicial[idioma][0],(char*)STRING_mensagem_limpeza_inicial[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_12
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_12
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    445            vTaskDelay(7000);
   \   00000032   0xF641 0x3058      MOVW     R0,#+7000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    446            
    447            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    448            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    449          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     PREPARACAO_contador_compensacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     PREPARACAO_compensador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x0001D4C0         DC32     0x1d4c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     STRING_mensagem_inicio_preparacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     PREPARACAO_cnt_preparo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x00013880         DC32     0x13880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     PREPARACAO_cnt_rampa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "  %01d:%02d  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     STRING_mensagem_pipocas_prontas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `?<Constant "%05d RPM-%03doC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     STRING_mensagem_resfriando

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza_inicial

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %01d:%02d  ">`:
   \   00000000   0x20 0x20          DC8 "  %01d:%02d  "
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%05d RPM-%03doC">`:
   \   00000000   0x25 0x30          DC8 "%05d RPM-%03doC"
   \              0x35 0x64    
   \              0x20 0x52    
   \              0x50 0x4D    
   \              0x2D 0x25    
   \              0x30 0x33    
   \              0x64 0x6F    
   \              0x43 0x00    
    450          /**********************************************************************************
    451          *       Fim do arquivo
    452          **********************************************************************************/
    453          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   PREPARACAO_atualiza_info_tempo
        40   -> STRING_write_to_external
        40   -> sprintf
      16   PREPARACAO_dosagem_milho
        16   -> BOARD_get_sinal
        16   -> BOARD_set_motor_dose
        16   -> vTaskDelay
      40   PREPARACAO_entry
        40   -> AA_calculaTemperatura
        40   -> APLICACAO_tela_descanso
        40   -> BOARD_liga_placa_instrucao
        40   -> BOARD_setter_led_instrucao
        40   -> CT_set_temperatura
        40   -> EMBALAGEM_libera_pacote
        40   -> FATURAMENTO_add_arrecadacao_parcial
        40   -> FATURAMENTO_add_arrecadacao_total
        40   -> FATURAMENTO_add_contagem_parcial
        40   -> FATURAMENTO_add_contagem_total
        40   -> FATURAMENTO_inc_contador_pipocas_teste
        40   -> PAGAMENTOS_set_bloqueio
        40   -> PARAMETROS_le
        40   -> PLAYERWAVE_iniciaMusica
        40   -> PLAYERWAVE_verificaToque
        40   -> PLAYER_interrompeMusica
        40   -> POTENCIA_getRPMmedido
        40   -> POTENCIA_setRPM
        40   -> POTENCIA_set_neutro
        40   -> PREPARACAO_atualiza_info_tempo
        40   -> PREPARACAO_dosagem_milho
        40   -> PREPARACAO_limpeza
        40   -> PREPARACAO_tela_interna
        40   -> PREPARACAO_verificaVentilador
        40   -> STRING_write_to_external
        40   -> STRING_write_to_internal
        40   -> vTaskDelay
       8   PREPARACAO_limpeza
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_limpeza_inicial
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_resfriamento
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
      32   PREPARACAO_tela_interna
        32   -> AA_calculaTemperatura
        32   -> POTENCIA_getRPMmedido
        32   -> STRING_write_to_internal
        32   -> sprintf
       8   PREPARACAO_verificaVentilador
         8   -> POTENCIA_getRPMmedido
         8   -> vTaskDelay
      16   PREPARACAO_verifica_resistencia
        16   -> AA_calculaTemperatura
        16   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "  %01d:%02d  ">
      16  ?<Constant "%05d RPM-%03doC">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      72  PREPARACAO_atualiza_info_tempo
       4  PREPARACAO_cnt_preparo
       4  PREPARACAO_cnt_rampa
       4  PREPARACAO_compensador
       4  PREPARACAO_contador_compensacao
      92  PREPARACAO_dosagem_milho
     772  PREPARACAO_entry
      64  PREPARACAO_limpeza
      72  PREPARACAO_limpeza_inicial
      72  PREPARACAO_resfriamento
      42  PREPARACAO_tela_interna
      40  PREPARACAO_verificaVentilador
      46  PREPARACAO_verifica_resistencia

 
    16 bytes in section .bss
    32 bytes in section .rodata
 1 324 bytes in section .text
 
 1 324 bytes of CODE  memory
    32 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: 1

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  18:10:09 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparac #
#                    ao.c                                                     #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparac #
#                    ao.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Lis #
#                    t\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\ #
#                     -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\     #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\Prepara #
#                    cao.lst                                                  #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\Preparac #
#                    ao.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\Preparacao.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  Preparacao.c
     18          |       Descrição          :  Interface para a preparação da pipoca
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  22/04/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |                             (22/04/2017) Criado módulo que faz a preparação
     26          |                             da pipoca - Marcos
     27          |                    
     28          |
     29          |
     30          | __________________________________________________________________________________
     31          */
     32          
     33          /**********************************************************************************
     34          *       Includes
     35          **********************************************************************************/
     36          #include <stdio.h>
     37          #include <stdlib.h>
     38          #include <string.h>
     39          #include "..\includes.h"
     40          
     41          /**********************************************************************************
     42          *       Definições locais
     43          **********************************************************************************/
     44          #define TEMPO_PREPARO                   80*1000
     45          #define TEMPO_ABRIR_PACOTE              50*1000
     46          #define TEMPO_RAMPA                     3000
     47          #define THRESOLD_RESFRIAMENTO           1
     48          #define RELOAD_COMPENSADOR              5*60000 // 5 minutos
     49          /**********************************************************************************
     50          *       Constantes
     51          **********************************************************************************/
     52          
     53          
     54          /**********************************************************************************
     55          *       Variaveis locais
     56          **********************************************************************************/

   \                                 In section .bss, align 4
     57          unsigned int PREPARACAO_cnt_preparo=0;
   \                     PREPARACAO_cnt_preparo:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          unsigned int PREPARACAO_cnt_rampa=0;
   \                     PREPARACAO_cnt_rampa:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          unsigned int PREPARACAO_contador_compensacao=0;
   \                     PREPARACAO_contador_compensacao:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          unsigned int PREPARACAO_compensador=0;
   \                     PREPARACAO_compensador:
   \   00000000                      DS8 4
     61          
     62          /**********************************************************************************
     63          *       Funções locais
     64          **********************************************************************************/
     65          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo);
     66          unsigned char PREPARACAO_verificaVentilador(void);
     67          unsigned char PREPARACAO_verifica_resistencia(void);
     68          void PREPARACAO_tela_interna(void);
     69          unsigned char PREPARACAO_dosagem_milho(void);
     70          void PREPARACAO_resfriamento(unsigned char idioma);
     71          
     72          /**********************************************************************************
     73          *       Implementação das funções
     74          **********************************************************************************/
     75          
     76          /**********************************************************************************
     77          *       Descrição       :       Ponto de entrada do menu da interface para
     78          *                               preparação das pipocas
     79          *       Parametros      :       nenhum
     80          *       Retorno         :       nenhum
     81          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          ePREPARACAO_RESULT PREPARACAO_entry(unsigned int *ajuste_out,
     83                                              eCONTABILIZAR contabiliza){
   \                     PREPARACAO_entry:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     84            unsigned int temperatura_processo;
     85            unsigned int velocidade_processo;
     86            unsigned int tempo_embalagem;
     87            unsigned char idioma;
     88            unsigned char delta=0;
   \   00000008   0x2600             MOVS     R6,#+0
     89            unsigned int valor_pipoca;
     90            unsigned char flag_correcao_erro;
     91            unsigned int compensador;
     92            
     93            PAGAMENTOS_set_bloqueio(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       PAGAMENTOS_set_bloqueio
     94            
     95            PARAMETROS_le(ADR_FLAG_IDIOMA,(void*)&idioma);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       PARAMETROS_le
     96            PARAMETROS_le(ADR_TEMPERATURA_PREPARACAO,(void*)&temperatura_processo);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x201A             MOVS     R0,#+26
   \   0000001C   0x.... 0x....      BL       PARAMETROS_le
     97            PARAMETROS_le(ADR_VELOCIDADE_PREPARACAO,(void*)&velocidade_processo);
   \   00000020   0xA903             ADD      R1,SP,#+12
   \   00000022   0x201B             MOVS     R0,#+27
   \   00000024   0x.... 0x....      BL       PARAMETROS_le
     98            PARAMETROS_le(ADR_TEMPO_EMBALAGEM,(void*)&tempo_embalagem);
   \   00000028   0xA904             ADD      R1,SP,#+16
   \   0000002A   0x201C             MOVS     R0,#+28
   \   0000002C   0x.... 0x....      BL       PARAMETROS_le
     99            PARAMETROS_le(ADR_VALOR_PIPOCA,(void*)&valor_pipoca);  
   \   00000030   0xA905             ADD      R1,SP,#+20
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x.... 0x....      BL       PARAMETROS_le
    100            PARAMETROS_le(ADR_COMPENSADOR_ERRO_ROTACAO,(void*)&flag_correcao_erro);    
   \   00000038   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000003C   0x2041             MOVS     R0,#+65
   \   0000003E   0x.... 0x....      BL       PARAMETROS_le
    101            PARAMETROS_le(ADR_FATOR_COMPENSADOR,(void*)&compensador);
   \   00000042   0xA902             ADD      R1,SP,#+8
   \   00000044   0x2042             MOVS     R0,#+66
   \   00000046   0x.... 0x....      BL       PARAMETROS_le
    102          
    103            //-----------------------------------------------
    104            // Por falta de testes, deixei esse trecho abaixo
    105            // para garantir que funcionará mesmo que ocorra
    106            // uma falha na leitura da memória flash externa
    107            // Faz a consistência dos parametros
    108            //**********************************************
    109            if(temperatura_processo>170)
   \   0000004A   0x9801             LDR      R0,[SP, #+4]
   \   0000004C   0x28AB             CMP      R0,#+171
   \   0000004E   0xD301             BCC.N    ??PREPARACAO_entry_0
    110              temperatura_processo = 85;
   \   00000050   0x2055             MOVS     R0,#+85
   \   00000052   0x9001             STR      R0,[SP, #+4]
    111            if(velocidade_processo>8500)
   \                     ??PREPARACAO_entry_0:
   \   00000054   0x9803             LDR      R0,[SP, #+12]
   \   00000056   0xF242 0x1135      MOVW     R1,#+8501
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xD302             BCC.N    ??PREPARACAO_entry_1
    112              velocidade_processo = 5700;
   \   0000005E   0xF241 0x6044      MOVW     R0,#+5700
   \   00000062   0x9003             STR      R0,[SP, #+12]
    113            if(tempo_embalagem>10000 || !tempo_embalagem)
   \                     ??PREPARACAO_entry_1:
   \   00000064   0x9804             LDR      R0,[SP, #+16]
   \   00000066   0xF242 0x7111      MOVW     R1,#+10001
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD202             BCS.N    ??PREPARACAO_entry_2
   \   0000006E   0x9804             LDR      R0,[SP, #+16]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD102             BNE.N    ??PREPARACAO_entry_3
    114              tempo_embalagem = 4200;
   \                     ??PREPARACAO_entry_2:
   \   00000074   0xF241 0x0068      MOVW     R0,#+4200
   \   00000078   0x9004             STR      R0,[SP, #+16]
    115            
    116            BOARD_setter_led_instrucao(LED_INSIRA_DINHEIRO,ACESO);
   \                     ??PREPARACAO_entry_3:
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x.... 0x....      BL       BOARD_setter_led_instrucao
    117                 
    118            if(!compensador)
   \   00000082   0x9802             LDR      R0,[SP, #+8]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD101             BNE.N    ??PREPARACAO_entry_4
    119              compensador=1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x9002             STR      R0,[SP, #+8]
    120            if(compensador>3)
   \                     ??PREPARACAO_entry_4:
   \   0000008C   0x9802             LDR      R0,[SP, #+8]
   \   0000008E   0x2804             CMP      R0,#+4
   \   00000090   0xD301             BCC.N    ??PREPARACAO_entry_5
    121              compensador=3;    
   \   00000092   0x2003             MOVS     R0,#+3
   \   00000094   0x9002             STR      R0,[SP, #+8]
    122            
    123            temperatura_processo += PREPARACAO_compensador;
   \                     ??PREPARACAO_entry_5:
   \   00000096   0x9801             LDR      R0,[SP, #+4]
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0x1808             ADDS     R0,R1,R0
   \   000000A0   0x9001             STR      R0,[SP, #+4]
    124            
    125            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000A2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000AA   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000AE   0x6842             LDR      R2,[R0, #+4]
   \   000000B0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000B8   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      BL       STRING_write_to_external
    126            STRING_write_to_internal(CLEAR_DISPLAY,(char*)STRING_mensagem_inicio_preparacao[idioma][0],(char*)STRING_mensagem_inicio_preparacao[idioma][1]);
   \   000000C2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000CA   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   000000CE   0x6842             LDR      R2,[R0, #+4]
   \   000000D0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   000000D8   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x.... 0x....      BL       STRING_write_to_internal
    127            
    128            // Inicializa o PID de controle
    129            // da rotação do motor
    130            POTENCIA_set_neutro(1);
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x.... 0x....      BL       POTENCIA_set_neutro
    131            vTaskDelay(500);
   \   000000E8   0xF44F 0x70FA      MOV      R0,#+500
   \   000000EC   0x.... 0x....      BL       vTaskDelay
    132            if(flag_correcao_erro)
   \   000000F0   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD004             BEQ.N    ??PREPARACAO_entry_6
    133              POTENCIA_setRPM(2500);
   \   000000F8   0xF640 0x10C4      MOVW     R0,#+2500
   \   000000FC   0x.... 0x....      BL       POTENCIA_setRPM
   \   00000100   0xE003             B.N      ??PREPARACAO_entry_7
    134            else
    135              POTENCIA_setRPM(4000);
   \                     ??PREPARACAO_entry_6:
   \   00000102   0xF44F 0x607A      MOV      R0,#+4000
   \   00000106   0x.... 0x....      BL       POTENCIA_setRPM
    136          
    137            PREPARACAO_cnt_preparo = TEMPO_PREPARO;  
   \                     ??PREPARACAO_entry_7:
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x13880
   \   00000112   0x6001             STR      R1,[R0, #+0]
    138            // Faz a verificação do ventilador
    139            if(!PREPARACAO_verificaVentilador()){
   \   00000114   0x.... 0x....      BL       PREPARACAO_verificaVentilador
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD107             BNE.N    ??PREPARACAO_entry_8
    140              // Se não detectar o giro
    141              // desliga a parte de alta-tensão
    142              // e sinaliza o erro
    143              POTENCIA_setRPM(0);
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x.... 0x....      BL       POTENCIA_setRPM
    144              POTENCIA_set_neutro(0);
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x.... 0x....      BL       POTENCIA_set_neutro
    145              return FALHA_VENTILADOR;
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0xE0FE             B.N      ??PREPARACAO_entry_9
    146            }
    147              
    148            // Inicia o controlador de temperatura
    149            CT_set_temperatura(temperatura_processo);
   \                     ??PREPARACAO_entry_8:
   \   0000012C   0x9801             LDR      R0,[SP, #+4]
   \   0000012E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000130   0x.... 0x....      BL       CT_set_temperatura
    150            
    151            // Aguarda até a temperatura de início de processo
    152            // chegar ao valor da inicial
    153            unsigned int timeout=60000;
   \   00000134   0xF64E 0x2760      MOVW     R7,#+60000
    154            //do vTaskDelay(1);
    155            while(AA_calculaTemperatura()<temperatura_processo && --timeout){
   \                     ??PREPARACAO_entry_10:
   \   00000138   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000013C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013E   0x9901             LDR      R1,[SP, #+4]
   \   00000140   0x4288             CMP      R0,R1
   \   00000142   0xD208             BCS.N    ??PREPARACAO_entry_11
   \   00000144   0x1E7F             SUBS     R7,R7,#+1
   \   00000146   0x2F00             CMP      R7,#+0
   \   00000148   0xD005             BEQ.N    ??PREPARACAO_entry_11
    156              vTaskDelay(1);
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x.... 0x....      BL       vTaskDelay
    157              APLICACAO_tela_descanso();
                     ^
Warning[Pe223]: function "APLICACAO_tela_descanso" declared implicitly
   \   00000150   0x.... 0x....      BL       APLICACAO_tela_descanso
   \   00000154   0xE7F0             B.N      ??PREPARACAO_entry_10
    158            }  
    159            
    160            if(!timeout){
   \                     ??PREPARACAO_entry_11:
   \   00000156   0x2F00             CMP      R7,#+0
   \   00000158   0xD10A             BNE.N    ??PREPARACAO_entry_12
    161              POTENCIA_setRPM(0);
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x.... 0x....      BL       POTENCIA_setRPM
    162              POTENCIA_set_neutro(0);
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x.... 0x....      BL       POTENCIA_set_neutro
    163              CT_set_temperatura(0);
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x.... 0x....      BL       CT_set_temperatura
    164              return FALHA_RESISTENCIA;   
   \   0000016C   0x2002             MOVS     R0,#+2
   \   0000016E   0xE0DC             B.N      ??PREPARACAO_entry_9
    165            }  
    166            
    167            if(!PREPARACAO_dosagem_milho()){
   \                     ??PREPARACAO_entry_12:
   \   00000170   0x.... 0x....      BL       PREPARACAO_dosagem_milho
   \   00000174   0x2800             CMP      R0,#+0
   \   00000176   0xD10A             BNE.N    ??PREPARACAO_entry_13
    168              POTENCIA_setRPM(0);
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x.... 0x....      BL       POTENCIA_setRPM
    169              POTENCIA_set_neutro(0);
   \   0000017E   0x2000             MOVS     R0,#+0
   \   00000180   0x.... 0x....      BL       POTENCIA_set_neutro
    170              CT_set_temperatura(0);
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0x.... 0x....      BL       CT_set_temperatura
    171              return FALHA_DOSE;     
   \   0000018A   0x2003             MOVS     R0,#+3
   \   0000018C   0xE0CD             B.N      ??PREPARACAO_entry_9
    172            }
    173            
    174            POTENCIA_setRPM(velocidade_processo);
   \                     ??PREPARACAO_entry_13:
   \   0000018E   0x9803             LDR      R0,[SP, #+12]
   \   00000190   0x.... 0x....      BL       POTENCIA_setRPM
    175            if(flag_correcao_erro)
   \   00000194   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD005             BEQ.N    ??PREPARACAO_entry_14
    176              while(POTENCIA_getRPMmedido()<velocidade_processo);
   \                     ??PREPARACAO_entry_15:
   \   0000019C   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000001A0   0x9903             LDR      R1,[SP, #+12]
   \   000001A2   0x4288             CMP      R0,R1
   \   000001A4   0xD207             BCS.N    ??PREPARACAO_entry_16
   \   000001A6   0xE7F9             B.N      ??PREPARACAO_entry_15
    177            else
    178              while(POTENCIA_getRPMmedido()<(velocidade_processo-1000));
   \                     ??PREPARACAO_entry_14:
   \   000001A8   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   000001AC   0x9903             LDR      R1,[SP, #+12]
   \   000001AE   0xF5B1 0x717A      SUBS     R1,R1,#+1000
   \   000001B2   0x4288             CMP      R0,R1
   \   000001B4   0xD3F8             BCC.N    ??PREPARACAO_entry_14
    179            
    180            BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,PISCANDO); // Indica na plac ade instrução para pegar a embalagem
   \                     ??PREPARACAO_entry_16:
   \   000001B6   0x2102             MOVS     R1,#+2
   \   000001B8   0x2003             MOVS     R0,#+3
   \   000001BA   0x.... 0x....      BL       BOARD_setter_led_instrucao
    181            //if(
    182            EMBALAGEM_libera_pacote(tempo_embalagem);//!=EMBALAGEM_LIBERADA);
   \   000001BE   0x9804             LDR      R0,[SP, #+16]
   \   000001C0   0x.... 0x....      BL       EMBALAGEM_libera_pacote
    183            //  POTENCIA_setRPM(0);
    184            //  POTENCIA_set_neutro(0);
    185            //  CT_set_temperatura(0);    
    186            //  return FALHA_EMBALAGEM;
    187            //}    
    188            
    189            PLAYERWAVE_iniciaMusica(AUDIO_PEGA_PACOTE,0);
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0x2000             MOVS     R0,#+0
   \   000001C8   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    190            while(PLAYERWAVE_verificaToque());
   \                     ??PREPARACAO_entry_17:
   \   000001CC   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000001D0   0x2800             CMP      R0,#+0
   \   000001D2   0xD1FB             BNE.N    ??PREPARACAO_entry_17
    191           
    192            STRING_write_to_external(CLEAR_DISPLAY,NULL,NULL);
   \   000001D4   0x2200             MOVS     R2,#+0
   \   000001D6   0x2100             MOVS     R1,#+0
   \   000001D8   0x2000             MOVS     R0,#+0
   \   000001DA   0x.... 0x....      BL       STRING_write_to_external
    193            STRING_write_to_internal(CLEAR_DISPLAY,NULL,NULL);
   \   000001DE   0x2200             MOVS     R2,#+0
   \   000001E0   0x2100             MOVS     R1,#+0
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x.... 0x....      BL       STRING_write_to_internal
    194            PREPARACAO_cnt_rampa = TEMPO_RAMPA;
   \   000001E8   0x....             LDR.N    R0,??DataTable5_4
   \   000001EA   0xF640 0x31B8      MOVW     R1,#+3000
   \   000001EE   0x6001             STR      R1,[R0, #+0]
    195            PREPARACAO_cnt_preparo = TEMPO_PREPARO;
   \   000001F0   0x....             LDR.N    R0,??DataTable5_2
   \   000001F2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x13880
   \   000001F4   0x6001             STR      R1,[R0, #+0]
    196            
    197            PLAYERWAVE_iniciaMusica(MUSICA_PREPARO,0);
   \   000001F6   0x2100             MOVS     R1,#+0
   \   000001F8   0x2001             MOVS     R0,#+1
   \   000001FA   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    198            //while(PLAYERWAVE_verificaToque());
    199            
    200            // Loop de preparação da pipoca
    201            for(;PREPARACAO_cnt_preparo;){
   \                     ??PREPARACAO_entry_18:
   \   000001FE   0x....             LDR.N    R0,??DataTable5_2
   \   00000200   0x6800             LDR      R0,[R0, #+0]
   \   00000202   0x2800             CMP      R0,#+0
   \   00000204   0xD041             BEQ.N    ??PREPARACAO_entry_19
    202              
    203              PREPARACAO_atualiza_info_tempo(idioma,PREPARACAO_cnt_preparo);    
   \   00000206   0x....             LDR.N    R0,??DataTable5_2
   \   00000208   0x6801             LDR      R1,[R0, #+0]
   \   0000020A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000020E   0x.... 0x....      BL       PREPARACAO_atualiza_info_tempo
    204              PREPARACAO_tela_interna();
   \   00000212   0x.... 0x....      BL       PREPARACAO_tela_interna
    205              
    206              // Falha no motor do ventilador
    207              if(POTENCIA_getRPMmedido()<1000){
   \   00000216   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000021A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000021E   0xD20A             BCS.N    ??PREPARACAO_entry_20
    208                POTENCIA_setRPM(0);
   \   00000220   0x2000             MOVS     R0,#+0
   \   00000222   0x.... 0x....      BL       POTENCIA_setRPM
    209                POTENCIA_set_neutro(0);
   \   00000226   0x2000             MOVS     R0,#+0
   \   00000228   0x.... 0x....      BL       POTENCIA_set_neutro
    210                CT_set_temperatura(0);   
   \   0000022C   0x2000             MOVS     R0,#+0
   \   0000022E   0x.... 0x....      BL       CT_set_temperatura
    211                return FALHA_VENTILADOR;
   \   00000232   0x2001             MOVS     R0,#+1
   \   00000234   0xE079             B.N      ??PREPARACAO_entry_9
    212              }
    213                  
    214              // Gera a rampa de aquecimento
    215              // na preparação da pipoca
    216              if(!PREPARACAO_cnt_rampa){
   \                     ??PREPARACAO_entry_20:
   \   00000236   0x....             LDR.N    R0,??DataTable5_4
   \   00000238   0x6800             LDR      R0,[R0, #+0]
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD10D             BNE.N    ??PREPARACAO_entry_21
    217                //temperatura_processo;
    218                if(delta<20)
   \   0000023E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000240   0x2E14             CMP      R6,#+20
   \   00000242   0xDA00             BGE.N    ??PREPARACAO_entry_22
    219                  delta++;
   \   00000244   0x1C76             ADDS     R6,R6,#+1
    220                CT_set_temperatura(temperatura_processo+delta);
   \                     ??PREPARACAO_entry_22:
   \   00000246   0x9801             LDR      R0,[SP, #+4]
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x1830             ADDS     R0,R6,R0
   \   0000024C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000024E   0x.... 0x....      BL       CT_set_temperatura
    221                PREPARACAO_cnt_rampa = TEMPO_RAMPA;
   \   00000252   0x....             LDR.N    R0,??DataTable5_4
   \   00000254   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000258   0x6001             STR      R1,[R0, #+0]
    222              }
    223              
    224              // Controle da placa de instrução
    225              // do usuário
    226              if(PREPARACAO_cnt_preparo>TEMPO_ABRIR_PACOTE){
   \                     ??PREPARACAO_entry_21:
   \   0000025A   0x....             LDR.N    R0,??DataTable5_2
   \   0000025C   0x6800             LDR      R0,[R0, #+0]
   \   0000025E   0xF24C 0x3151      MOVW     R1,#+50001
   \   00000262   0x4288             CMP      R0,R1
   \   00000264   0xD308             BCC.N    ??PREPARACAO_entry_23
    227                 BOARD_setter_led_instrucao(LED_PEGUE_PACOTE,ACESO);
   \   00000266   0x2101             MOVS     R1,#+1
   \   00000268   0x2003             MOVS     R0,#+3
   \   0000026A   0x.... 0x....      BL       BOARD_setter_led_instrucao
    228                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,PISCANDO);
   \   0000026E   0x2102             MOVS     R1,#+2
   \   00000270   0x2004             MOVS     R0,#+4
   \   00000272   0x.... 0x....      BL       BOARD_setter_led_instrucao
   \   00000276   0xE7C2             B.N      ??PREPARACAO_entry_18
    229              }
    230              else{
    231                 BOARD_setter_led_instrucao(LED_MONTE_PACOTE,ACESO);        
   \                     ??PREPARACAO_entry_23:
   \   00000278   0x2101             MOVS     R1,#+1
   \   0000027A   0x2004             MOVS     R0,#+4
   \   0000027C   0x.... 0x....      BL       BOARD_setter_led_instrucao
    232                 BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,PISCANDO);         
   \   00000280   0x2102             MOVS     R1,#+2
   \   00000282   0x2005             MOVS     R0,#+5
   \   00000284   0x.... 0x....      BL       BOARD_setter_led_instrucao
   \   00000288   0xE7B9             B.N      ??PREPARACAO_entry_18
    233              }
    234            }  
    235            
    236            BOARD_setter_led_instrucao(LED_INSIRA_PACOTE,ACESO);
   \                     ??PREPARACAO_entry_19:
   \   0000028A   0x2101             MOVS     R1,#+1
   \   0000028C   0x2005             MOVS     R0,#+5
   \   0000028E   0x.... 0x....      BL       BOARD_setter_led_instrucao
    237                
    238            // Desliga os controles
    239            // da potência
    240            POTENCIA_setRPM(0);
   \   00000292   0x2000             MOVS     R0,#+0
   \   00000294   0x.... 0x....      BL       POTENCIA_setRPM
    241            POTENCIA_set_neutro(0);
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0x.... 0x....      BL       POTENCIA_set_neutro
    242            CT_set_temperatura(0);
   \   0000029E   0x2000             MOVS     R0,#+0
   \   000002A0   0x.... 0x....      BL       CT_set_temperatura
    243            
    244            PREPARACAO_limpeza(idioma);
   \   000002A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002A8   0x.... 0x....      BL       PREPARACAO_limpeza
    245            
    246            PLAYER_interrompeMusica();
   \   000002AC   0x.... 0x....      BL       PLAYER_interrompeMusica
    247            vTaskDelay(500);
   \   000002B0   0xF44F 0x70FA      MOV      R0,#+500
   \   000002B4   0x.... 0x....      BL       vTaskDelay
    248            PLAYERWAVE_iniciaMusica(AUDIO_PIPOCAS_PRONTAS,0);
   \   000002B8   0x2100             MOVS     R1,#+0
   \   000002BA   0x2002             MOVS     R0,#+2
   \   000002BC   0x.... 0x....      BL       PLAYERWAVE_iniciaMusica
    249            while(PLAYERWAVE_verificaToque());  
   \                     ??PREPARACAO_entry_24:
   \   000002C0   0x.... 0x....      BL       PLAYERWAVE_verificaToque
   \   000002C4   0x2800             CMP      R0,#+0
   \   000002C6   0xD1FB             BNE.N    ??PREPARACAO_entry_24
    250            vTaskDelay(500); 
   \   000002C8   0xF44F 0x70FA      MOV      R0,#+500
   \   000002CC   0x.... 0x....      BL       vTaskDelay
    251            //-----------------------------------------------
    252            // Local para inserção dos dados no faturamento
    253            // e liberação do troco
    254            //-----------------------------------------------
    255            if(contabiliza==CONTABILIZA){
   \   000002D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D2   0x2D01             CMP      R5,#+1
   \   000002D4   0xD10C             BNE.N    ??PREPARACAO_entry_25
    256              // Só contabiliza as unidades vendidadas
    257              // quando houver necessidade
    258              FATURAMENTO_add_contagem_parcial(1);
   \   000002D6   0x2001             MOVS     R0,#+1
   \   000002D8   0x.... 0x....      BL       FATURAMENTO_add_contagem_parcial
    259              FATURAMENTO_add_arrecadacao_parcial(valor_pipoca);
   \   000002DC   0x9805             LDR      R0,[SP, #+20]
   \   000002DE   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_parcial
    260              FATURAMENTO_add_contagem_total(1);
   \   000002E2   0x2001             MOVS     R0,#+1
   \   000002E4   0x.... 0x....      BL       FATURAMENTO_add_contagem_total
    261              FATURAMENTO_add_arrecadacao_total(valor_pipoca);
   \   000002E8   0x9805             LDR      R0,[SP, #+20]
   \   000002EA   0x.... 0x....      BL       FATURAMENTO_add_arrecadacao_total
   \   000002EE   0xE001             B.N      ??PREPARACAO_entry_26
    262            }
    263            else
    264              FATURAMENTO_inc_contador_pipocas_teste();  
   \                     ??PREPARACAO_entry_25:
   \   000002F0   0x.... 0x....      BL       FATURAMENTO_inc_contador_pipocas_teste
    265           
    266            //----------------------------------------------
    267            // Fim da coleta dos dados de faturamento
    268            //----------------------------------------------    
    269            //Faz o ajuste de compensação da panela
    270            //unsigned int ajuste = AA_calculaTemperatura();
    271            if(PREPARACAO_contador_compensacao){
   \                     ??PREPARACAO_entry_26:
   \   000002F4   0x....             LDR.N    R0,??DataTable5_5
   \   000002F6   0x6800             LDR      R0,[R0, #+0]
   \   000002F8   0x2800             CMP      R0,#+0
   \   000002FA   0xD00C             BEQ.N    ??PREPARACAO_entry_27
    272              if(PREPARACAO_compensador<=(5*compensador))
   \   000002FC   0x9802             LDR      R0,[SP, #+8]
   \   000002FE   0x2105             MOVS     R1,#+5
   \   00000300   0x4348             MULS     R0,R1,R0
   \   00000302   0x....             LDR.N    R1,??DataTable5
   \   00000304   0x6809             LDR      R1,[R1, #+0]
   \   00000306   0x4288             CMP      R0,R1
   \   00000308   0xD305             BCC.N    ??PREPARACAO_entry_27
    273                PREPARACAO_compensador+=compensador;
   \   0000030A   0x....             LDR.N    R0,??DataTable5
   \   0000030C   0x6800             LDR      R0,[R0, #+0]
   \   0000030E   0x9902             LDR      R1,[SP, #+8]
   \   00000310   0x1808             ADDS     R0,R1,R0
   \   00000312   0x....             LDR.N    R1,??DataTable5
   \   00000314   0x6008             STR      R0,[R1, #+0]
    274            }  
    275            PREPARACAO_contador_compensacao = RELOAD_COMPENSADOR;     
   \                     ??PREPARACAO_entry_27:
   \   00000316   0x....             LDR.N    R0,??DataTable5_5
   \   00000318   0x....             LDR.N    R1,??DataTable5_6  ;; 0x493e0
   \   0000031A   0x6001             STR      R1,[R0, #+0]
    276            BOARD_liga_placa_instrucao(0);
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    277            BOARD_liga_placa_instrucao(1);    
   \   00000322   0x2001             MOVS     R0,#+1
   \   00000324   0x.... 0x....      BL       BOARD_liga_placa_instrucao
    278            
    279            return SUCESSO;
   \   00000328   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_entry_9:
   \   0000032A   0xB007             ADD      SP,SP,#+28
   \   0000032C   0xBDF0             POP      {R4-R7,PC}       ;; return
    280          }
    281          /**********************************************************************************
    282          *       Descrição       :       Atualiza o display frontal com o tempo restante
    283          *                               do processo de preparo
    284          *       Parametros      :       nenhum
    285          *       Retorno         :       nenhum
    286          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          void PREPARACAO_atualiza_info_tempo(unsigned char idioma,unsigned int tempo){
   \                     PREPARACAO_atualiza_info_tempo:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    288            char buffer_linha[17];
    289            unsigned int minutos;
    290            unsigned int segundos;
    291            
    292            minutos  = PREPARACAO_cnt_preparo/1000;
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000010   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000014   0x0006             MOVS     R6,R0
    293            segundos = minutos % 60;
   \   00000016   0x203C             MOVS     R0,#+60
   \   00000018   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   0000001C   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   00000020   0x0007             MOVS     R7,R0
    294            minutos  = minutos/60;
   \   00000022   0x203C             MOVS     R0,#+60
   \   00000024   0xFBB6 0xF6F0      UDIV     R6,R6,R0
    295            
    296            sprintf(buffer_linha,"  %01d:%02d  ",minutos,segundos);
   \   00000028   0x003B             MOVS     R3,R7
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0x....             LDR.N    R1,??DataTable5_7
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x.... 0x....      BL       sprintf
    297            STRING_write_to_external(NO_CLEAR,(char*)STRING_mensagem_pipocas_prontas[idioma],buffer_linha);  
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x....             LDR.N    R0,??DataTable5_8
   \   0000003A   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       STRING_write_to_external
    298          }
   \   00000044   0xB005             ADD      SP,SP,#+20
   \   00000046   0xBDF0             POP      {R4-R7,PC}       ;; return
    299          /**********************************************************************************
    300          *       Descrição       :       Verifica se o ventilador está funcionando
    301          *       Parametros      :       nenhum
    302          *       Retorno         :       (unsigned char) maior do que zero se conseguir
    303          *                               detectar o RPM do motor
    304          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    305          unsigned char PREPARACAO_verificaVentilador(void){
   \                     PREPARACAO_verificaVentilador:
   \   00000000   0xB510             PUSH     {R4,LR}
    306            unsigned short int tempo=50000;  
   \   00000002   0xF24C 0x3450      MOVW     R4,#+50000
    307            
    308            do{
    309              
    310              if(POTENCIA_getRPMmedido()>1000)
   \                     ??PREPARACAO_verificaVentilador_0:
   \   00000006   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000000E   0xD901             BLS.N    ??PREPARACAO_verificaVentilador_1
    311                return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE008             B.N      ??PREPARACAO_verificaVentilador_2
    312              else
    313                vTaskDelay(1);
   \                     ??PREPARACAO_verificaVentilador_1:
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       vTaskDelay
    314                  
    315            }
    316            while(tempo--);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x1E44             SUBS     R4,R0,#+1
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F0             BNE.N    ??PREPARACAO_verificaVentilador_0
    317            
    318            return 0; 
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verificaVentilador_2:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    319          }
    320          /**********************************************************************************
    321          *       Descrição       :       Faz a verificação do aquecimento da resistência
    322          *       Parametros      :       nenhum
    323          *       Retorno         :       (unsigned char) maior do que zero se 
    324          *                               conseguir aquecer a panela 2 graus em até 5 segundos
    325          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    326          unsigned char PREPARACAO_verifica_resistencia(void){
   \                     PREPARACAO_verifica_resistencia:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    327            unsigned int temperaturaInicial;
    328            unsigned short int tempo = 15000;
   \   00000002   0xF643 0x2598      MOVW     R5,#+15000
    329            
    330            temperaturaInicial = AA_calculaTemperatura();
   \   00000006   0x.... 0x....      BL       AA_calculaTemperatura
   \   0000000A   0x0004             MOVS     R4,R0
    331            
    332            do{
    333              
    334              if(AA_calculaTemperatura()>(temperaturaInicial+2))
   \                     ??PREPARACAO_verifica_resistencia_0:
   \   0000000C   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000010   0x1CA1             ADDS     R1,R4,#+2
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xD201             BCS.N    ??PREPARACAO_verifica_resistencia_1
    335                return 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE008             B.N      ??PREPARACAO_verifica_resistencia_2
    336              else
    337                vTaskDelay(1);
   \                     ??PREPARACAO_verifica_resistencia_1:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       vTaskDelay
    338              
    339            }
    340            while(tempo--);
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x1E45             SUBS     R5,R0,#+1
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F0             BNE.N    ??PREPARACAO_verifica_resistencia_0
    341            
    342            return 0;  
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_verifica_resistencia_2:
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    343          }
    344          /**********************************************************************************
    345          *       Descrição       :       Tela informativa do processo exibida
    346          *                               no display interno
    347          *       Parametros      :       nenhum
    348          *       Retorno         :       nenhum
    349          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    350          void PREPARACAO_tela_interna(void){
   \                     PREPARACAO_tela_interna:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    351            char buffer_linha[17];
    352            
    353            sprintf(buffer_linha,"%05d RPM-%03doC",POTENCIA_getRPMmedido(),AA_calculaTemperatura());
   \   00000004   0x.... 0x....      BL       AA_calculaTemperatura
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x.... 0x....      BL       POTENCIA_getRPMmedido
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0023             MOVS     R3,R4
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x....             LDR.N    R1,??DataTable5_9
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       sprintf
    354            STRING_write_to_internal(NO_CLEAR,buffer_linha,NULL);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       STRING_write_to_internal
    355          }
   \   00000026   0xB006             ADD      SP,SP,#+24
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    356          /**********************************************************************************
    357          *       Descrição       :       Libera uma dose de milho na panela
    358          *       Parametros      :       nenhum
    359          *       Retorno         :       (unsigned char) maior do que zero
    360          *                               se conseguir dosar
    361          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    362          unsigned char PREPARACAO_dosagem_milho(void){
   \                     PREPARACAO_dosagem_milho:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    363            unsigned char sensor_dose; 
    364            unsigned int tempo=2000; 
   \   00000002   0xF44F 0x65FA      MOV      R5,#+2000
    365            
    366            BOARD_set_motor_dose(DOSAR);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       BOARD_set_motor_dose
    367            while(GET_SENSOR_DOSE() && tempo--)
   \                     ??PREPARACAO_dosagem_milho_0:
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       BOARD_get_sinal
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD007             BEQ.N    ??PREPARACAO_dosagem_milho_1
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x1E45             SUBS     R5,R0,#+1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??PREPARACAO_dosagem_milho_1
    368              vTaskDelay(1);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       vTaskDelay
   \   00000024   0xE7F2             B.N      ??PREPARACAO_dosagem_milho_0
    369            
    370            tempo = 15000;
   \                     ??PREPARACAO_dosagem_milho_1:
   \   00000026   0xF643 0x2098      MOVW     R0,#+15000
   \   0000002A   0x0005             MOVS     R5,R0
    371                  
    372            do{
    373              
    374              sensor_dose = GET_SENSOR_DOSE();  
   \                     ??PREPARACAO_dosagem_milho_2:
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       BOARD_get_sinal
   \   00000032   0x0004             MOVS     R4,R0
    375              if(sensor_dose){
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD004             BEQ.N    ??PREPARACAO_dosagem_milho_3
    376                BOARD_set_motor_dose(PARADO);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       BOARD_set_motor_dose
    377                return 1;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xE00A             B.N      ??PREPARACAO_dosagem_milho_4
    378              }
    379              else
    380                vTaskDelay(1);
   \                     ??PREPARACAO_dosagem_milho_3:
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       vTaskDelay
    381              
    382            }
    383            while(tempo--);
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x1E45             SUBS     R5,R0,#+1
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1EC             BNE.N    ??PREPARACAO_dosagem_milho_2
    384            
    385            BOARD_set_motor_dose(PARADO);  
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       BOARD_set_motor_dose
    386            //BOARD_set_motor_dose(DOSAR);          
    387            //BOARD_set_motor_dose(REVERTER);
    388            //BOARD_set_motor_dose(PARADO);
    389            
    390            return 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??PREPARACAO_dosagem_milho_4:
   \   0000005A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    391          }
    392          /**********************************************************************************
    393          *       Descrição       :       Limpeza da panela e agradecimento pela
    394          *                               compra
    395          *       Parametros      :       nenhum
    396          *       Retorno         :       nenhum
    397          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    398          void PREPARACAO_limpeza(unsigned char idioma){
   \                     PREPARACAO_limpeza:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    399            
    400            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    401            POTENCIA_setRPM(13000);
   \   0000000A   0xF243 0x20C8      MOVW     R0,#+13000
   \   0000000E   0x.... 0x....      BL       POTENCIA_setRPM
    402            
    403            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza[idioma][0],(char*)STRING_mensagem_limpeza[idioma][1]);
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable5_10
   \   00000016   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   0000001A   0x6842             LDR      R2,[R0, #+4]
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x....             LDR.N    R0,??DataTable5_10
   \   00000020   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       STRING_write_to_external
    404            vTaskDelay(7000);
   \   0000002A   0xF641 0x3058      MOVW     R0,#+7000
   \   0000002E   0x.... 0x....      BL       vTaskDelay
    405            
    406            POTENCIA_setRPM(0);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       POTENCIA_setRPM
    407            POTENCIA_set_neutro(0);  
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       POTENCIA_set_neutro
    408          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    409          /**********************************************************************************
    410          *       Descrição       :       Resfriamento do sistema
    411          *       Parametros      :       nenhum
    412          *       Retorno         :       nenhum
    413          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    414          void PREPARACAO_resfriamento(unsigned char idioma){
   \                     PREPARACAO_resfriamento:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    415            
    416            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    417            vTaskDelay(500);  
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    418            POTENCIA_setRPM(6000);
   \   00000012   0xF241 0x7070      MOVW     R0,#+6000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    419            
    420            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_resfriando[idioma][0],
    421                                                   (char*)STRING_mensagem_resfriando[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_11
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_11
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    422            vTaskDelay(30000);
   \   00000032   0xF247 0x5030      MOVW     R0,#+30000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    423            
    424            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    425            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    426          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    427          /**********************************************************************************
    428          *       Descrição       :       Limpeza da panela e agradecimento pela
    429          *                               compra
    430          *       Parametros      :       nenhum
    431          *       Retorno         :       nenhum
    432          **********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    433          void PREPARACAO_limpeza_inicial(unsigned char idioma){
   \                     PREPARACAO_limpeza_inicial:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    434            
    435            POTENCIA_set_neutro(1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       POTENCIA_set_neutro
    436            vTaskDelay(500);
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       vTaskDelay
    437            POTENCIA_setRPM(12000);
   \   00000012   0xF642 0x60E0      MOVW     R0,#+12000
   \   00000016   0x.... 0x....      BL       POTENCIA_setRPM
    438            
    439            STRING_write_to_external(CLEAR_DISPLAY,(char*)STRING_mensagem_limpeza_inicial[idioma][0],(char*)STRING_mensagem_limpeza_inicial[idioma][1]);
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable5_12
   \   0000001E   0xEB10 0x00C4      ADDS     R0,R0,R4, LSL #+3
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable5_12
   \   00000028   0xF850 0x1034      LDR      R1,[R0, R4, LSL #+3]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       STRING_write_to_external
    440            vTaskDelay(7000);
   \   00000032   0xF641 0x3058      MOVW     R0,#+7000
   \   00000036   0x.... 0x....      BL       vTaskDelay
    441            
    442            POTENCIA_setRPM(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       POTENCIA_setRPM
    443            POTENCIA_set_neutro(0);  
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       POTENCIA_set_neutro
    444          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     PREPARACAO_compensador

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     STRING_mensagem_inicio_preparacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     PREPARACAO_cnt_preparo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x00013880         DC32     0x13880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     PREPARACAO_cnt_rampa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     PREPARACAO_contador_compensacao

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "  %01d:%02d  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     STRING_mensagem_pipocas_prontas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `?<Constant "%05d RPM-%03doC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     STRING_mensagem_resfriando

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     STRING_mensagem_limpeza_inicial

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %01d:%02d  ">`:
   \   00000000   0x20 0x20          DC8 "  %01d:%02d  "
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%05d RPM-%03doC">`:
   \   00000000   0x25 0x30          DC8 "%05d RPM-%03doC"
   \              0x35 0x64    
   \              0x20 0x52    
   \              0x50 0x4D    
   \              0x2D 0x25    
   \              0x30 0x33    
   \              0x64 0x6F    
   \              0x43 0x00    
    445          /**********************************************************************************
    446          *       Fim do arquivo
    447          **********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   PREPARACAO_atualiza_info_tempo
        40   -> STRING_write_to_external
        40   -> sprintf
      16   PREPARACAO_dosagem_milho
        16   -> BOARD_get_sinal
        16   -> BOARD_set_motor_dose
        16   -> vTaskDelay
      48   PREPARACAO_entry
        48   -> AA_calculaTemperatura
        48   -> APLICACAO_tela_descanso
        48   -> BOARD_liga_placa_instrucao
        48   -> BOARD_setter_led_instrucao
        48   -> CT_set_temperatura
        48   -> EMBALAGEM_libera_pacote
        48   -> FATURAMENTO_add_arrecadacao_parcial
        48   -> FATURAMENTO_add_arrecadacao_total
        48   -> FATURAMENTO_add_contagem_parcial
        48   -> FATURAMENTO_add_contagem_total
        48   -> FATURAMENTO_inc_contador_pipocas_teste
        48   -> PAGAMENTOS_set_bloqueio
        48   -> PARAMETROS_le
        48   -> PLAYERWAVE_iniciaMusica
        48   -> PLAYERWAVE_verificaToque
        48   -> PLAYER_interrompeMusica
        48   -> POTENCIA_getRPMmedido
        48   -> POTENCIA_setRPM
        48   -> POTENCIA_set_neutro
        48   -> PREPARACAO_atualiza_info_tempo
        48   -> PREPARACAO_dosagem_milho
        48   -> PREPARACAO_limpeza
        48   -> PREPARACAO_tela_interna
        48   -> PREPARACAO_verificaVentilador
        48   -> STRING_write_to_external
        48   -> STRING_write_to_internal
        48   -> vTaskDelay
       8   PREPARACAO_limpeza
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_limpeza_inicial
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
       8   PREPARACAO_resfriamento
         8   -> POTENCIA_setRPM
         8   -> POTENCIA_set_neutro
         8   -> STRING_write_to_external
         8   -> vTaskDelay
      32   PREPARACAO_tela_interna
        32   -> AA_calculaTemperatura
        32   -> POTENCIA_getRPMmedido
        32   -> STRING_write_to_internal
        32   -> sprintf
       8   PREPARACAO_verificaVentilador
         8   -> POTENCIA_getRPMmedido
         8   -> vTaskDelay
      16   PREPARACAO_verifica_resistencia
        16   -> AA_calculaTemperatura
        16   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "  %01d:%02d  ">
      16  ?<Constant "%05d RPM-%03doC">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      72  PREPARACAO_atualiza_info_tempo
       4  PREPARACAO_cnt_preparo
       4  PREPARACAO_cnt_rampa
       4  PREPARACAO_compensador
       4  PREPARACAO_contador_compensacao
      92  PREPARACAO_dosagem_milho
     814  PREPARACAO_entry
      64  PREPARACAO_limpeza
      72  PREPARACAO_limpeza_inicial
      72  PREPARACAO_resfriamento
      42  PREPARACAO_tela_interna
      40  PREPARACAO_verificaVentilador
      46  PREPARACAO_verifica_resistencia

 
    16 bytes in section .bss
    32 bytes in section .rodata
 1 366 bytes in section .text
 
 1 366 bytes of CODE  memory
    32 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: 1

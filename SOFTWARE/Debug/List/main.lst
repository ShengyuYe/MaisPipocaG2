###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      17/Jul/2017  16:19:05 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\main.c                                    #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\main.c -lC C:\Users\Marcos\Dropbox\Reps\D #
#                    extro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Debug\List\     #
#                    -lA C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\Mai #
#                    sPipocaG2\SOFTWARE\Debug\List\ -o                        #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\main.lst                       #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\main.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\main.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  main.c
     18          |       Descrição          :  módulo principal do sistema
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  15/02/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <nxp\iolpc1768.h>
     32          #include "includes.h"
     33          
     34          /***********************************************************************************
     35          *       Funções locais
     36          ***********************************************************************************/
     37          void lowLevelInit( void );
     38          
     39          /***********************************************************************************
     40          *       Funções externas
     41          ***********************************************************************************/
     42          
     43          
     44          /***********************************************************************************
     45          *       Implementação
     46          ***********************************************************************************/
     47          
     48          /***********************************************************************************
     49          *       Descrição       :       Função principal do sistema
     50          *       Parametros      :       nenhum
     51          *       Retorno         :       nenhum
     52          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     53          void main(void){
   \                     main:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     54            
     55            lowLevelInit();
   \   00000004   0x.... 0x....      BL       lowLevelInit
     56            BOARD_ini();
   \   00000008   0x.... 0x....      BL       BOARD_ini
     57            
     58            xTaskCreate(APLICACAO_main ,"APLICACAO" ,256,NULL,1,NULL);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9003             STR      R0,[SP, #+12]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9002             STR      R0,[SP, #+8]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0xF44F 0x7280      MOV      R2,#+256
   \   00000022   0x....             LDR.N    R1,??DataTable1_1
   \   00000024   0x....             LDR.N    R0,??DataTable1_2
   \   00000026   0x.... 0x....      BL       xTaskGenericCreate
     59            xTaskCreate(BOARD_main     ,"IU"        ,128 ,NULL,1,NULL);  
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9003             STR      R0,[SP, #+12]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9002             STR      R0,[SP, #+8]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x2280             MOVS     R2,#+128
   \   0000003E   0x....             ADR.N    R1,??DataTable1  ;; 0x49, 0x55, 0x00, 0x00
   \   00000040   0x....             LDR.N    R0,??DataTable1_3
   \   00000042   0x.... 0x....      BL       xTaskGenericCreate
     60            xTaskCreate(PAGAMENTOS_main,"PAGAMENTOS",128 ,NULL,1,NULL);  
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9003             STR      R0,[SP, #+12]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9002             STR      R0,[SP, #+8]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x2300             MOVS     R3,#+0
   \   00000058   0x2280             MOVS     R2,#+128
   \   0000005A   0x....             LDR.N    R1,??DataTable1_4
   \   0000005C   0x....             LDR.N    R0,??DataTable1_5
   \   0000005E   0x.... 0x....      BL       xTaskGenericCreate
     61            xTaskCreate(BV20_main      ,"BV20"      ,128 ,NULL,1,NULL);  
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9003             STR      R0,[SP, #+12]
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x9002             STR      R0,[SP, #+8]
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0x2300             MOVS     R3,#+0
   \   00000074   0x2280             MOVS     R2,#+128
   \   00000076   0x....             LDR.N    R1,??DataTable1_6
   \   00000078   0x....             LDR.N    R0,??DataTable1_7
   \   0000007A   0x.... 0x....      BL       xTaskGenericCreate
     62            xTaskCreate(LEDS_main      ,"LEDS"      ,128 ,NULL,1,NULL);      
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9003             STR      R0,[SP, #+12]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9002             STR      R0,[SP, #+8]
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x9001             STR      R0,[SP, #+4]
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0x2300             MOVS     R3,#+0
   \   00000090   0x2280             MOVS     R2,#+128
   \   00000092   0x....             LDR.N    R1,??DataTable1_8
   \   00000094   0x....             LDR.N    R0,??DataTable1_9
   \   00000096   0x.... 0x....      BL       xTaskGenericCreate
     63            xTaskCreate(PROTOCOLO_main ,"PROT"      ,128 ,NULL,1,NULL);      
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x9003             STR      R0,[SP, #+12]
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x9002             STR      R0,[SP, #+8]
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x9001             STR      R0,[SP, #+4]
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x2300             MOVS     R3,#+0
   \   000000AC   0x2280             MOVS     R2,#+128
   \   000000AE   0x....             LDR.N    R1,??DataTable1_10
   \   000000B0   0x....             LDR.N    R0,??DataTable1_11
   \   000000B2   0x.... 0x....      BL       xTaskGenericCreate
     64            
     65            //Inicialização do escalonador, essa função nunca retornará
     66            vTaskStartScheduler();  
   \   000000B6   0x.... 0x....      BL       vTaskStartScheduler
     67            
     68            for(;;);
   \                     ??main_0:
   \   000000BA   0xE7FE             B.N      ??main_0
     69          }
     70          /***********************************************************************************
     71          *       Descrição       :       Inicialização básica do sistema
     72          *       Parametros      :       nenhum
     73          *       Retorno         :       nenhum
     74          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          void lowLevelInit( void ){
     76            
     77            SC->PCONP = 0;            // Disable peripherals power. 
   \                     lowLevelInit:
   \   00000000   0x....             LDR.N    R0,??DataTable1_12  ;; 0x400fc0c4
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
     78            SC->PCONP = PCONP_PCGPIO; // Enable GPIO power. 
   \   00000006   0x....             LDR.N    R0,??DataTable1_12  ;; 0x400fc0c4
   \   00000008   0xF44F 0x4100      MOV      R1,#+32768
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     79          
     80            PINCON->PINSEL10 = 0;     //   Disable TPIU.
   \   0000000E   0x....             LDR.N    R0,??DataTable1_13  ;; 0x4002c028
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6001             STR      R1,[R0, #+0]
     81          
     82            if ( SC->PLL0STAT & ( 1 << 25 ) )
   \   00000014   0x....             LDR.N    R0,??DataTable1_14  ;; 0x400fc088
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0180             LSLS     R0,R0,#+6
   \   0000001A   0xD508             BPL.N    ??lowLevelInit_0
     83            {
     84          	/* Enable PLL, disconnected. */
     85                  SC->PLL0CON = 1;			
   \   0000001C   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc080
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x6001             STR      R1,[R0, #+0]
     86          	SC->PLL0FEED = PLLFEED_FEED1;
   \   00000022   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   00000024   0x21AA             MOVS     R1,#+170
   \   00000026   0x6001             STR      R1,[R0, #+0]
     87          	SC->PLL0FEED = PLLFEED_FEED2;
   \   00000028   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   0000002A   0x2155             MOVS     R1,#+85
   \   0000002C   0x6001             STR      R1,[R0, #+0]
     88            }
     89          	
     90            /* Disable PLL, disconnected. */
     91            SC->PLL0CON = 0;				
   \                     ??lowLevelInit_0:
   \   0000002E   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc080
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6001             STR      R1,[R0, #+0]
     92            SC->PLL0FEED = PLLFEED_FEED1;
   \   00000034   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   00000036   0x21AA             MOVS     R1,#+170
   \   00000038   0x6001             STR      R1,[R0, #+0]
     93            SC->PLL0FEED = PLLFEED_FEED2;
   \   0000003A   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   0000003C   0x2155             MOVS     R1,#+85
   \   0000003E   0x6001             STR      R1,[R0, #+0]
     94          	
     95            /* Enable main OSC. */
     96            SC->SCS |= 0x20;			
   \   00000040   0x....             LDR.N    R0,??DataTable1_17  ;; 0x400fc1a0
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000048   0x....             LDR.N    R1,??DataTable1_17  ;; 0x400fc1a0
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     97            while( !( SC->SCS & 0x40 ) );
   \                     ??lowLevelInit_1:
   \   0000004C   0x....             LDR.N    R0,??DataTable1_17  ;; 0x400fc1a0
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x0640             LSLS     R0,R0,#+25
   \   00000052   0xD5FB             BPL.N    ??lowLevelInit_1
     98          	
     99            /* select main OSC, 12MHz, as the PLL clock source. */
    100            SC->CLKSRCSEL = 0x1;		
   \   00000054   0x....             LDR.N    R0,??DataTable1_18  ;; 0x400fc10c
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x6001             STR      R1,[R0, #+0]
    101          	
    102            SC->PLL0CFG = 0x20031;
   \   0000005A   0x....             LDR.N    R0,??DataTable1_19  ;; 0x400fc084
   \   0000005C   0x....             LDR.N    R1,??DataTable1_20  ;; 0x20031
   \   0000005E   0x6001             STR      R1,[R0, #+0]
    103            SC->PLL0FEED = PLLFEED_FEED1;
   \   00000060   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   00000062   0x21AA             MOVS     R1,#+170
   \   00000064   0x6001             STR      R1,[R0, #+0]
    104            SC->PLL0FEED = PLLFEED_FEED2;
   \   00000066   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   00000068   0x2155             MOVS     R1,#+85
   \   0000006A   0x6001             STR      R1,[R0, #+0]
    105          	      
    106            /* Enable PLL, disconnected. */
    107            SC->PLL0CON = 1;				
   \   0000006C   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc080
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x6001             STR      R1,[R0, #+0]
    108            SC->PLL0FEED = PLLFEED_FEED1;
   \   00000072   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   00000074   0x21AA             MOVS     R1,#+170
   \   00000076   0x6001             STR      R1,[R0, #+0]
    109            SC->PLL0FEED = PLLFEED_FEED2;
   \   00000078   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   0000007A   0x2155             MOVS     R1,#+85
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    110          	
    111            /* Set clock divider. */
    112            SC->CCLKCFG = 0x03;
   \   0000007E   0x....             LDR.N    R0,??DataTable1_21  ;; 0x400fc104
   \   00000080   0x2103             MOVS     R1,#+3
   \   00000082   0x6001             STR      R1,[R0, #+0]
    113          	
    114            /* Configure flash accelerator. */
    115            SC->FLASHCFG = 0x603a;
   \   00000084   0x....             LDR.N    R0,??DataTable1_22  ;; 0x400fc000
   \   00000086   0xF246 0x013A      MOVW     R1,#+24634
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    116          	
    117            /* Check lock bit status. */
    118            while( ( ( SC->PLL0STAT & ( 1 << 26 ) ) == 0 ) );	
   \                     ??lowLevelInit_2:
   \   0000008C   0x....             LDR.N    R0,??DataTable1_14  ;; 0x400fc088
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x0140             LSLS     R0,R0,#+5
   \   00000092   0xD5FB             BPL.N    ??lowLevelInit_2
    119          	
    120            /* Enable and connect. */
    121            SC->PLL0CON = 3;				
   \   00000094   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc080
   \   00000096   0x2103             MOVS     R1,#+3
   \   00000098   0x6001             STR      R1,[R0, #+0]
    122            SC->PLL0FEED = PLLFEED_FEED1;
   \   0000009A   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   0000009C   0x21AA             MOVS     R1,#+170
   \   0000009E   0x6001             STR      R1,[R0, #+0]
    123            SC->PLL0FEED = PLLFEED_FEED2;
   \   000000A0   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc08c
   \   000000A2   0x2155             MOVS     R1,#+85
   \   000000A4   0x6001             STR      R1,[R0, #+0]
    124            while( ( ( SC->PLL0STAT & ( 1 << 25 ) ) == 0 ) );	
   \                     ??lowLevelInit_3:
   \   000000A6   0x....             LDR.N    R0,??DataTable1_14  ;; 0x400fc088
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x0180             LSLS     R0,R0,#+6
   \   000000AC   0xD5FB             BPL.N    ??lowLevelInit_3
    125          			
    126            /* Configure the clock for the USB. */
    127          
    128            if( SC->PLL1STAT & ( 1 << 9 ) )
   \   000000AE   0x....             LDR.N    R0,??DataTable1_23  ;; 0x400fc0a8
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x0580             LSLS     R0,R0,#+22
   \   000000B4   0xD508             BPL.N    ??lowLevelInit_4
    129            {
    130          	/* Enable PLL, disconnected. */
    131          	SC->PLL1CON = 1;			
   \   000000B6   0x....             LDR.N    R0,??DataTable1_24  ;; 0x400fc0a0
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x6001             STR      R1,[R0, #+0]
    132          	SC->PLL1FEED = PLLFEED_FEED1;
   \   000000BC   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000BE   0x21AA             MOVS     R1,#+170
   \   000000C0   0x6001             STR      R1,[R0, #+0]
    133          	SC->PLL1FEED = PLLFEED_FEED2;
   \   000000C2   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000C4   0x2155             MOVS     R1,#+85
   \   000000C6   0x6001             STR      R1,[R0, #+0]
    134            }	
    135            /* Disable PLL, disconnected. */
    136            SC->PLL1CON = 0;				
   \                     ??lowLevelInit_4:
   \   000000C8   0x....             LDR.N    R0,??DataTable1_24  ;; 0x400fc0a0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x6001             STR      R1,[R0, #+0]
    137            SC->PLL1FEED = PLLFEED_FEED1;
   \   000000CE   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000D0   0x21AA             MOVS     R1,#+170
   \   000000D2   0x6001             STR      R1,[R0, #+0]
    138            SC->PLL1FEED = PLLFEED_FEED2;
   \   000000D4   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000D6   0x2155             MOVS     R1,#+85
   \   000000D8   0x6001             STR      R1,[R0, #+0]
    139          	
    140            SC->PLL1CFG = 0x23;
   \   000000DA   0x....             LDR.N    R0,??DataTable1_26  ;; 0x400fc0a4
   \   000000DC   0x2123             MOVS     R1,#+35
   \   000000DE   0x6001             STR      R1,[R0, #+0]
    141            SC->PLL1FEED = PLLFEED_FEED1;
   \   000000E0   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000E2   0x21AA             MOVS     R1,#+170
   \   000000E4   0x6001             STR      R1,[R0, #+0]
    142            SC->PLL1FEED = PLLFEED_FEED2;
   \   000000E6   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000E8   0x2155             MOVS     R1,#+85
   \   000000EA   0x6001             STR      R1,[R0, #+0]
    143          	
    144            /* Enable PLL, disconnected. */
    145            SC->PLL1CON = 1;				
   \   000000EC   0x....             LDR.N    R0,??DataTable1_24  ;; 0x400fc0a0
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x6001             STR      R1,[R0, #+0]
    146            SC->PLL1FEED = PLLFEED_FEED1;
   \   000000F2   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000F4   0x21AA             MOVS     R1,#+170
   \   000000F6   0x6001             STR      R1,[R0, #+0]
    147            SC->PLL1FEED = PLLFEED_FEED2;
   \   000000F8   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   000000FA   0x2155             MOVS     R1,#+85
   \   000000FC   0x6001             STR      R1,[R0, #+0]
    148            while( ( ( SC->PLL1STAT & ( 1 << 10 ) ) == 0 ) );
   \                     ??lowLevelInit_5:
   \   000000FE   0x....             LDR.N    R0,??DataTable1_23  ;; 0x400fc0a8
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x0540             LSLS     R0,R0,#+21
   \   00000104   0xD5FB             BPL.N    ??lowLevelInit_5
    149          	
    150            /* Enable and connect. */
    151            SC->PLL1CON = 3;				
   \   00000106   0x....             LDR.N    R0,??DataTable1_24  ;; 0x400fc0a0
   \   00000108   0x2103             MOVS     R1,#+3
   \   0000010A   0x6001             STR      R1,[R0, #+0]
    152            SC->PLL1FEED = PLLFEED_FEED1;
   \   0000010C   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   0000010E   0x21AA             MOVS     R1,#+170
   \   00000110   0x6001             STR      R1,[R0, #+0]
    153            SC->PLL1FEED = PLLFEED_FEED2;
   \   00000112   0x....             LDR.N    R0,??DataTable1_25  ;; 0x400fc0ac
   \   00000114   0x2155             MOVS     R1,#+85
   \   00000116   0x6001             STR      R1,[R0, #+0]
    154            while( ( ( SC->PLL1STAT & ( 1 << 9 ) ) == 0 ) );
   \                     ??lowLevelInit_6:
   \   00000118   0x....             LDR.N    R0,??DataTable1_23  ;; 0x400fc0a8
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x0580             LSLS     R0,R0,#+22
   \   0000011E   0xD5FB             BPL.N    ??lowLevelInit_6
    155          	
    156            /*  Setup the peripheral bus to be the same as the PLL output (64 MHz). */
    157            SC->PCLKSEL0 = 0x05555555;
   \   00000120   0x....             LDR.N    R0,??DataTable1_27  ;; 0x400fc1a8
   \   00000122   0x....             LDR.N    R1,??DataTable1_28  ;; 0x5555555
   \   00000124   0x6001             STR      R1,[R0, #+0]
    158          }
   \   00000126   0x4770             BX       LR               ;; return
    159          /***********************************************************************************
    160          *   Descrição     :  Essa função será chamada se houver estouro no stack pointer
    161          *   Parametros    : 
    162          *   Retorno       : 
    163          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    164          void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName){
    165          
    166            ( void ) pxTask;
    167            ( void ) pcTaskName;
    168            
    169            for( ;; );
   \                     vApplicationStackOverflowHook:
   \                     ??vApplicationStackOverflowHook_0:
   \   00000000   0xE7FE             B.N      ??vApplicationStackOverflowHook_0
    170          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x49 0x55          DC8      0x49, 0x55, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `?<Constant "APLICACAO">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     APLICACAO_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     BOARD_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     `?<Constant "PAGAMENTOS">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     PAGAMENTOS_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     `?<Constant "BV20">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     BV20_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     `?<Constant "LEDS">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     LEDS_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     `?<Constant "PROT">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     PROTOCOLO_main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x4002C028         DC32     0x4002c028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x400FC088         DC32     0x400fc088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x400FC080         DC32     0x400fc080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x400FC08C         DC32     0x400fc08c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x400FC1A0         DC32     0x400fc1a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x400FC10C         DC32     0x400fc10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x400FC084         DC32     0x400fc084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x00020031         DC32     0x20031

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x400FC104         DC32     0x400fc104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x400FC000         DC32     0x400fc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0x400FC0A8         DC32     0x400fc0a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \   00000000   0x400FC0A0         DC32     0x400fc0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \   00000000   0x400FC0AC         DC32     0x400fc0ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \   00000000   0x400FC0A4         DC32     0x400fc0a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \   00000000   0x05555555         DC32     0x5555555

   \                                 In section .rodata, align 4
   \                     `?<Constant "APLICACAO">`:
   \   00000000   0x41 0x50          DC8 "APLICACAO"
   \              0x4C 0x49    
   \              0x43 0x41    
   \              0x43 0x41    
   \              0x4F 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x49 0x55          DC8 "IU"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PAGAMENTOS">`:
   \   00000000   0x50 0x41          DC8 "PAGAMENTOS"
   \              0x47 0x41    
   \              0x4D 0x45    
   \              0x4E 0x54    
   \              0x4F 0x53    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BV20">`:
   \   00000000   0x42 0x56          DC8 "BV20"
   \              0x32 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "LEDS">`:
   \   00000000   0x4C 0x45          DC8 "LEDS"
   \              0x44 0x53    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "PROT">`:
   \   00000000   0x50 0x52          DC8 "PROT"
   \              0x4F 0x54    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    171          /***********************************************************************************
    172          *       Fim do arquivo
    173          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   lowLevelInit
      24   main
        24   -> BOARD_ini
        24   -> lowLevelInit
        24   -> vTaskStartScheduler
        24   -> xTaskGenericCreate
       0   vApplicationStackOverflowHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "APLICACAO">
       8  ?<Constant "BV20">
       4  ?<Constant "IU">
       8  ?<Constant "LEDS">
      12  ?<Constant "PAGAMENTOS">
       8  ?<Constant "PROT">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     296  lowLevelInit
     188  main
       2  vApplicationStackOverflowHook

 
  52 bytes in section .rodata
 602 bytes in section .text
 
 602 bytes of CODE  memory
  52 bytes of CONST memory

Errors: none
Warnings: none

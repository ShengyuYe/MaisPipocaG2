###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  17:11:35 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_sel #
#                    eciona_lista.c                                           #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_sel #
#                    eciona_lista.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE #
#                    \Debug\List\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\D #
#                    ebug\List\ -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debu #
#                    g\Obj\ --no_cse --no_unroll --no_inline                  #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\menu_se #
#                    leciona_lista.lst                                        #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\menu_sel #
#                    eciona_lista.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_seleciona_lista.c
      1          /*__________________________________________________________________________________
      2          |	DEXTRO SOLUÇÕES TECNOLÓGICAS
      3          |       
      4          |       ITAJAÍ - SC
      5          |       www.dextro.ind.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by DEXTRO  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by DEXTRO 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da DEXTRO  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       DEXTRO  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  menu_seleciona_lista.c
     18          |       Descrição          :  Menu para edição de uma lista de flags
     19          | 
     20          |       Autor              :  Marcos Aquino
     21          |       Data criação       :  28/02/2017
     22          |
     23          |       Revisões           :  001
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          
     29          /***********************************************************************************
     30          *       Includes
     31          ***********************************************************************************/
     32          #include <stdio.h>
     33          #include <stdlib.h>
     34          #include <string.h>
     35          #include "menu_seleciona_lista.h"
     36          #include "menu_edita_listagem.h"
     37          #include "menu_edita_flag.h"
     38          #include "..\includes.h"
     39          
     40          /***********************************************************************************
     41          *       Definições locais
     42          ***********************************************************************************/
     43          
     44          
     45          /***********************************************************************************
     46          *       Constantes locais
     47          ***********************************************************************************/
     48          
     49          
     50          /***********************************************************************************
     51          *       Variaveis locais
     52          ***********************************************************************************/
     53          
     54          
     55          /***********************************************************************************
     56          *       Funções locais
     57          ***********************************************************************************/
     58          void MSL_escreve_flag(char*label,unsigned char flag);
     59          
     60          /***********************************************************************************
     61          *       Implementação das funções
     62          ***********************************************************************************/
     63          
     64          /***********************************************************************************
     65          *       Descrição       :       ponto de entrada para a tela de edição
     66          *                               de listagem de flags
     67          *       Parametros      :       (char**) labels dos flags
     68          *                               (unsigned char*) flags
     69          *                               (unsigned char) tamanho da listagem
     70          *       Retorno         :       nenhum
     71          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void MSL_entry(char *titulo,char** labels,unsigned char *flags,unsigned char size){
   \                     MSL_entry:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     73            eTECLA tecla;
     74            unsigned char indice=0;
   \   0000000C   0xF05F 0x0900      MOVS     R9,#+0
     75            unsigned char ultimoIndice=255;
   \   00000010   0xF04F 0x0AFF      MOV      R10,#+255
     76            
     77            HD44780_clearText();
   \   00000014   0x200C             MOVS     R0,#+12
   \   00000016   0x.... 0x....      BL       HD44780_writeChar
     78            unsigned char tam = strlen(titulo);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       strlen
   \   00000020   0x4683             MOV      R11,R0
     79            HD44780_posicionaTexto((16-tam)>>1,0);
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000028   0xF1DB 0x0010      RSBS     R0,R11,#+16
   \   0000002C   0x1040             ASRS     R0,R0,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       HD44780_posicionaTexto
     80            HD44780_writeString(titulo);
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       HD44780_writeString
     81            
     82            for(;TECLADO_getContadorInatividade();){
   \                     ??MSL_entry_0:
   \   0000003A   0x.... 0x....      BL       TECLADO_getContadorInatividade
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD05E             BEQ.N    ??MSL_entry_1
     83            
     84              tecla = TECLADO_getch();
   \   00000042   0x.... 0x....      BL       TECLADO_getch
   \   00000046   0x4680             MOV      R8,R0
     85              switch(tecla){
   \   00000048   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000050   0xD02C             BEQ.N    ??MSL_entry_2
   \   00000052   0xD340             BCC.N    ??MSL_entry_3
   \   00000054   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000058   0xD033             BEQ.N    ??MSL_entry_4
   \   0000005A   0xD328             BCC.N    ??MSL_entry_5
   \   0000005C   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000060   0xD139             BNE.N    ??MSL_entry_3
     86                case TECLA_ENTER:
     87                     for(unsigned char i=0;i<size;i++)
   \                     ??MSL_entry_6:
   \   00000062   0x2000             MOVS     R0,#+0
   \                     ??MSL_entry_7:
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   0x42B8             CMP      R0,R7
   \   0000006A   0xD209             BCS.N    ??MSL_entry_8
     88                       if(i!=indice)
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000072   0x4548             CMP      R0,R9
   \   00000074   0xD002             BEQ.N    ??MSL_entry_9
     89                         flags[i] = 0;
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x5581             STRB     R1,[R0, R6]
   \                     ??MSL_entry_9:
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xE7F1             B.N      ??MSL_entry_7
     90                     
     91                     flags[indice]?(flags[indice]=0):(flags[indice]=255);
   \                     ??MSL_entry_8:
   \   00000080   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000084   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD006             BEQ.N    ??MSL_entry_10
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000092   0xF809 0x0006      STRB     R0,[R9, R6]
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0xE005             B.N      ??MSL_entry_11
   \                     ??MSL_entry_10:
   \   0000009A   0x20FF             MOVS     R0,#+255
   \   0000009C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000A0   0xF809 0x0006      STRB     R0,[R9, R6]
   \   000000A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
     92                     ultimoIndice = 255;
   \                     ??MSL_entry_11:
   \   000000A6   0x20FF             MOVS     R0,#+255
   \   000000A8   0x4682             MOV      R10,R0
     93                     break;
   \   000000AA   0xE014             B.N      ??MSL_entry_3
     94                case TECLA_ESC:
     95                     return;
   \                     ??MSL_entry_2:
   \   000000AC   0xE028             B.N      ??MSL_entry_12
     96                case TECLA_INC:
     97                     indice = (indice+1) % size;
   \                     ??MSL_entry_5:
   \   000000AE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B2   0xF119 0x0001      ADDS     R0,R9,#+1
   \   000000B6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B8   0xFB90 0xF1F7      SDIV     R1,R0,R7
   \   000000BC   0xFB07 0x0911      MLS      R9,R7,R1,R0
     98                     break;
   \   000000C0   0xE009             B.N      ??MSL_entry_3
     99                case TECLA_DEC: 
    100                     if(indice>0)
   \                     ??MSL_entry_4:
   \   000000C2   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000C6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000CA   0xD002             BEQ.N    ??MSL_entry_13
    101                       indice--;
   \   000000CC   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \   000000D0   0xE001             B.N      ??MSL_entry_14
    102                     else
    103                       indice = size - 1;
   \                     ??MSL_entry_13:
   \   000000D2   0x1E78             SUBS     R0,R7,#+1
   \   000000D4   0x4681             MOV      R9,R0
    104                     break;
    105              }
    106               
    107              if(ultimoIndice!=indice)
   \                     ??MSL_entry_14:
   \                     ??MSL_entry_3:
   \   000000D6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000DA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000DE   0x45CA             CMP      R10,R9
   \   000000E0   0xD009             BEQ.N    ??MSL_entry_15
    108                MEL_escreve_flag((char*)labels[indice],flags[indice]);    
   \   000000E2   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000E6   0xF819 0x1006      LDRB     R1,[R9, R6]
   \   000000EA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000EE   0xF855 0x0029      LDR      R0,[R5, R9, LSL #+2]
   \   000000F2   0x.... 0x....      BL       MEL_escreve_flag
    109              
    110              ultimoIndice = indice;
   \                     ??MSL_entry_15:
   \   000000F6   0x46CA             MOV      R10,R9
    111              
    112              vTaskDelay(50); 
   \   000000F8   0x2032             MOVS     R0,#+50
   \   000000FA   0x.... 0x....      BL       vTaskDelay
   \   000000FE   0xE79C             B.N      ??MSL_entry_0
    113            }  
    114          }
   \                     ??MSL_entry_1:
   \                     ??MSL_entry_12:
   \   00000100   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    115          /***********************************************************************************
    116          *       Descrição       :       Escreve o flag em uma linha
    117          *       Parametros      :       (unsigned char*) label
    118          *                               (unsigned char) flag
    119          *       Retorno         :       nenhum
    120          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          void MSL_escreve_flag(char*label,unsigned char flag){
   \                     MSL_escreve_flag:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    122            char linha[17];
    123          
    124            HD44780_posicionaTexto(0,1);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       HD44780_posicionaTexto
    125            HD44780_writeString("                ");  
   \   00000010   0x....             LDR.N    R0,??DataTable0
   \   00000012   0x.... 0x....      BL       HD44780_writeString
    126            sprintf(linha,"[%c] %s",flag?'X':' ',label);
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD001             BEQ.N    ??MSL_escreve_flag_0
   \   0000001C   0x2258             MOVS     R2,#+88
   \   0000001E   0xE000             B.N      ??MSL_escreve_flag_1
   \                     ??MSL_escreve_flag_0:
   \   00000020   0x2220             MOVS     R2,#+32
   \                     ??MSL_escreve_flag_1:
   \   00000022   0x0023             MOVS     R3,R4
   \   00000024   0x....             LDR.N    R1,??DataTable0_1
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x.... 0x....      BL       sprintf
    127            HD44780_posicionaTexto(0,1);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       HD44780_posicionaTexto
    128            HD44780_writeString(linha); 
   \   00000034   0xA800             ADD      R0,SP,#+0
   \   00000036   0x.... 0x....      BL       HD44780_writeString
    129          }
   \   0000003A   0xB005             ADD      SP,SP,#+20
   \   0000003C   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     `?<Constant "                ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     `?<Constant "[%c] %s">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "                ">`:
   \   00000000   0x20 0x20          DC8 "                "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "[%c] %s">`:
   \   00000000   0x5B 0x25          DC8 "[%c] %s"
   \              0x63 0x5D    
   \              0x20 0x25    
   \              0x73 0x00    
    130          /***********************************************************************************
    131          *       Fim do arquivo
    132          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   MSL_entry
        40   -> HD44780_posicionaTexto
        40   -> HD44780_writeChar
        40   -> HD44780_writeString
        40   -> MEL_escreve_flag
        40   -> TECLADO_getContadorInatividade
        40   -> TECLADO_getch
        40   -> strlen
        40   -> vTaskDelay
      32   MSL_escreve_flag
        32   -> HD44780_posicionaTexto
        32   -> HD44780_writeString
        32   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "                ">
       8  ?<Constant "[%c] %s">
       4  ??DataTable0
       4  ??DataTable0_1
     260  MSL_entry
      62  MSL_escreve_flag

 
  28 bytes in section .rodata
 330 bytes in section .text
 
 330 bytes of CODE  memory
  28 bytes of CONST memory

Errors: none
Warnings: none

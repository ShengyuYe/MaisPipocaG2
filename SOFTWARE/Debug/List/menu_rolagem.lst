###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      13/Sep/2017  17:11:39 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_rol #
#                    agem.c                                                   #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_rol #
#                    agem.c -lC C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\L #
#                    ist\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Lis #
#                    t\ -o C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\   #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\menu_ro #
#                    lagem.lst                                                #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\menu_rol #
#                    agem.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Aplicacao\menu_rolagem.c
      1          /*__________________________________________________________________________________
      2          |	DEXTRO SOLUÇÕES TECNOLÓGICAS
      3          |       
      4          |       ITAJAÍ - SC
      5          |       www.dextro.ind.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by DEXTRO  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by DEXTRO 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da DEXTRO  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       DEXTRO  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  menu_rolagem.c
     18          |       Descrição          :  implementa um menu de rolagem no 
     19          |                             LCD de caracteres
     20          | 
     21          |       Autor              :  Marcos Aquino
     22          |       Data criação       :  07/11/2016
     23          |
     24          |       Revisões           :  1.0.0.0
     25          |
     26          |
     27          | __________________________________________________________________________________
     28          */
     29          
     30          /***********************************************************************************
     31          *       Includes
     32          ***********************************************************************************/
     33          #include <stdio.h>
     34          #include <stdlib.h>
     35          #include <string.h>
     36          #include "menu_rolagem.h"
     37          #include "..\includes.h"
     38          
     39          /***********************************************************************************
     40          *       Definições locais
     41          ***********************************************************************************/
     42          
     43          /***********************************************************************************
     44          *       Constantes locais
     45          ***********************************************************************************/
     46          
     47          /***********************************************************************************
     48          *       Variaveis locais
     49          ***********************************************************************************/
     50          
     51          /***********************************************************************************
     52          *       Funções locais
     53          ***********************************************************************************/
     54          
     55          
     56          /***********************************************************************************
     57          *       Implementação das funções
     58          ***********************************************************************************/
     59          
     60          /***********************************************************************************
     61          *       Descrição       :       Implementação do menu de rolagem
     62          *       Parametros      :       (
     63          *       Retorno         :       nenhum
     64          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void MENUROLAGEM_show(char* titulo,char** opcoes,unsigned short int tam_opcoes,
     66                                void(*funcs[])(void)){
   \                     MENUROLAGEM_show:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     67            eTECLA tecla;
     68            unsigned short int indice=0;
   \   0000000C   0xF05F 0x0A00      MOVS     R10,#+0
     69            unsigned char tam = strlen(titulo);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4681             MOV      R9,R0
     70            
     71            HD44780_clearText();
   \   00000018   0x200C             MOVS     R0,#+12
   \   0000001A   0x.... 0x....      BL       HD44780_writeChar
     72            HD44780_posicionaTexto((16-tam)>>1,0);
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   0xF1D9 0x0010      RSBS     R0,R9,#+16
   \   00000028   0x1040             ASRS     R0,R0,#+1
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       HD44780_posicionaTexto
     73            HD44780_writeString(titulo);
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       HD44780_writeString
     74            
     75            for(;TECLADO_getContadorInatividade();){
   \                     ??MENUROLAGEM_show_0:
   \   00000036   0x.... 0x....      BL       TECLADO_getContadorInatividade
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD054             BEQ.N    ??MENUROLAGEM_show_1
     76              
     77              HD44780_posicionaTexto((16-tam)>>1,0);
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000044   0xF1D9 0x0010      RSBS     R0,R9,#+16
   \   00000048   0x1040             ASRS     R0,R0,#+1
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x.... 0x....      BL       HD44780_posicionaTexto
     78              HD44780_writeString(titulo);
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       HD44780_writeString
     79              HD44780_posicionaTexto(0,1);
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       HD44780_posicionaTexto
     80              HD44780_writeString(opcoes[indice]);
   \   0000005E   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000062   0xF855 0x002A      LDR      R0,[R5, R10, LSL #+2]
   \   00000066   0x.... 0x....      BL       HD44780_writeString
     81              
     82              tecla = TECLADO_getch();
   \   0000006A   0x.... 0x....      BL       TECLADO_getch
   \   0000006E   0x4680             MOV      R8,R0
     83              switch(tecla){
   \   00000070   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000074   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000078   0xD01D             BEQ.N    ??MENUROLAGEM_show_2
   \   0000007A   0xD331             BCC.N    ??MENUROLAGEM_show_3
   \   0000007C   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000080   0xD024             BEQ.N    ??MENUROLAGEM_show_4
   \   00000082   0xD319             BCC.N    ??MENUROLAGEM_show_5
   \   00000084   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000088   0xD12A             BNE.N    ??MENUROLAGEM_show_3
     84                case TECLA_ENTER:
     85                     if(funcs[indice]!=NULL){
   \                     ??MENUROLAGEM_show_6:
   \   0000008A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000008E   0xF857 0x002A      LDR      R0,[R7, R10, LSL #+2]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD008             BEQ.N    ??MENUROLAGEM_show_7
     86                       funcs[indice]();
   \   00000096   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000009A   0xF857 0x002A      LDR      R0,[R7, R10, LSL #+2]
   \   0000009E   0x4780             BLX      R0
     87                       HD44780_clearText();
   \   000000A0   0x200C             MOVS     R0,#+12
   \   000000A2   0x.... 0x....      BL       HD44780_writeChar
   \   000000A6   0xE005             B.N      ??MENUROLAGEM_show_8
     88                     }
     89                     else
     90                       if(indice==(tam_opcoes-1))
   \                     ??MENUROLAGEM_show_7:
   \   000000A8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000AC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   0x1E70             SUBS     R0,R6,#+1
   \   000000B0   0x4582             CMP      R10,R0
   \   000000B2   0xD019             BEQ.N    ??MENUROLAGEM_show_9
     91                         return;
     92                     break;
   \                     ??MENUROLAGEM_show_8:
   \   000000B4   0xE014             B.N      ??MENUROLAGEM_show_3
     93                case TECLA_ESC:
     94                     return;
   \                     ??MENUROLAGEM_show_2:
   \   000000B6   0xE017             B.N      ??MENUROLAGEM_show_9
     95                case TECLA_INC:
     96                     indice = (indice+1) % tam_opcoes;
   \                     ??MENUROLAGEM_show_5:
   \   000000B8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000BC   0xF11A 0x0001      ADDS     R0,R10,#+1
   \   000000C0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C2   0xFB90 0xF1F6      SDIV     R1,R0,R6
   \   000000C6   0xFB06 0x0A11      MLS      R10,R6,R1,R0
     97                     break;
   \   000000CA   0xE009             B.N      ??MENUROLAGEM_show_3
     98                case TECLA_DEC:
     99                     if(indice)
   \                     ??MENUROLAGEM_show_4:
   \   000000CC   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000D0   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000D4   0xD002             BEQ.N    ??MENUROLAGEM_show_10
    100                       indice--;
   \   000000D6   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000000DA   0xE001             B.N      ??MENUROLAGEM_show_11
    101                     else
    102                       indice = tam_opcoes-1;
   \                     ??MENUROLAGEM_show_10:
   \   000000DC   0x1E70             SUBS     R0,R6,#+1
   \   000000DE   0x4682             MOV      R10,R0
    103                     break;
    104              }
    105                  
    106              vTaskDelay(50);
   \                     ??MENUROLAGEM_show_11:
   \                     ??MENUROLAGEM_show_3:
   \   000000E0   0x2032             MOVS     R0,#+50
   \   000000E2   0x.... 0x....      BL       vTaskDelay
   \   000000E6   0xE7A6             B.N      ??MENUROLAGEM_show_0
    107            }  
    108          }
   \                     ??MENUROLAGEM_show_1:
   \                     ??MENUROLAGEM_show_9:
   \   000000E8   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    109          /***********************************************************************************
    110          *       Fim do arquivo
    111          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   MENUROLAGEM_show
        32   -- Indirect call
        32   -> HD44780_posicionaTexto
        32   -> HD44780_writeChar
        32   -> HD44780_writeString
        32   -> TECLADO_getContadorInatividade
        32   -> TECLADO_getch
        32   -> strlen
        32   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     236  MENUROLAGEM_show

 
 236 bytes in section .text
 
 236 bytes of CODE memory

Errors: none
Warnings: none

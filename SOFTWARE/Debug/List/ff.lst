###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      06/Jul/2017  16:40:34 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\FILESYSTEM\ff.c                   #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\FILESYSTEM\ff.c -lC               #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ff.lst                         #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ff.o                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\FILESYSTEM\ff.c
      1          /*----------------------------------------------------------------------------/
      2          /  FatFs - FAT file system module  R0.08b                 (C)ChaN, 2011
      3          /-----------------------------------------------------------------------------/
      4          / FatFs module is a generic FAT file system module for small embedded systems.
      5          / This is a free software that opened for education, research and commercial
      6          / developments under license policy of following terms.
      7          /
      8          /  Copyright (C) 2011, ChaN, all right reserved.
      9          /
     10          / * The FatFs module is a free software and there is NO WARRANTY.
     11          / * No restriction on use. You can use, modify and redistribute it for
     12          /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
     13          / * Redistributions of source code must retain the above copyright notice.
     14          /
     15          /-----------------------------------------------------------------------------/
     16          / Feb 26,'06 R0.00  Prototype.
     17          /
     18          / Apr 29,'06 R0.01  First stable version.
     19          /
     20          / Jun 01,'06 R0.02  Added FAT12 support.
     21          /                   Removed unbuffered mode.
     22          /                   Fixed a problem on small (<32M) partition.
     23          / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
     24          /
     25          / Sep 22,'06 R0.03  Added f_rename().
     26          /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
     27          / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
     28          /                   Fixed f_mkdir() creates incorrect directory on FAT32.
     29          /
     30          / Feb 04,'07 R0.04  Supported multiple drive system.
     31          /                   Changed some interfaces for multiple drive system.
     32          /                   Changed f_mountdrv() to f_mount().
     33          /                   Added f_mkfs().
     34          / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
     35          /                   Added a capability of extending file size to f_lseek().
     36          /                   Added minimization level 3.
     37          /                   Fixed an endian sensitive code in f_mkfs().
     38          / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
     39          /                   Added FSInfo support.
     40          /                   Fixed DBCS name can result FR_INVALID_NAME.
     41          /                   Fixed short seek (<= csize) collapses the file object.
     42          /
     43          / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
     44          /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
     45          /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
     46          / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
     47          /                   Fixed off by one error at FAT sub-type determination.
     48          /                   Fixed btr in f_read() can be mistruncated.
     49          /                   Fixed cached sector is not flushed when create and close without write.
     50          /
     51          / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
     52          /                   Improved performance of f_lseek() on moving to the same or following cluster.
     53          /
     54          / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
     55          /                   Added long file name feature.
     56          /                   Added multiple code page feature.
     57          /                   Added re-entrancy for multitask operation.
     58          /                   Added auto cluster size selection to f_mkfs().
     59          /                   Added rewind option to f_readdir().
     60          /                   Changed result code of critical errors.
     61          /                   Renamed string functions to avoid name collision.
     62          / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
     63          /                   Added multiple sector size feature.
     64          / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
     65          /                   Fixed wrong cache control in f_lseek().
     66          /                   Added relative path feature.
     67          /                   Added f_chdir() and f_chdrive().
     68          /                   Added proper case conversion to extended char.
     69          / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
     70          /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
     71          /                   Fixed name matching error on the 13 char boundary.
     72          /                   Added a configuration option, _LFN_UNICODE.
     73          /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
     74          /
     75          / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
     76          /                   Added file lock feature. (_FS_SHARE)
     77          /                   Added fast seek feature. (_USE_FASTSEEK)
     78          /                   Changed some types on the API, XCHAR->TCHAR.
     79          /                   Changed fname member in the FILINFO structure on Unicode cfg.
     80          /                   String functions support UTF-8 encoding files on Unicode cfg.
     81          / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
     82          /                   Added sector erase feature. (_USE_ERASE)
     83          /                   Moved file lock semaphore table from fs object to the bss.
     84          /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name contains ';'.
     85          /                   Fixed f_mkfs() creates wrong FAT32 volume.
     86          / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
     87          /                   f_lseek() reports required table size on creating CLMP.
     88          /                   Extended format syntax of f_printf function.
     89          /                   Ignores duplicated directory separators in given path names.
     90          /---------------------------------------------------------------------------*/
     91          
     92          #include "ff.h"			/* FatFs configurations and declarations */
     93          #include "diskio.h"		/* Declarations of low level disk I/O functions */
     94          
     95          
     96          /*--------------------------------------------------------------------------
     97          
     98             Module Private Definitions
     99          
    100          ---------------------------------------------------------------------------*/
    101          
    102          #if _FATFS != 8237
    103          #error Wrong include file (ff.h).
    104          #endif
    105          
    106          
    107          /* Definitions on sector size */
    108          #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
    109          #error Wrong sector size.
    110          #endif
    111          #if _MAX_SS != 512
    112          #define	SS(fs)	((fs)->ssize)	/* Multiple sector size */
    113          #else
    114          #define	SS(fs)	512U			/* Fixed sector size */
    115          #endif
    116          
    117          
    118          /* Reentrancy related */
    119          #if _FS_REENTRANT
    120          #if _USE_LFN == 1
    121          #error Static LFN work area must not be used in re-entrant configuration.
    122          #endif
    123          #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
    124          #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
    125          #else
    126          #define	ENTER_FF(fs)
    127          #define LEAVE_FF(fs, res)	return res
    128          #endif
    129          
    130          #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
    131          
    132          
    133          /* File shareing feature */
    134          #if _FS_SHARE
    135          #if _FS_READONLY
    136          #error _FS_SHARE must be 0 on read-only cfg.
    137          #endif
    138          typedef struct {
    139          	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
    140          	DWORD clu;				/* File ID 2, directory */
    141          	WORD idx;				/* File ID 3, directory index */
    142          	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
    143          } FILESEM;
    144          #endif
    145          
    146          
    147          /* Misc definitions */
    148          #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
    149          #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16);}
    150          
    151          
    152          /* DBCS code ranges and SBCS extend char conversion table */
    153          
    154          #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
    155          #define _DF1S	0x81	/* DBC 1st byte range 1 start */
    156          #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
    157          #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
    158          #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
    159          #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
    160          #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
    161          #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
    162          #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
    163          
    164          #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
    165          #define _DF1S	0x81
    166          #define _DF1E	0xFE
    167          #define _DS1S	0x40
    168          #define _DS1E	0x7E
    169          #define _DS2S	0x80
    170          #define _DS2E	0xFE
    171          
    172          #elif _CODE_PAGE == 949	/* Korean */
    173          #define _DF1S	0x81
    174          #define _DF1E	0xFE
    175          #define _DS1S	0x41
    176          #define _DS1E	0x5A
    177          #define _DS2S	0x61
    178          #define _DS2E	0x7A
    179          #define _DS3S	0x81
    180          #define _DS3E	0xFE
    181          
    182          #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
    183          #define _DF1S	0x81
    184          #define _DF1E	0xFE
    185          #define _DS1S	0x40
    186          #define _DS1E	0x7E
    187          #define _DS2S	0xA1
    188          #define _DS2E	0xFE
    189          
    190          #elif _CODE_PAGE == 437	/* U.S. (OEM) */
    191          #define _DF1S	0
    192          #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    193          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    194          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    195          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    196          
    197          #elif _CODE_PAGE == 720	/* Arabic (OEM) */
    198          #define _DF1S	0
    199          #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x49,0x49,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    200          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    201          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    202          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    203          
    204          #elif _CODE_PAGE == 737	/* Greek (OEM) */
    205          #define _DF1S	0
    206          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
    207          				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    208          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    209          				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    210          
    211          #elif _CODE_PAGE == 775	/* Baltic (OEM) */
    212          #define _DF1S	0
    213          #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    214          				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    215          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    216          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    217          
    218          #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
    219          #define _DF1S	0
    220          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    221          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    222          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    223          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    224          
    225          #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
    226          #define _DF1S	0
    227          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0x9F, \
    228          				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
    229          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    230          				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
    231          
    232          #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
    233          #define _DF1S	0
    234          #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
    235          				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
    236          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
    237          				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
    238          
    239          #elif _CODE_PAGE == 857	/* Turkish (OEM) */
    240          #define _DF1S	0
    241          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
    242          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    243          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    244          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    245          
    246          #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
    247          #define _DF1S	0
    248          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    249          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    250          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    251          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    252          
    253          #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
    254          #define _DF1S	0
    255          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    256          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    257          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    258          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    259          
    260          #elif _CODE_PAGE == 866	/* Russian (OEM) */
    261          #define _DF1S	0
    262          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    263          				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    264          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    265          				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    266          
    267          #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
    268          #define _DF1S	0
    269          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    270          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    271          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    272          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    273          
    274          #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
    275          #define _DF1S	0
    276          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    277          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xA3,0xB4,0xB5,0xB6,0xB7,0xB8,0xA5,0xAA,0xBB,0xBC,0xBD,0xBC,0xAF, \
    278          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    279          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    280          
    281          #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
    282          #define _DF1S	0
    283          #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x80,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    284          				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB2,0xA5,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xA3,0xBD,0xBD,0xAF, \
    285          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    286          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF}
    287          
    288          #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
    289          #define _DF1S	0
    290          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xAd,0x9B,0x8C,0x9D,0xAE,0x9F, \
    291          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    292          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    293          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    294          
    295          #elif _CODE_PAGE == 1253 /* Greek (Windows) */
    296          #define _DF1S	0
    297          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    298          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    299          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xA2,0xB8,0xB9,0xBA, \
    300          				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xBC,0xFD,0xBF,0xFF}
    301          
    302          #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
    303          #define _DF1S	0
    304          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    305          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    306          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    307          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    308          
    309          #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
    310          #define _DF1S	0
    311          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    312          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    313          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    314          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    315          
    316          #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
    317          #define _DF1S	0
    318          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    319          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    320          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    321          				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,0xF3,0x4F,0xF5,0xF6,0xF7,0xF8,0x55,0xFA,0x55,0x55,0xFD,0xFE,0xFF}
    322          
    323          #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
    324          #define _DF1S	0
    325          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    326          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xBC,0xBD,0xBE,0xAF, \
    327          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    328          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    329          
    330          #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
    331          #define _DF1S	0
    332          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0xAC,0x9D,0x9E,0x9F, \
    333          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    334          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    335          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xFE,0x9F}
    336          
    337          #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
    338          #if _USE_LFN
    339          #error Cannot use LFN feature without valid code page.
    340          #endif
    341          #define _DF1S	0
    342          
    343          #else
    344          #error Unknown code page
    345          
    346          #endif
    347          
    348          
    349          /* Character code support macros */
    350          #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
    351          #define IsLower(c)	(((c)>='a')&&((c)<='z'))
    352          #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
    353          
    354          #if _DF1S		/* Code page is DBCS */
    355          
    356          #ifdef _DF2S	/* Two 1st byte areas */
    357          #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) <= _DF2E))
    358          #else			/* One 1st byte area */
    359          #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
    360          #endif
    361          
    362          #ifdef _DS3S	/* Three 2nd byte areas */
    363          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E) || ((BYTE)(c) >= _DS3S && (BYTE)(c) <= _DS3E))
    364          #else			/* Two 2nd byte areas */
    365          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E))
    366          #endif
    367          
    368          #else			/* Code page is SBCS */
    369          
    370          #define IsDBCS1(c)	0
    371          #define IsDBCS2(c)	0
    372          
    373          #endif /* _DF1S */
    374          
    375          
    376          /* Name status flags */
    377          #define NS			11		/* Index of name status byte in fn[] */
    378          #define NS_LOSS		0x01	/* Out of 8.3 format */
    379          #define NS_LFN		0x02	/* Force to create LFN entry */
    380          #define NS_LAST		0x04	/* Last segment */
    381          #define NS_BODY		0x08	/* Lower case flag (body) */
    382          #define NS_EXT		0x10	/* Lower case flag (ext) */
    383          #define NS_DOT		0x20	/* Dot entry */
    384          
    385          
    386          /* FAT sub-type boundaries */
    387          /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
    388          #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
    389          #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
    390          
    391          
    392          /* FatFs refers the members in the FAT structures as byte array instead of
    393          / structure member because the structure is not binary compatible between
    394          / different platforms */
    395          
    396          #define BS_jmpBoot			0	/* Jump instruction (3) */
    397          #define BS_OEMName			3	/* OEM name (8) */
    398          #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
    399          #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
    400          #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
    401          #define BPB_NumFATs			16	/* Number of FAT copies (1) */
    402          #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
    403          #define BPB_TotSec16		19	/* Volume size [sector] (2) */
    404          #define BPB_Media			21	/* Media descriptor (1) */
    405          #define BPB_FATSz16			22	/* FAT size [sector] (2) */
    406          #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
    407          #define BPB_NumHeads		26	/* Number of heads (2) */
    408          #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
    409          #define BPB_TotSec32		32	/* Volume size [sector] (4) */
    410          #define BS_DrvNum			36	/* Physical drive number (2) */
    411          #define BS_BootSig			38	/* Extended boot signature (1) */
    412          #define BS_VolID			39	/* Volume serial number (4) */
    413          #define BS_VolLab			43	/* Volume label (8) */
    414          #define BS_FilSysType		54	/* File system type (1) */
    415          #define BPB_FATSz32			36	/* FAT size [sector] (4) */
    416          #define BPB_ExtFlags		40	/* Extended flags (2) */
    417          #define BPB_FSVer			42	/* File system version (2) */
    418          #define BPB_RootClus		44	/* Root dir first cluster (4) */
    419          #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
    420          #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
    421          #define BS_DrvNum32			64	/* Physical drive number (2) */
    422          #define BS_BootSig32		66	/* Extended boot signature (1) */
    423          #define BS_VolID32			67	/* Volume serial number (4) */
    424          #define BS_VolLab32			71	/* Volume label (8) */
    425          #define BS_FilSysType32		82	/* File system type (1) */
    426          #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
    427          #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
    428          #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
    429          #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
    430          #define MBR_Table			446	/* MBR: Partition table offset (2) */
    431          #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
    432          #define BS_55AA				510	/* Boot sector signature (2) */
    433          
    434          #define	DIR_Name			0	/* Short file name (11) */
    435          #define	DIR_Attr			11	/* Attribute (1) */
    436          #define	DIR_NTres			12	/* NT flag (1) */
    437          #define	DIR_CrtTime			14	/* Created time (2) */
    438          #define	DIR_CrtDate			16	/* Created date (2) */
    439          #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
    440          #define	DIR_WrtTime			22	/* Modified time (2) */
    441          #define	DIR_WrtDate			24	/* Modified date (2) */
    442          #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
    443          #define	DIR_FileSize		28	/* File size (4) */
    444          #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
    445          #define	LDIR_Attr			11	/* LFN attribute (1) */
    446          #define	LDIR_Type			12	/* LFN type (1) */
    447          #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
    448          #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
    449          #define	SZ_DIR				32		/* Size of a directory entry */
    450          #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
    451          #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
    452          #define	NDDE				0x05	/* Replacement of a character collides with DDE */
    453          
    454          
    455          /*------------------------------------------------------------*/
    456          /* Work area                                                  */
    457          
    458          #if _VOLUMES
    459          static

   \                                 In section .bss, align 4
    460          FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
   \                     FatFs:
   \   00000000                      DS8 8
    461          #else
    462          #error Number of drives must not be 0.
    463          #endif
    464          
    465          static

   \                                 In section .bss, align 2
    466          WORD Fsid;				/* File system mount ID */
   \                     Fsid:
   \   00000000                      DS8 2
    467          
    468          #if _FS_RPATH
    469          static
    470          BYTE CurrVol;			/* Current drive */
    471          #endif
    472          
    473          #if _FS_SHARE
    474          static
    475          FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
    476          #endif
    477          
    478          #if _USE_LFN == 0			/* No LFN */
    479          #define	DEF_NAMEBUF			BYTE sfn[12]
    480          #define INIT_BUF(dobj)		(dobj).fn = sfn
    481          #define	FREE_BUF()
    482          
    483          #elif _USE_LFN == 1			/* LFN with static LFN working buffer */

   \                                 In section .bss, align 4
    484          static WCHAR LfnBuf[_MAX_LFN+1];
   \                     LfnBuf:
   \   00000000                      DS8 512
    485          #define	DEF_NAMEBUF			BYTE sfn[12]
    486          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
    487          #define	FREE_BUF()
    488          
    489          #elif _USE_LFN == 2 		/* LFN with dynamic LFN working buffer on the stack */
    490          #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
    491          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
    492          #define	FREE_BUF()
    493          
    494          #elif _USE_LFN == 3 		/* LFN with dynamic LFN working buffer on the heap */
    495          #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
    496          #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
    497          							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
    498          							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
    499          #define	FREE_BUF()			ff_memfree(lfn)
    500          
    501          #else
    502          #error Wrong LFN configuration.
    503          #endif
    504          
    505          
    506          
    507          
    508          /*--------------------------------------------------------------------------
    509          
    510             Module Private Functions
    511          
    512          ---------------------------------------------------------------------------*/
    513          
    514          
    515          /*-----------------------------------------------------------------------*/
    516          /* String functions                                                      */
    517          /*-----------------------------------------------------------------------*/
    518          
    519          /* Copy memory to memory */

   \                                 In section .text, align 2, keep-with-next
    520          static
    521          void mem_cpy (void* dst, const void* src, UINT cnt) {
    522          	BYTE *d = (BYTE*)dst;
    523          	const BYTE *s = (const BYTE*)src;
   \                     mem_cpy:
   \   00000000   0xE003             B.N      ??mem_cpy_0
    524          
    525          #if _WORD_ACCESS == 1
    526          	while (cnt >= sizeof(int)) {
    527          		*(int*)d = *(int*)s;
    528          		d += sizeof(int); s += sizeof(int);
    529          		cnt -= sizeof(int);
    530          	}
    531          #endif
    532          	while (cnt--)
    533          		*d++ = *s++;
   \                     ??mem_cpy_1:
   \   00000002   0x780B             LDRB     R3,[R1, #+0]
   \   00000004   0x7003             STRB     R3,[R0, #+0]
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \                     ??mem_cpy_0:
   \   0000000A   0x0013             MOVS     R3,R2
   \   0000000C   0x1E5A             SUBS     R2,R3,#+1
   \   0000000E   0x2B00             CMP      R3,#+0
   \   00000010   0xD1F7             BNE.N    ??mem_cpy_1
    534          }
   \   00000012   0x4770             BX       LR               ;; return
    535          
    536          /* Fill memory */

   \                                 In section .text, align 2, keep-with-next
    537          static
    538          void mem_set (void* dst, int val, UINT cnt) {
    539          	BYTE *d = (BYTE*)dst;
   \                     mem_set:
   \   00000000   0xE001             B.N      ??mem_set_0
    540          
    541          	while (cnt--)
    542          		*d++ = (BYTE)val;
   \                     ??mem_set_1:
   \   00000002   0x7001             STRB     R1,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??mem_set_0:
   \   00000006   0x0013             MOVS     R3,R2
   \   00000008   0x1E5A             SUBS     R2,R3,#+1
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD1F9             BNE.N    ??mem_set_1
    543          }
   \   0000000E   0x4770             BX       LR               ;; return
    544          
    545          /* Compare memory to memory */

   \                                 In section .text, align 2, keep-with-next
    546          static
    547          int mem_cmp (const void* dst, const void* src, UINT cnt) {
   \                     mem_cmp:
   \   00000000   0xB410             PUSH     {R4}
    548          	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    549          	int r = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    550          
    551          	while (cnt-- && (r = *d++ - *s++) == 0) ;
   \                     ??mem_cmp_0:
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x1E62             SUBS     R2,R4,#+1
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD006             BEQ.N    ??mem_cmp_1
   \   0000000C   0x7803             LDRB     R3,[R0, #+0]
   \   0000000E   0x780C             LDRB     R4,[R1, #+0]
   \   00000010   0x1B1B             SUBS     R3,R3,R4
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2B00             CMP      R3,#+0
   \   00000018   0xD0F4             BEQ.N    ??mem_cmp_0
    552          	return r;
   \                     ??mem_cmp_1:
   \   0000001A   0x0018             MOVS     R0,R3
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    553          }
    554          
    555          /* Check if chr is contained in the string */

   \                                 In section .text, align 2, keep-with-next
    556          static
    557          int chk_chr (const char* str, int chr) {
   \                     chk_chr:
   \   00000000   0xE000             B.N      ??chk_chr_0
    558          	while (*str && *str != chr) str++;
   \                     ??chk_chr_1:
   \   00000002   0x1C40             ADDS     R0,R0,#+1
   \                     ??chk_chr_0:
   \   00000004   0x7802             LDRB     R2,[R0, #+0]
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD002             BEQ.N    ??chk_chr_2
   \   0000000A   0x7802             LDRB     R2,[R0, #+0]
   \   0000000C   0x428A             CMP      R2,R1
   \   0000000E   0xD1F8             BNE.N    ??chk_chr_1
    559          	return *str;
   \                     ??chk_chr_2:
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x4770             BX       LR               ;; return
    560          }
    561          
    562          
    563          
    564          /*-----------------------------------------------------------------------*/
    565          /* Request/Release grant to access the volume                            */
    566          /*-----------------------------------------------------------------------*/
    567          #if _FS_REENTRANT
    568          
    569          static
    570          int lock_fs (
    571          	FATFS *fs		/* File system object */
    572          )
    573          {
    574          	return ff_req_grant(fs->sobj);
    575          }
    576          
    577          
    578          static
    579          void unlock_fs (
    580          	FATFS *fs,		/* File system object */
    581          	FRESULT res		/* Result code to be returned */
    582          )
    583          {
    584          	if (res != FR_NOT_ENABLED &&
    585          		res != FR_INVALID_DRIVE &&
    586          		res != FR_INVALID_OBJECT &&
    587          		res != FR_TIMEOUT) {
    588          		ff_rel_grant(fs->sobj);
    589          	}
    590          }
    591          #endif
    592          
    593          
    594          
    595          /*-----------------------------------------------------------------------*/
    596          /* File shareing control functions                                       */
    597          /*-----------------------------------------------------------------------*/
    598          #if _FS_SHARE
    599          
    600          static
    601          FRESULT chk_lock (	/* Check if the file can be accessed */
    602          	DIR* dj,		/* Directory object pointing the file to be checked */
    603          	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
    604          )
    605          {
    606          	UINT i, be;
    607          
    608          	/* Search file semaphore table */
    609          	for (i = be = 0; i < _FS_SHARE; i++) {
    610          		if (Files[i].fs) {	/* Existing entry */
    611          			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
    612          				Files[i].clu == dj->sclust &&
    613          				Files[i].idx == dj->index) break;
    614          		} else {			/* Blank entry */
    615          			be++;
    616          		}
    617          	}
    618          	if (i == _FS_SHARE)	/* The file is not opened */
    619          		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file? */
    620          
    621          	/* The file has been opened. Reject any open against writing file and all write mode open */
    622          	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
    623          }
    624          
    625          
    626          static
    627          int enq_lock (	/* Check if an entry is available for a new file */
    628          	FATFS* fs	/* File system object */
    629          )
    630          {
    631          	UINT i;
    632          
    633          	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    634          	return (i == _FS_SHARE) ? 0 : 1;
    635          }
    636          
    637          
    638          static
    639          UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
    640          	DIR* dj,	/* Directory object pointing the file to register or increment */
    641          	int acc		/* Desired access mode (0:Read, !0:Write) */
    642          )
    643          {
    644          	UINT i;
    645          
    646          
    647          	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
    648          		if (Files[i].fs == dj->fs &&
    649          			Files[i].clu == dj->sclust &&
    650          			Files[i].idx == dj->index) break;
    651          	}
    652          
    653          	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
    654          		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
    655          		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
    656          		Files[i].fs = dj->fs;
    657          		Files[i].clu = dj->sclust;
    658          		Files[i].idx = dj->index;
    659          		Files[i].ctr = 0;
    660          	}
    661          
    662          	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
    663          
    664          	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    665          
    666          	return i + 1;
    667          }
    668          
    669          
    670          static
    671          FRESULT dec_lock (	/* Decrement file open counter */
    672          	UINT i			/* Semaphore index */
    673          )
    674          {
    675          	WORD n;
    676          	FRESULT res;
    677          
    678          
    679          	if (--i < _FS_SHARE) {
    680          		n = Files[i].ctr;
    681          		if (n == 0x100) n = 0;
    682          		if (n) n--;
    683          		Files[i].ctr = n;
    684          		if (!n) Files[i].fs = 0;
    685          		res = FR_OK;
    686          	} else {
    687          		res = FR_INT_ERR;
    688          	}
    689          	return res;
    690          }
    691          
    692          
    693          static
    694          void clear_lock (	/* Clear lock entries of the volume */
    695          	FATFS *fs
    696          )
    697          {
    698          	UINT i;
    699          
    700          	for (i = 0; i < _FS_SHARE; i++) {
    701          		if (Files[i].fs == fs) Files[i].fs = 0;
    702          	}
    703          }
    704          #endif
    705          
    706          
    707          
    708          /*-----------------------------------------------------------------------*/
    709          /* Change window offset                                                  */
    710          /*-----------------------------------------------------------------------*/
    711          

   \                                 In section .text, align 2, keep-with-next
    712          static
    713          FRESULT move_window (
    714          	FATFS *fs,		/* File system object */
    715          	DWORD sector	/* Sector number to make appearance in the fs->win[] */
    716          )					/* Move to zero only writes back dirty window */
    717          {
   \                     move_window:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    718          	DWORD wsect;
    719          
    720          
    721          	wsect = fs->winsect;
   \   00000006   0x6AE6             LDR      R6,[R4, #+44]
    722          	if (wsect != sector) {	/* Changed current window */
   \   00000008   0x42AE             CMP      R6,R5
   \   0000000A   0xD031             BEQ.N    ??move_window_0
    723          #if !_FS_READONLY
    724          		if (fs->wflag) {	/* Write back dirty window if needed */
   \   0000000C   0x7920             LDRB     R0,[R4, #+4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD020             BEQ.N    ??move_window_1
    725          			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   \   00000012   0x2301             MOVS     R3,#+1
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0xF114 0x0130      ADDS     R1,R4,#+48
   \   0000001A   0x7860             LDRB     R0,[R4, #+1]
   \   0000001C   0x.... 0x....      BL       disk_write
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD001             BEQ.N    ??move_window_2
    726          				return FR_DISK_ERR;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE024             B.N      ??move_window_3
    727          			fs->wflag = 0;
   \                     ??move_window_2:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x7120             STRB     R0,[R4, #+4]
    728          			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   \   0000002C   0x6A20             LDR      R0,[R4, #+32]
   \   0000002E   0x69E1             LDR      R1,[R4, #+28]
   \   00000030   0x1808             ADDS     R0,R1,R0
   \   00000032   0x4286             CMP      R6,R0
   \   00000034   0xD20E             BCS.N    ??move_window_1
    729          				BYTE nf;
    730          				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   \   00000036   0x78E7             LDRB     R7,[R4, #+3]
   \   00000038   0xE009             B.N      ??move_window_4
    731          					wsect += fs->fsize;
   \                     ??move_window_5:
   \   0000003A   0x69E0             LDR      R0,[R4, #+28]
   \   0000003C   0x1986             ADDS     R6,R0,R6
    732          					disk_write(fs->drv, fs->win, wsect, 1);
   \   0000003E   0x2301             MOVS     R3,#+1
   \   00000040   0x0032             MOVS     R2,R6
   \   00000042   0xF114 0x0130      ADDS     R1,R4,#+48
   \   00000046   0x7860             LDRB     R0,[R4, #+1]
   \   00000048   0x.... 0x....      BL       disk_write
    733          				}
   \   0000004C   0x1E7F             SUBS     R7,R7,#+1
   \                     ??move_window_4:
   \   0000004E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   0x2F02             CMP      R7,#+2
   \   00000052   0xDAF2             BGE.N    ??move_window_5
    734          			}
    735          		}
    736          #endif
    737          		if (sector) {
   \                     ??move_window_1:
   \   00000054   0x2D00             CMP      R5,#+0
   \   00000056   0xD00B             BEQ.N    ??move_window_0
    738          			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   \   00000058   0x2301             MOVS     R3,#+1
   \   0000005A   0x002A             MOVS     R2,R5
   \   0000005C   0xF114 0x0130      ADDS     R1,R4,#+48
   \   00000060   0x7860             LDRB     R0,[R4, #+1]
   \   00000062   0x.... 0x....      BL       disk_read
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD001             BEQ.N    ??move_window_6
    739          				return FR_DISK_ERR;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE001             B.N      ??move_window_3
    740          			fs->winsect = sector;
   \                     ??move_window_6:
   \   0000006E   0x62E5             STR      R5,[R4, #+44]
    741          		}
    742          	}
    743          
    744          	return FR_OK;
   \                     ??move_window_0:
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??move_window_3:
   \   00000072   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    745          }
    746          
    747          
    748          
    749          
    750          /*-----------------------------------------------------------------------*/
    751          /* Clean-up cached data                                                  */
    752          /*-----------------------------------------------------------------------*/
    753          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    754          static
    755          FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
    756          	FATFS *fs	/* File system object */
    757          )
    758          {
   \                     sync:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    759          	FRESULT res;
    760          
    761          
    762          	res = move_window(fs, 0);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       move_window
   \   0000000C   0x0005             MOVS     R5,R0
    763          	if (res == FR_OK) {
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD15D             BNE.N    ??sync_0
    764          		/* Update FSInfo sector if needed */
    765          		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD152             BNE.N    ??sync_1
   \   0000001A   0x7960             LDRB     R0,[R4, #+5]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD04F             BEQ.N    ??sync_1
    766          			fs->winsect = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x62E0             STR      R0,[R4, #+44]
    767          			/* Create FSInfo structure */
    768          			mem_set(fs->win, 0, 512);
   \   00000024   0xF44F 0x7200      MOV      R2,#+512
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF114 0x0030      ADDS     R0,R4,#+48
   \   0000002E   0x.... 0x....      BL       mem_set
    769          			ST_WORD(fs->win+BS_55AA, 0xAA55);
   \   00000032   0x2055             MOVS     R0,#+85
   \   00000034   0xF884 0x022E      STRB     R0,[R4, #+558]
   \   00000038   0x20AA             MOVS     R0,#+170
   \   0000003A   0xF884 0x022F      STRB     R0,[R4, #+559]
    770          			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   \   0000003E   0x2052             MOVS     R0,#+82
   \   00000040   0xF884 0x0030      STRB     R0,[R4, #+48]
   \   00000044   0x2052             MOVS     R0,#+82
   \   00000046   0xF884 0x0031      STRB     R0,[R4, #+49]
   \   0000004A   0x2061             MOVS     R0,#+97
   \   0000004C   0xF884 0x0032      STRB     R0,[R4, #+50]
   \   00000050   0x2041             MOVS     R0,#+65
   \   00000052   0xF884 0x0033      STRB     R0,[R4, #+51]
    771          			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   \   00000056   0x2072             MOVS     R0,#+114
   \   00000058   0xF884 0x0214      STRB     R0,[R4, #+532]
   \   0000005C   0x2072             MOVS     R0,#+114
   \   0000005E   0xF884 0x0215      STRB     R0,[R4, #+533]
   \   00000062   0x2041             MOVS     R0,#+65
   \   00000064   0xF884 0x0216      STRB     R0,[R4, #+534]
   \   00000068   0x2061             MOVS     R0,#+97
   \   0000006A   0xF884 0x0217      STRB     R0,[R4, #+535]
    772          			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   \   0000006E   0x6920             LDR      R0,[R4, #+16]
   \   00000070   0xF884 0x0218      STRB     R0,[R4, #+536]
   \   00000074   0x6920             LDR      R0,[R4, #+16]
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0x0A00             LSRS     R0,R0,#+8
   \   0000007A   0xF884 0x0219      STRB     R0,[R4, #+537]
   \   0000007E   0x6920             LDR      R0,[R4, #+16]
   \   00000080   0x0C00             LSRS     R0,R0,#+16
   \   00000082   0xF884 0x021A      STRB     R0,[R4, #+538]
   \   00000086   0x6920             LDR      R0,[R4, #+16]
   \   00000088   0x0E00             LSRS     R0,R0,#+24
   \   0000008A   0xF884 0x021B      STRB     R0,[R4, #+539]
    773          			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   \   0000008E   0x68E0             LDR      R0,[R4, #+12]
   \   00000090   0xF884 0x021C      STRB     R0,[R4, #+540]
   \   00000094   0x68E0             LDR      R0,[R4, #+12]
   \   00000096   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   0x0A00             LSRS     R0,R0,#+8
   \   0000009A   0xF884 0x021D      STRB     R0,[R4, #+541]
   \   0000009E   0x68E0             LDR      R0,[R4, #+12]
   \   000000A0   0x0C00             LSRS     R0,R0,#+16
   \   000000A2   0xF884 0x021E      STRB     R0,[R4, #+542]
   \   000000A6   0x68E0             LDR      R0,[R4, #+12]
   \   000000A8   0x0E00             LSRS     R0,R0,#+24
   \   000000AA   0xF884 0x021F      STRB     R0,[R4, #+543]
    774          			/* Write it into the FSInfo sector */
    775          			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   \   000000AE   0x2301             MOVS     R3,#+1
   \   000000B0   0x6962             LDR      R2,[R4, #+20]
   \   000000B2   0xF114 0x0130      ADDS     R1,R4,#+48
   \   000000B6   0x7860             LDRB     R0,[R4, #+1]
   \   000000B8   0x.... 0x....      BL       disk_write
    776          			fs->fsi_flag = 0;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x7160             STRB     R0,[R4, #+5]
    777          		}
    778          		/* Make sure that no pending write process in the physical drive */
    779          		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
   \                     ??sync_1:
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x7860             LDRB     R0,[R4, #+1]
   \   000000C6   0x.... 0x....      BL       disk_ioctl
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD000             BEQ.N    ??sync_0
    780          			res = FR_DISK_ERR;
   \   000000CE   0x2501             MOVS     R5,#+1
    781          	}
    782          
    783          	return res;
   \                     ??sync_0:
   \   000000D0   0x0028             MOVS     R0,R5
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    784          }
    785          #endif
    786          
    787          
    788          
    789          
    790          /*-----------------------------------------------------------------------*/
    791          /* Get sector# from cluster#                                             */
    792          /*-----------------------------------------------------------------------*/
    793          
    794          

   \                                 In section .text, align 2, keep-with-next
    795          DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
    796          	FATFS *fs,		/* File system object */
    797          	DWORD clst		/* Cluster# to be converted */
    798          )
    799          {
    800          	clst -= 2;
   \                     clust2sect:
   \   00000000   0x1E89             SUBS     R1,R1,#+2
    801          	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   \   00000002   0x6982             LDR      R2,[R0, #+24]
   \   00000004   0x1E92             SUBS     R2,R2,#+2
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0xD301             BCC.N    ??clust2sect_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE003             B.N      ??clust2sect_1
    802          	return clst * fs->csize + fs->database;
   \                     ??clust2sect_0:
   \   0000000E   0x7882             LDRB     R2,[R0, #+2]
   \   00000010   0x6A80             LDR      R0,[R0, #+40]
   \   00000012   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \                     ??clust2sect_1:
   \   00000016   0x4770             BX       LR               ;; return
    803          }
    804          
    805          
    806          
    807          
    808          /*-----------------------------------------------------------------------*/
    809          /* FAT access - Read value of a FAT entry                                */
    810          /*-----------------------------------------------------------------------*/
    811          
    812          

   \                                 In section .text, align 2, keep-with-next
    813          DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    814          	FATFS *fs,	/* File system object */
    815          	DWORD clst	/* Cluster# to get the link information */
    816          )
    817          {
   \                     get_fat:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    818          	UINT wc, bc;
    819          	BYTE *p;
    820          
    821          
    822          	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   \   00000006   0x2D02             CMP      R5,#+2
   \   00000008   0xD302             BCC.N    ??get_fat_0
   \   0000000A   0x69A0             LDR      R0,[R4, #+24]
   \   0000000C   0x4285             CMP      R5,R0
   \   0000000E   0xD301             BCC.N    ??get_fat_1
    823          		return 1;
   \                     ??get_fat_0:
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE014             B.N      ??get_fat_2
    824          
    825          	switch (fs->fs_type) {
   \                     ??get_fat_1:
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD004             BEQ.N    ??get_fat_3
   \   0000001A   0xD30E             BCC.N    ??get_fat_4
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xD04A             BEQ.N    ??get_fat_5
   \   00000020   0xD332             BCC.N    ??get_fat_6
   \   00000022   0xE00A             B.N      ??get_fat_4
    826          	case FS_FAT12 :
    827          		bc = (UINT)clst; bc += bc / 2;
   \                     ??get_fat_3:
   \   00000024   0x002E             MOVS     R6,R5
   \   00000026   0xEB16 0x0656      ADDS     R6,R6,R6, LSR #+1
    828          		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   \   0000002A   0x6A20             LDR      R0,[R4, #+32]
   \   0000002C   0xEB10 0x2156      ADDS     R1,R0,R6, LSR #+9
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       move_window
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD002             BEQ.N    ??get_fat_7
    829          		wc = fs->win[bc % SS(fs)]; bc++;
    830          		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    831          		wc |= fs->win[bc % SS(fs)] << 8;
    832          		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    833          
    834          	case FS_FAT16 :
    835          		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    836          		p = &fs->win[clst * 2 % SS(fs)];
    837          		return LD_WORD(p);
    838          
    839          	case FS_FAT32 :
    840          		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    841          		p = &fs->win[clst * 4 % SS(fs)];
    842          		return LD_DWORD(p) & 0x0FFFFFFF;
    843          	}
    844          
    845          	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   \                     ??get_fat_4:
   \   0000003A   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??get_fat_2:
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??get_fat_7:
   \   00000040   0xF44F 0x7000      MOV      R0,#+512
   \   00000044   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   00000048   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   0000004C   0x1908             ADDS     R0,R1,R4
   \   0000004E   0xF890 0x7030      LDRB     R7,[R0, #+48]
   \   00000052   0x1C76             ADDS     R6,R6,#+1
   \   00000054   0x6A20             LDR      R0,[R4, #+32]
   \   00000056   0xEB10 0x2156      ADDS     R1,R0,R6, LSR #+9
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x.... 0x....      BL       move_window
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1EA             BNE.N    ??get_fat_4
   \                     ??get_fat_8:
   \   00000064   0xF44F 0x7000      MOV      R0,#+512
   \   00000068   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   0000006C   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   00000070   0x1908             ADDS     R0,R1,R4
   \   00000072   0xF890 0x0030      LDRB     R0,[R0, #+48]
   \   00000076   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
   \   0000007A   0x07E8             LSLS     R0,R5,#+31
   \   0000007C   0xD501             BPL.N    ??get_fat_9
   \   0000007E   0x0938             LSRS     R0,R7,#+4
   \   00000080   0xE001             B.N      ??get_fat_10
   \                     ??get_fat_9:
   \   00000082   0x0538             LSLS     R0,R7,#+20       ;; ZeroExtS R0,R7,#+20,#+20
   \   00000084   0x0D00             LSRS     R0,R0,#+20
   \                     ??get_fat_10:
   \   00000086   0xE7DA             B.N      ??get_fat_2
   \                     ??get_fat_6:
   \   00000088   0x6A20             LDR      R0,[R4, #+32]
   \   0000008A   0xEB10 0x2115      ADDS     R1,R0,R5, LSR #+8
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0x.... 0x....      BL       move_window
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD1D0             BNE.N    ??get_fat_4
   \                     ??get_fat_11:
   \   00000098   0x0068             LSLS     R0,R5,#+1
   \   0000009A   0xF44F 0x7100      MOV      R1,#+512
   \   0000009E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000A2   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A6   0x1910             ADDS     R0,R2,R4
   \   000000A8   0x3030             ADDS     R0,R0,#+48
   \   000000AA   0x7841             LDRB     R1,[R0, #+1]
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0xE7C3             B.N      ??get_fat_2
   \                     ??get_fat_5:
   \   000000B6   0x6A20             LDR      R0,[R4, #+32]
   \   000000B8   0xEB10 0x11D5      ADDS     R1,R0,R5, LSR #+7
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x.... 0x....      BL       move_window
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD1B9             BNE.N    ??get_fat_4
   \                     ??get_fat_12:
   \   000000C6   0x00A8             LSLS     R0,R5,#+2
   \   000000C8   0xF44F 0x7100      MOV      R1,#+512
   \   000000CC   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000D0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000D4   0x1910             ADDS     R0,R2,R4
   \   000000D6   0x3030             ADDS     R0,R0,#+48
   \   000000D8   0x78C1             LDRB     R1,[R0, #+3]
   \   000000DA   0x7882             LDRB     R2,[R0, #+2]
   \   000000DC   0x0412             LSLS     R2,R2,#+16
   \   000000DE   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   000000E2   0x7842             LDRB     R2,[R0, #+1]
   \   000000E4   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x4308             ORRS     R0,R0,R1
   \   000000EC   0x0100             LSLS     R0,R0,#+4        ;; ZeroExtS R0,R0,#+4,#+4
   \   000000EE   0x0900             LSRS     R0,R0,#+4
   \   000000F0   0xE7A5             B.N      ??get_fat_2
    846          }
    847          
    848          
    849          
    850          
    851          /*-----------------------------------------------------------------------*/
    852          /* FAT access - Change value of a FAT entry                              */
    853          /*-----------------------------------------------------------------------*/
    854          #if !_FS_READONLY
    855          

   \                                 In section .text, align 2, keep-with-next
    856          FRESULT put_fat (
    857          	FATFS *fs,	/* File system object */
    858          	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
    859          	DWORD val	/* New value to mark the cluster */
    860          )
    861          {
   \                     put_fat:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    862          	UINT bc;
    863          	BYTE *p;
    864          	FRESULT res;
    865          
    866          
    867          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   \   00000008   0x2D02             CMP      R5,#+2
   \   0000000A   0xD302             BCC.N    ??put_fat_0
   \   0000000C   0x69A0             LDR      R0,[R4, #+24]
   \   0000000E   0x4285             CMP      R5,R0
   \   00000010   0xD301             BCC.N    ??put_fat_1
    868          		res = FR_INT_ERR;
   \                     ??put_fat_0:
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xE082             B.N      ??put_fat_2
    869          
    870          	} else {
    871          		switch (fs->fs_type) {
   \                     ??put_fat_1:
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD004             BEQ.N    ??put_fat_3
   \   0000001C   0xD37B             BCC.N    ??put_fat_4
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD058             BEQ.N    ??put_fat_5
   \   00000022   0xD340             BCC.N    ??put_fat_6
   \   00000024   0xE077             B.N      ??put_fat_4
    872          		case FS_FAT12 :
    873          			bc = clst; bc += bc / 2;
   \                     ??put_fat_3:
   \   00000026   0x002F             MOVS     R7,R5
   \   00000028   0xEB17 0x0757      ADDS     R7,R7,R7, LSR #+1
    874          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   0000002C   0x6A20             LDR      R0,[R4, #+32]
   \   0000002E   0xEB10 0x2157      ADDS     R1,R0,R7, LSR #+9
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       move_window
    875          			if (res != FR_OK) break;
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD16C             BNE.N    ??put_fat_7
    876          			p = &fs->win[bc % SS(fs)];
   \                     ??put_fat_8:
   \   0000003E   0xF44F 0x7000      MOV      R0,#+512
   \   00000042   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \   00000046   0xFB01 0x7110      MLS      R1,R1,R0,R7
   \   0000004A   0x1908             ADDS     R0,R1,R4
   \   0000004C   0xF110 0x0130      ADDS     R1,R0,#+48
    877          			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   \   00000050   0x07E8             LSLS     R0,R5,#+31
   \   00000052   0xD505             BPL.N    ??put_fat_9
   \   00000054   0x7808             LDRB     R0,[R1, #+0]
   \   00000056   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005A   0xEA50 0x1006      ORRS     R0,R0,R6, LSL #+4
   \   0000005E   0xE000             B.N      ??put_fat_10
   \                     ??put_fat_9:
   \   00000060   0x0030             MOVS     R0,R6
   \                     ??put_fat_10:
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    878          			bc++;
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
    879          			fs->wflag = 1;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x7120             STRB     R0,[R4, #+4]
    880          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   0000006A   0x6A20             LDR      R0,[R4, #+32]
   \   0000006C   0xEB10 0x2157      ADDS     R1,R0,R7, LSR #+9
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       move_window
    881          			if (res != FR_OK) break;
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD14D             BNE.N    ??put_fat_7
    882          			p = &fs->win[bc % SS(fs)];
   \                     ??put_fat_11:
   \   0000007C   0xF44F 0x7100      MOV      R1,#+512
   \   00000080   0xFBB7 0xF2F1      UDIV     R2,R7,R1
   \   00000084   0xFB02 0x7211      MLS      R2,R2,R1,R7
   \   00000088   0x1911             ADDS     R1,R2,R4
   \   0000008A   0x3130             ADDS     R1,R1,#+48
    883          			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   \   0000008C   0x07EA             LSLS     R2,R5,#+31
   \   0000008E   0xD501             BPL.N    ??put_fat_12
   \   00000090   0x0932             LSRS     R2,R6,#+4
   \   00000092   0xE006             B.N      ??put_fat_13
   \                     ??put_fat_12:
   \   00000094   0x780A             LDRB     R2,[R1, #+0]
   \   00000096   0xF012 0x02F0      ANDS     R2,R2,#0xF0
   \   0000009A   0x0A33             LSRS     R3,R6,#+8
   \   0000009C   0xF013 0x030F      ANDS     R3,R3,#0xF
   \   000000A0   0x431A             ORRS     R2,R3,R2
   \                     ??put_fat_13:
   \   000000A2   0x700A             STRB     R2,[R1, #+0]
    884          			break;
   \   000000A4   0xE038             B.N      ??put_fat_7
    885          
    886          		case FS_FAT16 :
    887          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   \                     ??put_fat_6:
   \   000000A6   0x6A20             LDR      R0,[R4, #+32]
   \   000000A8   0xEB10 0x2115      ADDS     R1,R0,R5, LSR #+8
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       move_window
    888          			if (res != FR_OK) break;
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD12F             BNE.N    ??put_fat_7
    889          			p = &fs->win[clst * 2 % SS(fs)];
   \                     ??put_fat_14:
   \   000000B8   0x0069             LSLS     R1,R5,#+1
   \   000000BA   0xF44F 0x7200      MOV      R2,#+512
   \   000000BE   0xFBB1 0xF3F2      UDIV     R3,R1,R2
   \   000000C2   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   000000C6   0x1919             ADDS     R1,R3,R4
   \   000000C8   0x3130             ADDS     R1,R1,#+48
    890          			ST_WORD(p, (WORD)val);
   \   000000CA   0x700E             STRB     R6,[R1, #+0]
   \   000000CC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CE   0x0A32             LSRS     R2,R6,#+8
   \   000000D0   0x704A             STRB     R2,[R1, #+1]
    891          			break;
   \   000000D2   0xE021             B.N      ??put_fat_7
    892          
    893          		case FS_FAT32 :
    894          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   \                     ??put_fat_5:
   \   000000D4   0x6A20             LDR      R0,[R4, #+32]
   \   000000D6   0xEB10 0x11D5      ADDS     R1,R0,R5, LSR #+7
   \   000000DA   0x0020             MOVS     R0,R4
   \   000000DC   0x.... 0x....      BL       move_window
    895          			if (res != FR_OK) break;
   \   000000E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD118             BNE.N    ??put_fat_7
    896          			p = &fs->win[clst * 4 % SS(fs)];
   \                     ??put_fat_15:
   \   000000E6   0x00A9             LSLS     R1,R5,#+2
   \   000000E8   0xF44F 0x7200      MOV      R2,#+512
   \   000000EC   0xFBB1 0xF3F2      UDIV     R3,R1,R2
   \   000000F0   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   000000F4   0x1919             ADDS     R1,R3,R4
   \   000000F6   0x3130             ADDS     R1,R1,#+48
    897          			val |= LD_DWORD(p) & 0xF0000000;
   \   000000F8   0x78CA             LDRB     R2,[R1, #+3]
   \   000000FA   0x0612             LSLS     R2,R2,#+24
   \   000000FC   0xF012 0x4270      ANDS     R2,R2,#0xF0000000
   \   00000100   0x4316             ORRS     R6,R2,R6
    898          			ST_DWORD(p, val);
   \   00000102   0x700E             STRB     R6,[R1, #+0]
   \   00000104   0x0032             MOVS     R2,R6
   \   00000106   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000108   0x0A12             LSRS     R2,R2,#+8
   \   0000010A   0x704A             STRB     R2,[R1, #+1]
   \   0000010C   0x0C32             LSRS     R2,R6,#+16
   \   0000010E   0x708A             STRB     R2,[R1, #+2]
   \   00000110   0x0E32             LSRS     R2,R6,#+24
   \   00000112   0x70CA             STRB     R2,[R1, #+3]
    899          			break;
   \   00000114   0xE000             B.N      ??put_fat_7
    900          
    901          		default :
    902          			res = FR_INT_ERR;
   \                     ??put_fat_4:
   \   00000116   0x2002             MOVS     R0,#+2
    903          		}
    904          		fs->wflag = 1;
   \                     ??put_fat_7:
   \   00000118   0x2101             MOVS     R1,#+1
   \   0000011A   0x7121             STRB     R1,[R4, #+4]
    905          	}
    906          
    907          	return res;
   \                     ??put_fat_2:
   \   0000011C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    908          }
    909          #endif /* !_FS_READONLY */
    910          
    911          
    912          
    913          
    914          /*-----------------------------------------------------------------------*/
    915          /* FAT handling - Remove a cluster chain                                 */
    916          /*-----------------------------------------------------------------------*/
    917          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    918          static
    919          FRESULT remove_chain (
    920          	FATFS *fs,			/* File system object */
    921          	DWORD clst			/* Cluster# to remove a chain from */
    922          )
    923          {
   \                     remove_chain:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    924          	FRESULT res;
    925          	DWORD nxt;
    926          #if _USE_ERASE
    927          	DWORD scl = clst, ecl = clst, resion[2];
    928          #endif
    929          
    930          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   \   00000006   0x2E02             CMP      R6,#+2
   \   00000008   0xD302             BCC.N    ??remove_chain_0
   \   0000000A   0x69A0             LDR      R0,[R4, #+24]
   \   0000000C   0x4286             CMP      R6,R0
   \   0000000E   0xD301             BCC.N    ??remove_chain_1
    931          		res = FR_INT_ERR;
   \                     ??remove_chain_0:
   \   00000010   0x2502             MOVS     R5,#+2
   \   00000012   0xE027             B.N      ??remove_chain_2
    932          
    933          	} else {
    934          		res = FR_OK;
   \                     ??remove_chain_1:
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0xE009             B.N      ??remove_chain_3
    935          		while (clst < fs->n_fatent) {			/* Not a last link? */
    936          			nxt = get_fat(fs, clst);			/* Get cluster status */
    937          			if (nxt == 0) break;				/* Empty cluster? */
    938          			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    939          			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    940          			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    941          			if (res != FR_OK) break;
    942          			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   \                     ??remove_chain_4:
   \   00000018   0x6920             LDR      R0,[R4, #+16]
   \   0000001A   0xF110 0x0F01      CMN      R0,#+1
   \   0000001E   0xD004             BEQ.N    ??remove_chain_5
    943          				fs->free_clust++;
   \   00000020   0x6920             LDR      R0,[R4, #+16]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x6120             STR      R0,[R4, #+16]
    944          				fs->fsi_flag = 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x7160             STRB     R0,[R4, #+5]
    945          			}
    946          #if _USE_ERASE
    947          			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
    948          				ecl = nxt;
    949          			} else {				/* End of contiguous clusters */ 
    950          				resion[0] = clust2sect(fs, scl);					/* Start sector */
    951          				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
    952          				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
    953          				scl = ecl = nxt;
    954          			}
    955          #endif
    956          			clst = nxt;	/* Next cluster */
   \                     ??remove_chain_5:
   \   0000002A   0x003E             MOVS     R6,R7
   \                     ??remove_chain_3:
   \   0000002C   0x69A0             LDR      R0,[R4, #+24]
   \   0000002E   0x4286             CMP      R6,R0
   \   00000030   0xD218             BCS.N    ??remove_chain_2
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       get_fat
   \   0000003A   0x0007             MOVS     R7,R0
   \   0000003C   0x2F00             CMP      R7,#+0
   \   0000003E   0xD011             BEQ.N    ??remove_chain_2
   \                     ??remove_chain_6:
   \   00000040   0x2F01             CMP      R7,#+1
   \   00000042   0xD101             BNE.N    ??remove_chain_7
   \   00000044   0x2502             MOVS     R5,#+2
   \   00000046   0xE00D             B.N      ??remove_chain_2
   \                     ??remove_chain_7:
   \   00000048   0xF117 0x0F01      CMN      R7,#+1
   \   0000004C   0xD101             BNE.N    ??remove_chain_8
   \   0000004E   0x2501             MOVS     R5,#+1
   \   00000050   0xE008             B.N      ??remove_chain_2
   \                     ??remove_chain_8:
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x0031             MOVS     R1,R6
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       put_fat
   \   0000005C   0x0005             MOVS     R5,R0
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD0D9             BEQ.N    ??remove_chain_4
    957          		}
    958          	}
    959          
    960          	return res;
   \                     ??remove_chain_2:
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    961          }
    962          #endif
    963          
    964          
    965          
    966          
    967          /*-----------------------------------------------------------------------*/
    968          /* FAT handling - Stretch or Create a cluster chain                      */
    969          /*-----------------------------------------------------------------------*/
    970          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    971          static
    972          DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
    973          	FATFS *fs,			/* File system object */
    974          	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
    975          )
    976          {
   \                     create_chain:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    977          	DWORD cs, ncl, scl;
    978          	FRESULT res;
    979          
    980          
    981          	if (clst == 0) {		/* Create a new chain */
   \   00000006   0x2E00             CMP      R6,#+0
   \   00000008   0xD107             BNE.N    ??create_chain_0
    982          		scl = fs->last_clust;			/* Get suggested start point */
   \   0000000A   0x68E7             LDR      R7,[R4, #+12]
    983          		if (!scl || scl >= fs->n_fatent) scl = 1;
   \   0000000C   0x2F00             CMP      R7,#+0
   \   0000000E   0xD002             BEQ.N    ??create_chain_1
   \   00000010   0x69A0             LDR      R0,[R4, #+24]
   \   00000012   0x4287             CMP      R7,R0
   \   00000014   0xD30D             BCC.N    ??create_chain_2
   \                     ??create_chain_1:
   \   00000016   0x2701             MOVS     R7,#+1
   \   00000018   0xE00B             B.N      ??create_chain_2
    984          	}
    985          	else {					/* Stretch the current chain */
    986          		cs = get_fat(fs, clst);			/* Check the cluster status */
   \                     ??create_chain_0:
   \   0000001A   0x0031             MOVS     R1,R6
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       get_fat
    987          		if (cs < 2) return 1;			/* It is an invalid cluster */
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD201             BCS.N    ??create_chain_3
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE043             B.N      ??create_chain_4
    988          		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   \                     ??create_chain_3:
   \   0000002A   0x69A1             LDR      R1,[R4, #+24]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD340             BCC.N    ??create_chain_4
    989          		scl = clst;
   \                     ??create_chain_5:
   \   00000030   0x0037             MOVS     R7,R6
    990          	}
    991          
    992          	ncl = scl;				/* Start cluster */
   \                     ??create_chain_2:
   \   00000032   0x003D             MOVS     R5,R7
    993          	for (;;) {
    994          		ncl++;							/* Next cluster */
   \                     ??create_chain_6:
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
    995          		if (ncl >= fs->n_fatent) {		/* Wrap around */
   \   00000036   0x69A0             LDR      R0,[R4, #+24]
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xD304             BCC.N    ??create_chain_7
    996          			ncl = 2;
   \   0000003C   0x2502             MOVS     R5,#+2
    997          			if (ncl > scl) return 0;	/* No free cluster */
   \   0000003E   0x42AF             CMP      R7,R5
   \   00000040   0xD201             BCS.N    ??create_chain_7
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE035             B.N      ??create_chain_4
    998          		}
    999          		cs = get_fat(fs, ncl);			/* Get the cluster status */
   \                     ??create_chain_7:
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       get_fat
   1000          		if (cs == 0) break;				/* Found a free cluster */
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD11D             BNE.N    ??create_chain_8
   1001          		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1002          			return cs;
   1003          		if (ncl == scl) return 0;		/* No free cluster */
   1004          	}
   1005          
   1006          	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   \   00000052   0xF07F 0x4270      MVNS     R2,#-268435456
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       put_fat
   1007          	if (res == FR_OK && clst != 0) {
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD106             BNE.N    ??create_chain_9
   \   00000064   0x2E00             CMP      R6,#+0
   \   00000066   0xD004             BEQ.N    ??create_chain_9
   1008          		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   \   00000068   0x002A             MOVS     R2,R5
   \   0000006A   0x0031             MOVS     R1,R6
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       put_fat
   1009          	}
   1010          	if (res == FR_OK) {
   \                     ??create_chain_9:
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD114             BNE.N    ??create_chain_10
   1011          		fs->last_clust = ncl;			/* Update FSINFO */
   \   00000078   0x60E5             STR      R5,[R4, #+12]
   1012          		if (fs->free_clust != 0xFFFFFFFF) {
   \   0000007A   0x6920             LDR      R0,[R4, #+16]
   \   0000007C   0xF110 0x0F01      CMN      R0,#+1
   \   00000080   0xD016             BEQ.N    ??create_chain_11
   1013          			fs->free_clust--;
   \   00000082   0x6920             LDR      R0,[R4, #+16]
   \   00000084   0x1E40             SUBS     R0,R0,#+1
   \   00000086   0x6120             STR      R0,[R4, #+16]
   1014          			fs->fsi_flag = 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x7160             STRB     R0,[R4, #+5]
   \   0000008C   0xE010             B.N      ??create_chain_11
   1015          		}
   1016          	} else {
   \                     ??create_chain_8:
   \   0000008E   0xF110 0x0F01      CMN      R0,#+1
   \   00000092   0xD001             BEQ.N    ??create_chain_12
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xD100             BNE.N    ??create_chain_13
   \                     ??create_chain_12:
   \   00000098   0xE00B             B.N      ??create_chain_4
   \                     ??create_chain_13:
   \   0000009A   0x42BD             CMP      R5,R7
   \   0000009C   0xD1CA             BNE.N    ??create_chain_6
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xE007             B.N      ??create_chain_4
   1017          		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   \                     ??create_chain_10:
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x2801             CMP      R0,#+1
   \   000000A6   0xD102             BNE.N    ??create_chain_14
   \   000000A8   0xF05F 0x35FF      MOVS     R5,#-1
   \   000000AC   0xE000             B.N      ??create_chain_11
   \                     ??create_chain_14:
   \   000000AE   0x2501             MOVS     R5,#+1
   1018          	}
   1019          
   1020          	return ncl;		/* Return new cluster number or error code */
   \                     ??create_chain_11:
   \   000000B0   0x0028             MOVS     R0,R5
   \                     ??create_chain_4:
   \   000000B2   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1021          }
   1022          #endif /* !_FS_READONLY */
   1023          
   1024          
   1025          
   1026          /*-----------------------------------------------------------------------*/
   1027          /* FAT handling - Convert offset into cluster with link map table        */
   1028          /*-----------------------------------------------------------------------*/
   1029          
   1030          #if _USE_FASTSEEK
   1031          static
   1032          DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
   1033          	FIL* fp,		/* Pointer to the file object */
   1034          	DWORD ofs		/* File offset to be converted to cluster# */
   1035          )
   1036          {
   1037          	DWORD cl, ncl, *tbl;
   1038          
   1039          
   1040          	tbl = fp->cltbl + 1;	/* Top of CLMT */
   1041          	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
   1042          	for (;;) {
   1043          		ncl = *tbl++;			/* Number of cluters in the fragment */
   1044          		if (!ncl) return 0;		/* End of table? (error) */
   1045          		if (cl < ncl) break;	/* In this fragment? */
   1046          		cl -= ncl; tbl++;		/* Next fragment */
   1047          	}
   1048          	return cl + *tbl;	/* Return the cluster number */
   1049          }
   1050          #endif	/* _USE_FASTSEEK */
   1051          
   1052          
   1053          
   1054          /*-----------------------------------------------------------------------*/
   1055          /* Directory handling - Set directory index                              */
   1056          /*-----------------------------------------------------------------------*/
   1057          

   \                                 In section .text, align 2, keep-with-next
   1058          static
   1059          FRESULT dir_sdi (
   1060          	DIR *dj,		/* Pointer to directory object */
   1061          	WORD idx		/* Directory index number */
   1062          )
   1063          {
   \                     dir_sdi:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1064          	DWORD clst;
   1065          	WORD ic;
   1066          
   1067          
   1068          	dj->index = idx;
   \   00000006   0x80E5             STRH     R5,[R4, #+6]
   1069          	clst = dj->sclust;
   \   00000008   0x68A0             LDR      R0,[R4, #+8]
   1070          	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD003             BEQ.N    ??dir_sdi_0
   \   0000000E   0x6821             LDR      R1,[R4, #+0]
   \   00000010   0x6989             LDR      R1,[R1, #+24]
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD301             BCC.N    ??dir_sdi_1
   1071          		return FR_INT_ERR;
   \                     ??dir_sdi_0:
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xE048             B.N      ??dir_sdi_2
   1072          	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   \                     ??dir_sdi_1:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD105             BNE.N    ??dir_sdi_3
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0x2903             CMP      R1,#+3
   \   00000024   0xD101             BNE.N    ??dir_sdi_3
   1073          		clst = dj->fs->dirbase;
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x6A40             LDR      R0,[R0, #+36]
   1074          
   1075          	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   \                     ??dir_sdi_3:
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD10E             BNE.N    ??dir_sdi_4
   1076          		dj->clust = clst;
   \   0000002E   0x60E0             STR      R0,[R4, #+12]
   1077          		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x8900             LDRH     R0,[R0, #+8]
   \   00000034   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000036   0x4285             CMP      R5,R0
   \   00000038   0xD301             BCC.N    ??dir_sdi_5
   1078          			return FR_INT_ERR;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xE036             B.N      ??dir_sdi_2
   1079          		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   \                     ??dir_sdi_5:
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0x6A40             LDR      R0,[R0, #+36]
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0xEB10 0x1015      ADDS     R0,R0,R5, LSR #+4
   \   00000048   0x6120             STR      R0,[R4, #+16]
   \   0000004A   0xE023             B.N      ??dir_sdi_6
   1080          	}
   1081          	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
   1082          		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   \                     ??dir_sdi_4:
   \   0000004C   0x6821             LDR      R1,[R4, #+0]
   \   0000004E   0x7889             LDRB     R1,[R1, #+2]
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0x010E             LSLS     R6,R1,#+4
   \   00000054   0xE000             B.N      ??dir_sdi_7
   1083          		while (idx >= ic) {	/* Follow cluster chain */
   1084          			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1085          			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1086          			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   1087          				return FR_INT_ERR;
   1088          			idx -= ic;
   \                     ??dir_sdi_8:
   \   00000056   0x1BAD             SUBS     R5,R5,R6
   \                     ??dir_sdi_7:
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005C   0x42B5             CMP      R5,R6
   \   0000005E   0xD310             BCC.N    ??dir_sdi_9
   \   00000060   0x0001             MOVS     R1,R0
   \   00000062   0x6820             LDR      R0,[R4, #+0]
   \   00000064   0x.... 0x....      BL       get_fat
   \   00000068   0xF110 0x0F01      CMN      R0,#+1
   \   0000006C   0xD101             BNE.N    ??dir_sdi_10
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xE01C             B.N      ??dir_sdi_2
   \                     ??dir_sdi_10:
   \   00000072   0x2802             CMP      R0,#+2
   \   00000074   0xD303             BCC.N    ??dir_sdi_11
   \   00000076   0x6821             LDR      R1,[R4, #+0]
   \   00000078   0x6989             LDR      R1,[R1, #+24]
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD3EB             BCC.N    ??dir_sdi_8
   \                     ??dir_sdi_11:
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0xE014             B.N      ??dir_sdi_2
   1089          		}
   1090          		dj->clust = clst;
   \                     ??dir_sdi_9:
   \   00000082   0x60E0             STR      R0,[R4, #+12]
   1091          		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   \   00000084   0x0001             MOVS     R1,R0
   \   00000086   0x6820             LDR      R0,[R4, #+0]
   \   00000088   0x.... 0x....      BL       clust2sect
   \   0000008C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008E   0xEB10 0x1015      ADDS     R0,R0,R5, LSR #+4
   \   00000092   0x6120             STR      R0,[R4, #+16]
   1092          	}
   1093          
   1094          	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   \                     ??dir_sdi_6:
   \   00000094   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000096   0x2010             MOVS     R0,#+16
   \   00000098   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000009C   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   000000A0   0x6820             LDR      R0,[R4, #+0]
   \   000000A2   0xEB10 0x1041      ADDS     R0,R0,R1, LSL #+5
   \   000000A6   0x3030             ADDS     R0,R0,#+48
   \   000000A8   0x6160             STR      R0,[R4, #+20]
   1095          
   1096          	return FR_OK;	/* Seek succeeded */
   \   000000AA   0x2000             MOVS     R0,#+0
   \                     ??dir_sdi_2:
   \   000000AC   0xBD70             POP      {R4-R6,PC}       ;; return
   1097          }
   1098          
   1099          
   1100          
   1101          
   1102          /*-----------------------------------------------------------------------*/
   1103          /* Directory handling - Move directory index next                        */
   1104          /*-----------------------------------------------------------------------*/
   1105          

   \                                 In section .text, align 2, keep-with-next
   1106          static
   1107          FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   1108          	DIR *dj,		/* Pointer to directory object */
   1109          	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
   1110          )
   1111          {
   \                     dir_next:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1112          	DWORD clst;
   1113          	WORD i;
   1114          
   1115          
   1116          	i = dj->index + 1;
   \   00000006   0x88E0             LDRH     R0,[R4, #+6]
   \   00000008   0x1C46             ADDS     R6,R0,#+1
   1117          	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD002             BEQ.N    ??dir_next_0
   \   00000010   0x6920             LDR      R0,[R4, #+16]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??dir_next_1
   1118          		return FR_NO_FILE;
   \                     ??dir_next_0:
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0xE089             B.N      ??dir_next_2
   1119          
   1120          	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   \                     ??dir_next_1:
   \   0000001A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   00000022   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD174             BNE.N    ??dir_next_3
   1121          		dj->sect++;					/* Next sector */
   \   0000002A   0x6920             LDR      R0,[R4, #+16]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6120             STR      R0,[R4, #+16]
   1122          
   1123          		if (dj->clust == 0) {	/* Static table */
   \   00000030   0x68E0             LDR      R0,[R4, #+12]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD106             BNE.N    ??dir_next_4
   1124          			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x8900             LDRH     R0,[R0, #+8]
   \   0000003A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003C   0x4286             CMP      R6,R0
   \   0000003E   0xD369             BCC.N    ??dir_next_3
   1125          				return FR_NO_FILE;
   \   00000040   0x2004             MOVS     R0,#+4
   \   00000042   0xE074             B.N      ??dir_next_2
   1126          		}
   1127          		else {					/* Dynamic table */
   1128          			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   \                     ??dir_next_4:
   \   00000044   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x7880             LDRB     R0,[R0, #+2]
   \   0000004A   0x1E40             SUBS     R0,R0,#+1
   \   0000004C   0xEA10 0x1F16      TST      R0,R6, LSR #+4
   \   00000050   0xD160             BNE.N    ??dir_next_3
   1129          				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   \   00000052   0x68E1             LDR      R1,[R4, #+12]
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0x.... 0x....      BL       get_fat
   \   0000005A   0x0007             MOVS     R7,R0
   1130          				if (clst <= 1) return FR_INT_ERR;
   \   0000005C   0x2F02             CMP      R7,#+2
   \   0000005E   0xD201             BCS.N    ??dir_next_5
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xE064             B.N      ??dir_next_2
   1131          				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   \                     ??dir_next_5:
   \   00000064   0xF117 0x0F01      CMN      R7,#+1
   \   00000068   0xD101             BNE.N    ??dir_next_6
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE05F             B.N      ??dir_next_2
   1132          				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   \                     ??dir_next_6:
   \   0000006E   0x6820             LDR      R0,[R4, #+0]
   \   00000070   0x6980             LDR      R0,[R0, #+24]
   \   00000072   0x4287             CMP      R7,R0
   \   00000074   0xD348             BCC.N    ??dir_next_7
   1133          #if !_FS_READONLY
   1134          					BYTE c;
   1135          					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   \   00000076   0x2D00             CMP      R5,#+0
   \   00000078   0xD101             BNE.N    ??dir_next_8
   \   0000007A   0x2004             MOVS     R0,#+4
   \   0000007C   0xE057             B.N      ??dir_next_2
   1136          					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   \                     ??dir_next_8:
   \   0000007E   0x68E1             LDR      R1,[R4, #+12]
   \   00000080   0x6820             LDR      R0,[R4, #+0]
   \   00000082   0x.... 0x....      BL       create_chain
   \   00000086   0x0007             MOVS     R7,R0
   1137          					if (clst == 0) return FR_DENIED;			/* No free cluster */
   \   00000088   0x2F00             CMP      R7,#+0
   \   0000008A   0xD101             BNE.N    ??dir_next_9
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0xE04E             B.N      ??dir_next_2
   1138          					if (clst == 1) return FR_INT_ERR;
   \                     ??dir_next_9:
   \   00000090   0x2F01             CMP      R7,#+1
   \   00000092   0xD101             BNE.N    ??dir_next_10
   \   00000094   0x2002             MOVS     R0,#+2
   \   00000096   0xE04A             B.N      ??dir_next_2
   1139          					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   \                     ??dir_next_10:
   \   00000098   0xF117 0x0F01      CMN      R7,#+1
   \   0000009C   0xD101             BNE.N    ??dir_next_11
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE045             B.N      ??dir_next_2
   1140          					/* Clean-up stretched table */
   1141          					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   \                     ??dir_next_11:
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x6820             LDR      R0,[R4, #+0]
   \   000000A6   0x.... 0x....      BL       move_window
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD001             BEQ.N    ??dir_next_12
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0xE03D             B.N      ??dir_next_2
   1142          					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   \                     ??dir_next_12:
   \   000000B2   0xF44F 0x7200      MOV      R2,#+512
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x6820             LDR      R0,[R4, #+0]
   \   000000BA   0x3030             ADDS     R0,R0,#+48
   \   000000BC   0x.... 0x....      BL       mem_set
   1143          					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   \   000000C0   0x0039             MOVS     R1,R7
   \   000000C2   0x6820             LDR      R0,[R4, #+0]
   \   000000C4   0x.... 0x....      BL       clust2sect
   \   000000C8   0x6821             LDR      R1,[R4, #+0]
   \   000000CA   0x62C8             STR      R0,[R1, #+44]
   1144          					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   \   000000CC   0x2500             MOVS     R5,#+0
   \   000000CE   0xE005             B.N      ??dir_next_13
   1145          						dj->fs->wflag = 1;
   1146          						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   1147          						dj->fs->winsect++;
   \                     ??dir_next_14:
   \   000000D0   0x6820             LDR      R0,[R4, #+0]
   \   000000D2   0x6AC0             LDR      R0,[R0, #+44]
   \   000000D4   0x1C40             ADDS     R0,R0,#+1
   \   000000D6   0x6821             LDR      R1,[R4, #+0]
   \   000000D8   0x62C8             STR      R0,[R1, #+44]
   \   000000DA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??dir_next_13:
   \   000000DC   0x6820             LDR      R0,[R4, #+0]
   \   000000DE   0x7880             LDRB     R0,[R0, #+2]
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x4285             CMP      R5,R0
   \   000000E4   0xD20A             BCS.N    ??dir_next_15
   \   000000E6   0x6820             LDR      R0,[R4, #+0]
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x7101             STRB     R1,[R0, #+4]
   \   000000EC   0x2100             MOVS     R1,#+0
   \   000000EE   0x6820             LDR      R0,[R4, #+0]
   \   000000F0   0x.... 0x....      BL       move_window
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD0EB             BEQ.N    ??dir_next_14
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0xE018             B.N      ??dir_next_2
   1148          					}
   1149          					dj->fs->winsect -= c;						/* Rewind window address */
   \                     ??dir_next_15:
   \   000000FC   0x6820             LDR      R0,[R4, #+0]
   \   000000FE   0x6AC0             LDR      R0,[R0, #+44]
   \   00000100   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000102   0x1B40             SUBS     R0,R0,R5
   \   00000104   0x6821             LDR      R1,[R4, #+0]
   \   00000106   0x62C8             STR      R0,[R1, #+44]
   1150          #else
   1151          					return FR_NO_FILE;			/* Report EOT */
   1152          #endif
   1153          				}
   1154          				dj->clust = clst;				/* Initialize data for new cluster */
   \                     ??dir_next_7:
   \   00000108   0x60E7             STR      R7,[R4, #+12]
   1155          				dj->sect = clust2sect(dj->fs, clst);
   \   0000010A   0x0039             MOVS     R1,R7
   \   0000010C   0x6820             LDR      R0,[R4, #+0]
   \   0000010E   0x.... 0x....      BL       clust2sect
   \   00000112   0x6120             STR      R0,[R4, #+16]
   1156          			}
   1157          		}
   1158          	}
   1159          
   1160          	dj->index = i;
   \                     ??dir_next_3:
   \   00000114   0x80E6             STRH     R6,[R4, #+6]
   1161          	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   \   00000116   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000118   0x2010             MOVS     R0,#+16
   \   0000011A   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   0000011E   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   00000122   0x6820             LDR      R0,[R4, #+0]
   \   00000124   0xEB10 0x1041      ADDS     R0,R0,R1, LSL #+5
   \   00000128   0x3030             ADDS     R0,R0,#+48
   \   0000012A   0x6160             STR      R0,[R4, #+20]
   1162          
   1163          	return FR_OK;
   \   0000012C   0x2000             MOVS     R0,#+0
   \                     ??dir_next_2:
   \   0000012E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1164          }
   1165          
   1166          
   1167          
   1168          
   1169          /*-----------------------------------------------------------------------*/
   1170          /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
   1171          /*-----------------------------------------------------------------------*/
   1172          #if _USE_LFN
   1173          static

   \                                 In section .rodata, align 4
   1174          const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory entry */
   \                     LfnOfs:
   \   00000000   0x01 0x03          DC8 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30, 0, 0, 0
   \              0x05 0x07    
   \              0x09 0x0E    
   \              0x10 0x12    
   \              0x14 0x16    
   \              0x18 0x1C    
   \              0x1E 0x00    
   \              0x00 0x00    
   1175          
   1176          

   \                                 In section .text, align 2, keep-with-next
   1177          static
   1178          int cmp_lfn (			/* 1:Matched, 0:Not matched */
   1179          	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
   1180          	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
   1181          )
   1182          {
   \                     cmp_lfn:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1183          	UINT i, s;
   1184          	WCHAR wc, uc;
   1185          
   1186          
   1187          	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x210D             MOVS     R1,#+13
   \   00000012   0xFB01 0xF600      MUL      R6,R1,R0
   1188          	s = 0; wc = 1;
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0xF05F 0x0801      MOVS     R8,#+1
   1189          	do {
   1190          		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   \                     ??cmp_lfn_0:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000020   0x5C38             LDRB     R0,[R7, R0]
   \   00000022   0x1940             ADDS     R0,R0,R5
   \   00000024   0x7840             LDRB     R0,[R0, #+1]
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable4
   \   0000002A   0x5C79             LDRB     R1,[R7, R1]
   \   0000002C   0x5D49             LDRB     R1,[R1, R5]
   \   0000002E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   1191          		if (wc) {	/* Last char has not been processed */
   \   00000032   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000036   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000003A   0xD011             BEQ.N    ??cmp_lfn_1
   1192          			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0x.... 0x....      BL       ff_wtoupper
   \   00000042   0x4680             MOV      R8,R0
   1193          			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   \   00000044   0x2EFF             CMP      R6,#+255
   \   00000046   0xD209             BCS.N    ??cmp_lfn_2
   \   00000048   0xF834 0x0016      LDRH     R0,[R4, R6, LSL #+1]
   \   0000004C   0x.... 0x....      BL       ff_wtoupper
   \   00000050   0x1C76             ADDS     R6,R6,#+1
   \   00000052   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0x4580             CMP      R8,R0
   \   0000005A   0xD008             BEQ.N    ??cmp_lfn_3
   1194          				return 0;				/* Not matched */
   \                     ??cmp_lfn_2:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE018             B.N      ??cmp_lfn_4
   1195          		} else {
   1196          			if (uc != 0xFFFF) return 0;	/* Check filler */
   \                     ??cmp_lfn_1:
   \   00000060   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000062   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD001             BEQ.N    ??cmp_lfn_3
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE011             B.N      ??cmp_lfn_4
   1197          		}
   1198          	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   \                     ??cmp_lfn_3:
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \   00000070   0x2F0D             CMP      R7,#+13
   \   00000072   0xD3D3             BCC.N    ??cmp_lfn_0
   1199          
   1200          	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   \   00000074   0x7828             LDRB     R0,[R5, #+0]
   \   00000076   0x0640             LSLS     R0,R0,#+25
   \   00000078   0xD50A             BPL.N    ??cmp_lfn_5
   \   0000007A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000007E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000082   0xD005             BEQ.N    ??cmp_lfn_5
   \   00000084   0xF834 0x0016      LDRH     R0,[R4, R6, LSL #+1]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD001             BEQ.N    ??cmp_lfn_5
   1201          		return 0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xE000             B.N      ??cmp_lfn_4
   1202          
   1203          	return 1;						/* The part of LFN matched */
   \                     ??cmp_lfn_5:
   \   00000090   0x2001             MOVS     R0,#+1
   \                     ??cmp_lfn_4:
   \   00000092   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1204          }
   1205          
   1206          
   1207          

   \                                 In section .text, align 2, keep-with-next
   1208          static
   1209          int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
   1210          	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
   1211          	BYTE *dir			/* Pointer to the directory entry */
   1212          )
   1213          {
   \                     pick_lfn:
   \   00000000   0xB470             PUSH     {R4-R6}
   1214          	UINT i, s;
   1215          	WCHAR wc, uc;
   1216          
   1217          
   1218          	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   \   00000002   0x780A             LDRB     R2,[R1, #+0]
   \   00000004   0xF012 0x023F      ANDS     R2,R2,#0x3F
   \   00000008   0x1E52             SUBS     R2,R2,#+1
   \   0000000A   0x230D             MOVS     R3,#+13
   \   0000000C   0x435A             MULS     R2,R3,R2
   1219          
   1220          	s = 0; wc = 1;
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2401             MOVS     R4,#+1
   1221          	do {
   1222          		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   \                     ??pick_lfn_0:
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable4
   \   00000016   0x5D5D             LDRB     R5,[R3, R5]
   \   00000018   0x186D             ADDS     R5,R5,R1
   \   0000001A   0x786D             LDRB     R5,[R5, #+1]
   \   0000001C   0x.... 0x....      LDR.W    R6,??DataTable4
   \   00000020   0x5D9E             LDRB     R6,[R3, R6]
   \   00000022   0x5C76             LDRB     R6,[R6, R1]
   \   00000024   0xEA56 0x2505      ORRS     R5,R6,R5, LSL #+8
   1223          		if (wc) {	/* Last char has not been processed */
   \   00000028   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD011             BEQ.N    ??pick_lfn_1
   1224          			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   \   0000002E   0x2AFF             CMP      R2,#+255
   \   00000030   0xD301             BCC.N    ??pick_lfn_2
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE018             B.N      ??pick_lfn_3
   1225          			lfnbuf[i++] = wc = uc;			/* Store it */
   \                     ??pick_lfn_2:
   \   00000036   0x002C             MOVS     R4,R5
   \   00000038   0xF820 0x4012      STRH     R4,[R0, R2, LSL #+1]
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
   1226          		} else {
   1227          			if (uc != 0xFFFF) return 0;		/* Check filler */
   1228          		}
   1229          	} while (++s < 13);						/* Read all character in the entry */
   \                     ??pick_lfn_4:
   \   0000003E   0x1C5B             ADDS     R3,R3,#+1
   \   00000040   0x2B0D             CMP      R3,#+13
   \   00000042   0xD3E6             BCC.N    ??pick_lfn_0
   1230          
   1231          	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   \   00000044   0x7809             LDRB     R1,[R1, #+0]
   \   00000046   0x0649             LSLS     R1,R1,#+25
   \   00000048   0xD50D             BPL.N    ??pick_lfn_5
   1232          		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   \   0000004A   0x2AFF             CMP      R2,#+255
   \   0000004C   0xD308             BCC.N    ??pick_lfn_6
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE00A             B.N      ??pick_lfn_3
   \                     ??pick_lfn_1:
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0xF64F 0x76FF      MOVW     R6,#+65535
   \   00000058   0x42B5             CMP      R5,R6
   \   0000005A   0xD0F0             BEQ.N    ??pick_lfn_4
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE003             B.N      ??pick_lfn_3
   1233          		lfnbuf[i] = 0;
   \                     ??pick_lfn_6:
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0xF820 0x1012      STRH     R1,[R0, R2, LSL #+1]
   1234          	}
   1235          
   1236          	return 1;
   \                     ??pick_lfn_5:
   \   00000066   0x2001             MOVS     R0,#+1
   \                     ??pick_lfn_3:
   \   00000068   0xBC70             POP      {R4-R6}
   \   0000006A   0x4770             BX       LR               ;; return
   1237          }
   1238          
   1239          
   1240          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
   1241          static
   1242          void fit_lfn (
   1243          	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
   1244          	BYTE *dir,				/* Pointer to the directory entry */
   1245          	BYTE ord,				/* LFN order (1-20) */
   1246          	BYTE sum				/* SFN sum */
   1247          )
   1248          {
   \                     fit_lfn:
   \   00000000   0xB4F0             PUSH     {R4-R7}
   1249          	UINT i, s;
   1250          	WCHAR wc;
   1251          
   1252          
   1253          	dir[LDIR_Chksum] = sum;			/* Set check sum */
   \   00000002   0x734B             STRB     R3,[R1, #+13]
   1254          	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   \   00000004   0x230F             MOVS     R3,#+15
   \   00000006   0x72CB             STRB     R3,[R1, #+11]
   1255          	dir[LDIR_Type] = 0;
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x730B             STRB     R3,[R1, #+12]
   1256          	ST_WORD(dir+LDIR_FstClusLO, 0);
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x768B             STRB     R3,[R1, #+26]
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x76CB             STRB     R3,[R1, #+27]
   1257          
   1258          	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x1E53             SUBS     R3,R2,#+1
   \   00000018   0x240D             MOVS     R4,#+13
   \   0000001A   0x4363             MULS     R3,R4,R3
   1259          	s = wc = 0;
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0x0025             MOVS     R5,R4
   \   00000020   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   1260          	do {
   1261          		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   \                     ??fit_lfn_0:
   \   00000022   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   0xF64F 0x76FF      MOVW     R6,#+65535
   \   00000028   0x42B5             CMP      R5,R6
   \   0000002A   0xD002             BEQ.N    ??fit_lfn_1
   \   0000002C   0xF830 0x5013      LDRH     R5,[R0, R3, LSL #+1]
   \   00000030   0x1C5B             ADDS     R3,R3,#+1
   1262          		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   \                     ??fit_lfn_1:
   \   00000032   0x.... 0x....      LDR.W    R6,??DataTable4
   \   00000036   0x5DA6             LDRB     R6,[R4, R6]
   \   00000038   0x5475             STRB     R5,[R6, R1]
   \   0000003A   0x.... 0x....      LDR.W    R6,??DataTable4
   \   0000003E   0x5DA6             LDRB     R6,[R4, R6]
   \   00000040   0x1876             ADDS     R6,R6,R1
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x0A2F             LSRS     R7,R5,#+8
   \   00000046   0x7077             STRB     R7,[R6, #+1]
   1263          		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD101             BNE.N    ??fit_lfn_2
   \   0000004E   0xF64F 0x75FF      MOVW     R5,#+65535
   1264          	} while (++s < 13);
   \                     ??fit_lfn_2:
   \   00000052   0x1C64             ADDS     R4,R4,#+1
   \   00000054   0x2C0D             CMP      R4,#+13
   \   00000056   0xD3E4             BCC.N    ??fit_lfn_0
   1265          	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0xF64F 0x74FF      MOVW     R4,#+65535
   \   0000005E   0x42A5             CMP      R5,R4
   \   00000060   0xD003             BEQ.N    ??fit_lfn_3
   \   00000062   0xF830 0x0013      LDRH     R0,[R0, R3, LSL #+1]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD101             BNE.N    ??fit_lfn_4
   \                     ??fit_lfn_3:
   \   0000006A   0xF052 0x0240      ORRS     R2,R2,#0x40
   1266          	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   \                     ??fit_lfn_4:
   \   0000006E   0x700A             STRB     R2,[R1, #+0]
   1267          }
   \   00000070   0xBCF0             POP      {R4-R7}
   \   00000072   0x4770             BX       LR               ;; return
   1268          
   1269          #endif
   1270          #endif
   1271          
   1272          
   1273          
   1274          /*-----------------------------------------------------------------------*/
   1275          /* Create numbered name                                                  */
   1276          /*-----------------------------------------------------------------------*/
   1277          #if _USE_LFN

   \                                 In section .text, align 2, keep-with-next
   1278          void gen_numname (
   1279          	BYTE *dst,			/* Pointer to generated SFN */
   1280          	const BYTE *src,	/* Pointer to source SFN to be modified */
   1281          	const WCHAR *lfn,	/* Pointer to LFN */
   1282          	WORD seq			/* Sequence number */
   1283          )
   1284          {
   \                     gen_numname:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0016             MOVS     R6,R2
   \   00000006   0x001D             MOVS     R5,R3
   1285          	BYTE ns[8], c;
   1286          	UINT i, j;
   1287          
   1288          
   1289          	mem_cpy(dst, src, 11);
   \   00000008   0x220B             MOVS     R2,#+11
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       mem_cpy
   1290          
   1291          	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0x2D06             CMP      R5,#+6
   \   00000014   0xDB09             BLT.N    ??gen_numname_0
   1292          		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   \                     ??gen_numname_1:
   \   00000016   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000018   0x03E8             LSLS     R0,R5,#+15
   \   0000001A   0xEB10 0x0055      ADDS     R0,R0,R5, LSR #+1
   \   0000001E   0x8831             LDRH     R1,[R6, #+0]
   \   00000020   0x180D             ADDS     R5,R1,R0
   \   00000022   0x1CB6             ADDS     R6,R6,#+2
   \   00000024   0x8830             LDRH     R0,[R6, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F5             BNE.N    ??gen_numname_1
   1293          	}
   1294          
   1295          	/* itoa (hexdecimal) */
   1296          	i = 7;
   \                     ??gen_numname_0:
   \   0000002A   0x2007             MOVS     R0,#+7
   1297          	do {
   1298          		c = (seq % 16) + '0';
   \                     ??gen_numname_2:
   \   0000002C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0x2110             MOVS     R1,#+16
   \   00000030   0xFB95 0xF2F1      SDIV     R2,R5,R1
   \   00000034   0xFB02 0x5211      MLS      R2,R2,R1,R5
   \   00000038   0xF112 0x0130      ADDS     R1,R2,#+48
   1299          		if (c > '9') c += 7;
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x293A             CMP      R1,#+58
   \   00000040   0xDB00             BLT.N    ??gen_numname_3
   \   00000042   0x1DC9             ADDS     R1,R1,#+7
   1300          		ns[i--] = c;
   \                     ??gen_numname_3:
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x5481             STRB     R1,[R0, R2]
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   1301          		seq /= 16;
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2110             MOVS     R1,#+16
   \   0000004E   0xFB95 0xF5F1      SDIV     R5,R5,R1
   1302          	} while (seq);
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D00             CMP      R5,#+0
   \   00000056   0xD1E9             BNE.N    ??gen_numname_2
   1303          	ns[i] = '~';
   \   00000058   0xA900             ADD      R1,SP,#+0
   \   0000005A   0x227E             MOVS     R2,#+126
   \   0000005C   0x5442             STRB     R2,[R0, R1]
   1304          
   1305          	/* Append the number */
   1306          	for (j = 0; j < i && dst[j] != ' '; j++) {
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xE001             B.N      ??gen_numname_4
   1307          		if (IsDBCS1(dst[j])) {
   1308          			if (j == i - 1) break;
   1309          			j++;
   \                     ??gen_numname_5:
   \   00000062   0x1C49             ADDS     R1,R1,#+1
   \                     ??gen_numname_6:
   \   00000064   0x1C49             ADDS     R1,R1,#+1
   \                     ??gen_numname_4:
   \   00000066   0x4281             CMP      R1,R0
   \   00000068   0xD20D             BCS.N    ??gen_numname_7
   \   0000006A   0x5D0A             LDRB     R2,[R1, R4]
   \   0000006C   0x2A20             CMP      R2,#+32
   \   0000006E   0xD00A             BEQ.N    ??gen_numname_7
   \   00000070   0x5D0A             LDRB     R2,[R1, R4]
   \   00000072   0x3A81             SUBS     R2,R2,#+129
   \   00000074   0x2A1F             CMP      R2,#+31
   \   00000076   0xD303             BCC.N    ??gen_numname_8
   \   00000078   0x5D0A             LDRB     R2,[R1, R4]
   \   0000007A   0x3AE0             SUBS     R2,R2,#+224
   \   0000007C   0x2A1D             CMP      R2,#+29
   \   0000007E   0xD2F1             BCS.N    ??gen_numname_6
   \                     ??gen_numname_8:
   \   00000080   0x1E42             SUBS     R2,R0,#+1
   \   00000082   0x4291             CMP      R1,R2
   \   00000084   0xD1ED             BNE.N    ??gen_numname_5
   1310          		}
   1311          	}
   1312          	do {
   1313          		dst[j++] = (i < 8) ? ns[i++] : ' ';
   \                     ??gen_numname_7:
   \   00000086   0x000A             MOVS     R2,R1
   \   00000088   0x1C51             ADDS     R1,R2,#+1
   \   0000008A   0x2808             CMP      R0,#+8
   \   0000008C   0xD203             BCS.N    ??gen_numname_9
   \   0000008E   0xAB00             ADD      R3,SP,#+0
   \   00000090   0x5CC3             LDRB     R3,[R0, R3]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0xE000             B.N      ??gen_numname_10
   \                     ??gen_numname_9:
   \   00000096   0x2320             MOVS     R3,#+32
   \                     ??gen_numname_10:
   \   00000098   0x5513             STRB     R3,[R2, R4]
   1314          	} while (j < 8);
   \   0000009A   0x2908             CMP      R1,#+8
   \   0000009C   0xD3F3             BCC.N    ??gen_numname_7
   1315          }
   \   0000009E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   1316          #endif
   1317          
   1318          
   1319          
   1320          
   1321          /*-----------------------------------------------------------------------*/
   1322          /* Calculate sum of an SFN                                               */
   1323          /*-----------------------------------------------------------------------*/
   1324          #if _USE_LFN

   \                                 In section .text, align 2, keep-with-next
   1325          static
   1326          BYTE sum_sfn (
   1327          	const BYTE *dir		/* Ptr to directory entry */
   1328          )
   1329          {
   1330          	BYTE sum = 0;
   \                     sum_sfn:
   \   00000000   0x2100             MOVS     R1,#+0
   1331          	UINT n = 11;
   \   00000002   0x220B             MOVS     R2,#+11
   1332          
   1333          	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   \                     ??sum_sfn_0:
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x01CB             LSLS     R3,R1,#+7
   \   00000008   0xEB13 0x0151      ADDS     R1,R3,R1, LSR #+1
   \   0000000C   0x7803             LDRB     R3,[R0, #+0]
   \   0000000E   0x1859             ADDS     R1,R3,R1
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x1E52             SUBS     R2,R2,#+1
   \   00000014   0x2A00             CMP      R2,#+0
   \   00000016   0xD1F5             BNE.N    ??sum_sfn_0
   1334          	return sum;
   \   00000018   0x0008             MOVS     R0,R1
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x4770             BX       LR               ;; return
   1335          }
   1336          #endif
   1337          
   1338          
   1339          
   1340          
   1341          /*-----------------------------------------------------------------------*/
   1342          /* Directory handling - Find an object in the directory                  */
   1343          /*-----------------------------------------------------------------------*/
   1344          

   \                                 In section .text, align 2, keep-with-next
   1345          static
   1346          FRESULT dir_find (
   1347          	DIR *dj			/* Pointer to the directory object linked to the file name */
   1348          )
   1349          {
   \                     dir_find:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0005             MOVS     R5,R0
   1350          	FRESULT res;
   1351          	BYTE c, *dir;
   1352          #if _USE_LFN
   1353          	BYTE a, ord, sum;
   1354          #endif
   1355          
   1356          	res = dir_sdi(dj, 0);			/* Rewind directory object */
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x.... 0x....      BL       dir_sdi
   \   0000000E   0x0004             MOVS     R4,R0
   1357          	if (res != FR_OK) return res;
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD002             BEQ.N    ??dir_find_0
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xE026             B.N      ??dir_find_1
   1358          
   1359          #if _USE_LFN
   1360          	ord = sum = 0xFF;
   \                     ??dir_find_0:
   \   0000001C   0x27FF             MOVS     R7,#+255
   \   0000001E   0x46B8             MOV      R8,R7
   1361          #endif
   1362          	do {
   1363          		res = move_window(dj->fs, dj->sect);
   \                     ??dir_find_2:
   \   00000020   0x6929             LDR      R1,[R5, #+16]
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x.... 0x....      BL       move_window
   \   00000028   0x0004             MOVS     R4,R0
   1364          		if (res != FR_OK) break;
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xD11A             BNE.N    ??dir_find_3
   1365          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   \                     ??dir_find_4:
   \   00000030   0x696E             LDR      R6,[R5, #+20]
   1366          		c = dir[DIR_Name];
   \   00000032   0x7830             LDRB     R0,[R6, #+0]
   1367          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??dir_find_5
   \   0000003A   0x2404             MOVS     R4,#+4
   \   0000003C   0xE013             B.N      ??dir_find_3
   1368          #if _USE_LFN	/* LFN configuration */
   1369          		a = dir[DIR_Attr] & AM_MASK;
   \                     ??dir_find_5:
   \   0000003E   0x7AF1             LDRB     R1,[R6, #+11]
   \   00000040   0xF011 0x013F      ANDS     R1,R1,#0x3F
   1370          		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x28E5             CMP      R0,#+229
   \   00000048   0xD004             BEQ.N    ??dir_find_6
   \   0000004A   0x070A             LSLS     R2,R1,#+28
   \   0000004C   0xD50F             BPL.N    ??dir_find_7
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x290F             CMP      R1,#+15
   \   00000052   0xD00C             BEQ.N    ??dir_find_7
   1371          			ord = 0xFF;
   \                     ??dir_find_6:
   \   00000054   0x27FF             MOVS     R7,#+255
   1372          		} else {
   1373          			if (a == AM_LFN) {			/* An LFN entry is found */
   1374          				if (dj->lfn) {
   1375          					if (c & LLE) {		/* Is it start of LFN sequence? */
   1376          						sum = dir[LDIR_Chksum];
   1377          						c &= ~LLE; ord = c;	/* LFN start order */
   1378          						dj->lfn_idx = dj->index;
   1379          					}
   1380          					/* Check validity of the LFN entry and compare it with given name */
   1381          					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1382          				}
   1383          			} else {					/* An SFN entry is found */
   1384          				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1385          				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1386          				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1387          			}
   1388          		}
   1389          #else		/* Non LFN configuration */
   1390          		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   1391          			break;
   1392          #endif
   1393          		res = dir_next(dj, 0);		/* Next entry */
   \                     ??dir_find_8:
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       dir_next
   \   0000005E   0x0004             MOVS     R4,R0
   1394          	} while (res == FR_OK);
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x2C00             CMP      R4,#+0
   \   00000064   0xD0DC             BEQ.N    ??dir_find_2
   1395          
   1396          	return res;
   \                     ??dir_find_3:
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??dir_find_1:
   \   0000006A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??dir_find_7:
   \   0000006E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000070   0x290F             CMP      R1,#+15
   \   00000072   0xD11E             BNE.N    ??dir_find_9
   \   00000074   0x69E9             LDR      R1,[R5, #+28]
   \   00000076   0x2900             CMP      R1,#+0
   \   00000078   0xD0ED             BEQ.N    ??dir_find_8
   \   0000007A   0x0641             LSLS     R1,R0,#+25
   \   0000007C   0xD506             BPL.N    ??dir_find_10
   \   0000007E   0xF896 0x800D      LDRB     R8,[R6, #+13]
   \   00000082   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000086   0x0007             MOVS     R7,R0
   \   00000088   0x88E9             LDRH     R1,[R5, #+6]
   \   0000008A   0x8429             STRH     R1,[R5, #+32]
   \                     ??dir_find_10:
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000090   0x42B8             CMP      R0,R7
   \   00000092   0xD10C             BNE.N    ??dir_find_11
   \   00000094   0x7B70             LDRB     R0,[R6, #+13]
   \   00000096   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009A   0x4580             CMP      R8,R0
   \   0000009C   0xD107             BNE.N    ??dir_find_11
   \   0000009E   0x0031             MOVS     R1,R6
   \   000000A0   0x69E8             LDR      R0,[R5, #+28]
   \   000000A2   0x.... 0x....      BL       cmp_lfn
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD001             BEQ.N    ??dir_find_11
   \   000000AA   0x1E7F             SUBS     R7,R7,#+1
   \   000000AC   0xE000             B.N      ??dir_find_12
   \                     ??dir_find_11:
   \   000000AE   0x27FF             MOVS     R7,#+255
   \                     ??dir_find_12:
   \   000000B0   0xE7D1             B.N      ??dir_find_8
   \                     ??dir_find_9:
   \   000000B2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B4   0x2F00             CMP      R7,#+0
   \   000000B6   0xD106             BNE.N    ??dir_find_13
   \   000000B8   0x0030             MOVS     R0,R6
   \   000000BA   0x.... 0x....      BL       sum_sfn
   \   000000BE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C2   0x4580             CMP      R8,R0
   \   000000C4   0xD0CF             BEQ.N    ??dir_find_3
   \                     ??dir_find_13:
   \   000000C6   0x27FF             MOVS     R7,#+255
   \   000000C8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000CC   0x8428             STRH     R0,[R5, #+32]
   \   000000CE   0x69A8             LDR      R0,[R5, #+24]
   \   000000D0   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000D2   0x07C0             LSLS     R0,R0,#+31
   \   000000D4   0xD4BF             BMI.N    ??dir_find_8
   \   000000D6   0x220B             MOVS     R2,#+11
   \   000000D8   0x69A9             LDR      R1,[R5, #+24]
   \   000000DA   0x0030             MOVS     R0,R6
   \   000000DC   0x.... 0x....      BL       mem_cmp
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD1B8             BNE.N    ??dir_find_8
   \   000000E4   0xE7BF             B.N      ??dir_find_3
   1397          }
   1398          
   1399          
   1400          
   1401          
   1402          /*-----------------------------------------------------------------------*/
   1403          /* Read an object from the directory                                     */
   1404          /*-----------------------------------------------------------------------*/
   1405          #if _FS_MINIMIZE <= 1

   \                                 In section .text, align 2, keep-with-next
   1406          static
   1407          FRESULT dir_read (
   1408          	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
   1409          )
   1410          {
   \                     dir_read:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1411          	FRESULT res;
   1412          	BYTE c, *dir;
   1413          #if _USE_LFN
   1414          	BYTE a, ord = 0xFF, sum = 0xFF;
   \   00000004   0x26FF             MOVS     R6,#+255
   \   00000006   0x27FF             MOVS     R7,#+255
   1415          #endif
   1416          
   1417          	res = FR_NO_FILE;
   \   00000008   0x2504             MOVS     R5,#+4
   1418          	while (dj->sect) {
   \                     ??dir_read_0:
   \   0000000A   0x6920             LDR      R0,[R4, #+16]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD025             BEQ.N    ??dir_read_1
   1419          		res = move_window(dj->fs, dj->sect);
   \   00000010   0x6921             LDR      R1,[R4, #+16]
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x.... 0x....      BL       move_window
   \   00000018   0x0005             MOVS     R5,R0
   1420          		if (res != FR_OK) break;
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD11D             BNE.N    ??dir_read_1
   1421          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   \                     ??dir_read_2:
   \   00000020   0x6960             LDR      R0,[R4, #+20]
   1422          		c = dir[DIR_Name];
   \   00000022   0x7801             LDRB     R1,[R0, #+0]
   1423          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD101             BNE.N    ??dir_read_3
   \   0000002A   0x2504             MOVS     R5,#+4
   \   0000002C   0xE016             B.N      ??dir_read_1
   1424          #if _USE_LFN	/* LFN configuration */
   1425          		a = dir[DIR_Attr] & AM_MASK;
   \                     ??dir_read_3:
   \   0000002E   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000030   0xF012 0x023F      ANDS     R2,R2,#0x3F
   1426          		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x29E5             CMP      R1,#+229
   \   00000038   0xD007             BEQ.N    ??dir_read_4
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x292E             CMP      R1,#+46
   \   0000003E   0xD004             BEQ.N    ??dir_read_4
   \   00000040   0x0713             LSLS     R3,R2,#+28
   \   00000042   0xD513             BPL.N    ??dir_read_5
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x2A0F             CMP      R2,#+15
   \   00000048   0xD010             BEQ.N    ??dir_read_5
   1427          			ord = 0xFF;
   \                     ??dir_read_4:
   \   0000004A   0x26FF             MOVS     R6,#+255
   1428          		} else {
   1429          			if (a == AM_LFN) {			/* An LFN entry is found */
   1430          				if (c & LLE) {			/* Is it start of LFN sequence? */
   1431          					sum = dir[LDIR_Chksum];
   1432          					c &= ~LLE; ord = c;
   1433          					dj->lfn_idx = dj->index;
   1434          				}
   1435          				/* Check LFN validity and capture it */
   1436          				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1437          			} else {					/* An SFN entry is found */
   1438          				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   1439          					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   1440          				break;
   1441          			}
   1442          		}
   1443          #else		/* Non LFN configuration */
   1444          		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
   1445          			break;
   1446          #endif
   1447          		res = dir_next(dj, 0);				/* Next entry */
   \                     ??dir_read_6:
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x.... 0x....      BL       dir_next
   \   00000054   0x0005             MOVS     R5,R0
   1448          		if (res != FR_OK) break;
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0x2D00             CMP      R5,#+0
   \   0000005A   0xD0D6             BEQ.N    ??dir_read_0
   1449          	}
   1450          
   1451          	if (res != FR_OK) dj->sect = 0;
   \                     ??dir_read_1:
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD001             BEQ.N    ??dir_read_7
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6120             STR      R0,[R4, #+16]
   1452          
   1453          	return res;
   \                     ??dir_read_7:
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??dir_read_5:
   \   0000006C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006E   0x2A0F             CMP      R2,#+15
   \   00000070   0xD119             BNE.N    ??dir_read_8
   \   00000072   0x064A             LSLS     R2,R1,#+25
   \   00000074   0xD505             BPL.N    ??dir_read_9
   \   00000076   0x7B47             LDRB     R7,[R0, #+13]
   \   00000078   0xF011 0x01BF      ANDS     R1,R1,#0xBF
   \   0000007C   0x000E             MOVS     R6,R1
   \   0000007E   0x88E2             LDRH     R2,[R4, #+6]
   \   00000080   0x8422             STRH     R2,[R4, #+32]
   \                     ??dir_read_9:
   \   00000082   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000084   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000086   0x42B1             CMP      R1,R6
   \   00000088   0xD10B             BNE.N    ??dir_read_10
   \   0000008A   0x7B41             LDRB     R1,[R0, #+13]
   \   0000008C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008E   0x428F             CMP      R7,R1
   \   00000090   0xD107             BNE.N    ??dir_read_10
   \   00000092   0x0001             MOVS     R1,R0
   \   00000094   0x69E0             LDR      R0,[R4, #+28]
   \   00000096   0x.... 0x....      BL       pick_lfn
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD001             BEQ.N    ??dir_read_10
   \   0000009E   0x1E76             SUBS     R6,R6,#+1
   \   000000A0   0xE000             B.N      ??dir_read_11
   \                     ??dir_read_10:
   \   000000A2   0x26FF             MOVS     R6,#+255
   \                     ??dir_read_11:
   \   000000A4   0xE7D2             B.N      ??dir_read_6
   \                     ??dir_read_8:
   \   000000A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD104             BNE.N    ??dir_read_12
   \   000000AC   0x.... 0x....      BL       sum_sfn
   \   000000B0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B2   0x4287             CMP      R7,R0
   \   000000B4   0xD002             BEQ.N    ??dir_read_13
   \                     ??dir_read_12:
   \   000000B6   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000BA   0x8420             STRH     R0,[R4, #+32]
   \                     ??dir_read_13:
   \   000000BC   0xE7CE             B.N      ??dir_read_1
   1454          }
   1455          #endif
   1456          
   1457          
   1458          
   1459          /*-----------------------------------------------------------------------*/
   1460          /* Register an object to the directory                                   */
   1461          /*-----------------------------------------------------------------------*/
   1462          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
   1463          static
   1464          FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   1465          	DIR *dj				/* Target directory with object name to be created */
   1466          )
   1467          {
   \                     dir_register:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   1468          	FRESULT res;
   1469          	BYTE c, *dir;
   1470          #if _USE_LFN	/* LFN configuration */
   1471          	WORD n, ne, is;
   1472          	BYTE sn[12], *fn, sum;
   1473          	WCHAR *lfn;
   1474          
   1475          
   1476          	fn = dj->fn; lfn = dj->lfn;
   \   00000008   0x69A7             LDR      R7,[R4, #+24]
   \   0000000A   0x69E6             LDR      R6,[R4, #+28]
   1477          	mem_cpy(sn, fn, 12);
   \   0000000C   0x220C             MOVS     R2,#+12
   \   0000000E   0x0039             MOVS     R1,R7
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       mem_cpy
   1478          
   1479          	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
   1480          		return FR_INVALID_NAME;
   1481          
   1482          	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   \   00000016   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   0000001A   0x07C0             LSLS     R0,R0,#+31
   \   0000001C   0xD52C             BPL.N    ??dir_register_0
   1483          		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x72F8             STRB     R0,[R7, #+11]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x61E0             STR      R0,[R4, #+28]
   1484          		for (n = 1; n < 100; n++) {
   \   00000026   0xF05F 0x0801      MOVS     R8,#+1
   \   0000002A   0xE001             B.N      ??dir_register_1
   \                     ??dir_register_2:
   \   0000002C   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??dir_register_1:
   \   00000030   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000034   0xF1B8 0x0F64      CMP      R8,#+100
   \   00000038   0xDA0D             BGE.N    ??dir_register_3
   1485          			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   \   0000003A   0x4643             MOV      R3,R8
   \   0000003C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000003E   0x0032             MOVS     R2,R6
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x.... 0x....      BL       gen_numname
   1486          			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       dir_find
   \   0000004E   0x0005             MOVS     R5,R0
   1487          			if (res != FR_OK) break;
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D00             CMP      R5,#+0
   \   00000054   0xD0EA             BEQ.N    ??dir_register_2
   1488          		}
   1489          		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   \                     ??dir_register_3:
   \   00000056   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000005A   0xF1B8 0x0F64      CMP      R8,#+100
   \   0000005E   0xD101             BNE.N    ??dir_register_4
   \   00000060   0x2007             MOVS     R0,#+7
   \   00000062   0xE0A7             B.N      ??dir_register_5
   1490          		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   \                     ??dir_register_4:
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D04             CMP      R5,#+4
   \   00000068   0xD002             BEQ.N    ??dir_register_6
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0xE0A1             B.N      ??dir_register_5
   1491          		fn[NS] = sn[NS]; dj->lfn = lfn;
   \                     ??dir_register_6:
   \   00000070   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   00000074   0x72F8             STRB     R0,[R7, #+11]
   \   00000076   0x61E6             STR      R6,[R4, #+28]
   1492          	}
   1493          
   1494          	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   \                     ??dir_register_0:
   \   00000078   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   0000007C   0x0780             LSLS     R0,R0,#+30
   \   0000007E   0xD50E             BPL.N    ??dir_register_7
   1495          		for (ne = 0; lfn[ne]; ne++) ;
   \   00000080   0x2700             MOVS     R7,#+0
   \   00000082   0xE000             B.N      ??dir_register_8
   \                     ??dir_register_9:
   \   00000084   0x1C7F             ADDS     R7,R7,#+1
   \                     ??dir_register_8:
   \   00000086   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000088   0xF836 0x0017      LDRH     R0,[R6, R7, LSL #+1]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD1F9             BNE.N    ??dir_register_9
   1496          		ne = (ne + 25) / 13;
   \   00000090   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000092   0xF117 0x0019      ADDS     R0,R7,#+25
   \   00000096   0x210D             MOVS     R1,#+13
   \   00000098   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \   0000009C   0xE000             B.N      ??dir_register_10
   1497          	} else {						/* Otherwise reserve only an SFN entry. */
   1498          		ne = 1;
   \                     ??dir_register_7:
   \   0000009E   0x2701             MOVS     R7,#+1
   1499          	}
   1500          
   1501          	/* Reserve contiguous entries */
   1502          	res = dir_sdi(dj, 0);
   \                     ??dir_register_10:
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x.... 0x....      BL       dir_sdi
   \   000000A8   0x0005             MOVS     R5,R0
   1503          	if (res != FR_OK) return res;
   \   000000AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AC   0x2D00             CMP      R5,#+0
   \   000000AE   0xD002             BEQ.N    ??dir_register_11
   \   000000B0   0x0028             MOVS     R0,R5
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0xE07E             B.N      ??dir_register_5
   1504          	n = is = 0;
   \                     ??dir_register_11:
   \   000000B6   0xF05F 0x0800      MOVS     R8,#+0
   \   000000BA   0x4646             MOV      R6,R8
   1505          	do {
   1506          		res = move_window(dj->fs, dj->sect);
   \                     ??dir_register_12:
   \   000000BC   0x6921             LDR      R1,[R4, #+16]
   \   000000BE   0x6820             LDR      R0,[R4, #+0]
   \   000000C0   0x.... 0x....      BL       move_window
   \   000000C4   0x0005             MOVS     R5,R0
   1507          		if (res != FR_OK) break;
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xD11F             BNE.N    ??dir_register_13
   1508          		c = *dj->dir;				/* Check the entry status */
   \                     ??dir_register_14:
   \   000000CC   0x6960             LDR      R0,[R4, #+20]
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   1509          		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x28E5             CMP      R0,#+229
   \   000000D4   0xD002             BEQ.N    ??dir_register_15
   \   000000D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD10D             BNE.N    ??dir_register_16
   1510          			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   \                     ??dir_register_15:
   \   000000DC   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000E0   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000E4   0xD100             BNE.N    ??dir_register_17
   \   000000E6   0x88E6             LDRH     R6,[R4, #+6]
   1511          			if (++n == ne) break;	/* A contiguous entry that required count is found */
   \                     ??dir_register_17:
   \   000000E8   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000EC   0x4640             MOV      R0,R8
   \   000000EE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F2   0x42B8             CMP      R0,R7
   \   000000F4   0xD102             BNE.N    ??dir_register_18
   \   000000F6   0xE009             B.N      ??dir_register_13
   1512          		} else {
   1513          			n = 0;					/* Not a blank entry. Restart to search */
   \                     ??dir_register_16:
   \   000000F8   0xF05F 0x0800      MOVS     R8,#+0
   1514          		}
   1515          		res = dir_next(dj, 1);		/* Next entry with table stretch */
   \                     ??dir_register_18:
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x0020             MOVS     R0,R4
   \   00000100   0x.... 0x....      BL       dir_next
   \   00000104   0x0005             MOVS     R5,R0
   1516          	} while (res == FR_OK);
   \   00000106   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xD0D7             BEQ.N    ??dir_register_12
   1517          
   1518          	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   \                     ??dir_register_13:
   \   0000010C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010E   0x2D00             CMP      R5,#+0
   \   00000110   0xD130             BNE.N    ??dir_register_19
   \   00000112   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000114   0x2F02             CMP      R7,#+2
   \   00000116   0xDB2D             BLT.N    ??dir_register_19
   1519          		res = dir_sdi(dj, is);
   \   00000118   0x0031             MOVS     R1,R6
   \   0000011A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000011C   0x0020             MOVS     R0,R4
   \   0000011E   0x.... 0x....      BL       dir_sdi
   \   00000122   0x0005             MOVS     R5,R0
   1520          		if (res == FR_OK) {
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD124             BNE.N    ??dir_register_19
   1521          			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   \   0000012A   0x69A0             LDR      R0,[R4, #+24]
   \   0000012C   0x.... 0x....      BL       sum_sfn
   \   00000130   0x0006             MOVS     R6,R0
   1522          			ne--;
   \   00000132   0x1E7F             SUBS     R7,R7,#+1
   1523          			do {					/* Store LFN entries in bottom first */
   1524          				res = move_window(dj->fs, dj->sect);
   \                     ??dir_register_20:
   \   00000134   0x6921             LDR      R1,[R4, #+16]
   \   00000136   0x6820             LDR      R0,[R4, #+0]
   \   00000138   0x.... 0x....      BL       move_window
   \   0000013C   0x0005             MOVS     R5,R0
   1525          				if (res != FR_OK) break;
   \   0000013E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000140   0x2D00             CMP      R5,#+0
   \   00000142   0xD117             BNE.N    ??dir_register_19
   1526          				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   \                     ??dir_register_21:
   \   00000144   0x0033             MOVS     R3,R6
   \   00000146   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000148   0x003A             MOVS     R2,R7
   \   0000014A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000014C   0x6961             LDR      R1,[R4, #+20]
   \   0000014E   0x69E0             LDR      R0,[R4, #+28]
   \   00000150   0x.... 0x....      BL       fit_lfn
   1527          				dj->fs->wflag = 1;
   \   00000154   0x6820             LDR      R0,[R4, #+0]
   \   00000156   0x2101             MOVS     R1,#+1
   \   00000158   0x7101             STRB     R1,[R0, #+4]
   1528          				res = dir_next(dj, 0);	/* Next entry */
   \   0000015A   0x2100             MOVS     R1,#+0
   \   0000015C   0x0020             MOVS     R0,R4
   \   0000015E   0x.... 0x....      BL       dir_next
   \   00000162   0x0005             MOVS     R5,R0
   1529          			} while (res == FR_OK && --ne);
   \   00000164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000166   0x2D00             CMP      R5,#+0
   \   00000168   0xD104             BNE.N    ??dir_register_19
   \   0000016A   0x1E7F             SUBS     R7,R7,#+1
   \   0000016C   0x0038             MOVS     R0,R7
   \   0000016E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD1DF             BNE.N    ??dir_register_20
   1530          		}
   1531          	}
   1532          
   1533          #else	/* Non LFN configuration */
   1534          	res = dir_sdi(dj, 0);
   1535          	if (res == FR_OK) {
   1536          		do {	/* Find a blank entry for the SFN */
   1537          			res = move_window(dj->fs, dj->sect);
   1538          			if (res != FR_OK) break;
   1539          			c = *dj->dir;
   1540          			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
   1541          			res = dir_next(dj, 1);			/* Next entry with table stretch */
   1542          		} while (res == FR_OK);
   1543          	}
   1544          #endif
   1545          
   1546          	if (res == FR_OK) {		/* Initialize the SFN entry */
   \                     ??dir_register_19:
   \   00000174   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000176   0x2D00             CMP      R5,#+0
   \   00000178   0xD11A             BNE.N    ??dir_register_22
   1547          		res = move_window(dj->fs, dj->sect);
   \   0000017A   0x6921             LDR      R1,[R4, #+16]
   \   0000017C   0x6820             LDR      R0,[R4, #+0]
   \   0000017E   0x.... 0x....      BL       move_window
   \   00000182   0x0005             MOVS     R5,R0
   1548          		if (res == FR_OK) {
   \   00000184   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000186   0x2D00             CMP      R5,#+0
   \   00000188   0xD112             BNE.N    ??dir_register_22
   1549          			dir = dj->dir;
   \   0000018A   0x6966             LDR      R6,[R4, #+20]
   1550          			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   \   0000018C   0x2220             MOVS     R2,#+32
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x0030             MOVS     R0,R6
   \   00000192   0x.... 0x....      BL       mem_set
   1551          			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   \   00000196   0x220B             MOVS     R2,#+11
   \   00000198   0x69A1             LDR      R1,[R4, #+24]
   \   0000019A   0x0030             MOVS     R0,R6
   \   0000019C   0x.... 0x....      BL       mem_cpy
   1552          #if _USE_LFN
   1553          			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   \   000001A0   0x69A0             LDR      R0,[R4, #+24]
   \   000001A2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000001A4   0xF010 0x0018      ANDS     R0,R0,#0x18
   \   000001A8   0x7330             STRB     R0,[R6, #+12]
   1554          #endif
   1555          			dj->fs->wflag = 1;
   \   000001AA   0x6820             LDR      R0,[R4, #+0]
   \   000001AC   0x2101             MOVS     R1,#+1
   \   000001AE   0x7101             STRB     R1,[R0, #+4]
   1556          		}
   1557          	}
   1558          
   1559          	return res;
   \                     ??dir_register_22:
   \   000001B0   0x0028             MOVS     R0,R5
   \   000001B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??dir_register_5:
   \   000001B4   0xB004             ADD      SP,SP,#+16
   \   000001B6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1560          }
   1561          #endif /* !_FS_READONLY */
   1562          
   1563          
   1564          
   1565          
   1566          /*-----------------------------------------------------------------------*/
   1567          /* Remove an object from the directory                                   */
   1568          /*-----------------------------------------------------------------------*/
   1569          #if !_FS_READONLY && !_FS_MINIMIZE

   \                                 In section .text, align 2, keep-with-next
   1570          static
   1571          FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
   1572          	DIR *dj				/* Directory object pointing the entry to be removed */
   1573          )
   1574          {
   \                     dir_remove:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1575          	FRESULT res;
   1576          #if _USE_LFN	/* LFN configuration */
   1577          	WORD i;
   1578          
   1579          	i = dj->index;	/* SFN index */
   \   00000004   0x88E5             LDRH     R5,[R4, #+6]
   1580          	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   \   00000006   0x8C20             LDRH     R0,[R4, #+32]
   \   00000008   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD101             BNE.N    ??dir_remove_0
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xE000             B.N      ??dir_remove_1
   \                     ??dir_remove_0:
   \   00000014   0x8C21             LDRH     R1,[R4, #+32]
   \                     ??dir_remove_1:
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       dir_sdi
   1581          	if (res == FR_OK) {
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD11B             BNE.N    ??dir_remove_2
   1582          		do {
   1583          			res = move_window(dj->fs, dj->sect);
   \                     ??dir_remove_3:
   \   00000024   0x6921             LDR      R1,[R4, #+16]
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x.... 0x....      BL       move_window
   1584          			if (res != FR_OK) break;
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD110             BNE.N    ??dir_remove_4
   1585          			*dj->dir = DDE;			/* Mark the entry "deleted" */
   \                     ??dir_remove_5:
   \   00000032   0x6961             LDR      R1,[R4, #+20]
   \   00000034   0x22E5             MOVS     R2,#+229
   \   00000036   0x700A             STRB     R2,[R1, #+0]
   1586          			dj->fs->wflag = 1;
   \   00000038   0x6821             LDR      R1,[R4, #+0]
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x710A             STRB     R2,[R1, #+4]
   1587          			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   \   0000003E   0x88E1             LDRH     R1,[R4, #+6]
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x42A9             CMP      R1,R5
   \   00000044   0xD206             BCS.N    ??dir_remove_4
   1588          			res = dir_next(dj, 0);		/* Next entry */
   \                     ??dir_remove_6:
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       dir_next
   1589          		} while (res == FR_OK);
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0E7             BEQ.N    ??dir_remove_3
   1590          		if (res == FR_NO_FILE) res = FR_INT_ERR;
   \                     ??dir_remove_4:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x2804             CMP      R0,#+4
   \   00000058   0xD100             BNE.N    ??dir_remove_2
   \   0000005A   0x2002             MOVS     R0,#+2
   1591          	}
   1592          
   1593          #else			/* Non LFN configuration */
   1594          	res = dir_sdi(dj, dj->index);
   1595          	if (res == FR_OK) {
   1596          		res = move_window(dj->fs, dj->sect);
   1597          		if (res == FR_OK) {
   1598          			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1599          			dj->fs->wflag = 1;
   1600          		}
   1601          	}
   1602          #endif
   1603          
   1604          	return res;
   \                     ??dir_remove_2:
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1605          }
   1606          #endif /* !_FS_READONLY */
   1607          
   1608          
   1609          
   1610          
   1611          /*-----------------------------------------------------------------------*/
   1612          /* Pick a segment and create the object name in directory form           */
   1613          /*-----------------------------------------------------------------------*/
   1614          

   \                                 In section .text, align 2, keep-with-next
   1615          static
   1616          FRESULT create_name (
   1617          	DIR *dj,			/* Pointer to the directory object */
   1618          	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
   1619          )
   1620          {
   \                     create_name:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0x4689             MOV      R9,R1
   1621          #ifdef _EXCVT
   1622          	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
   1623          #endif
   1624          
   1625          #if _USE_LFN	/* LFN configuration */
   1626          	BYTE b, cf;
   1627          	WCHAR w, *lfn;
   1628          	UINT i, ni, si, di;
   1629          	const TCHAR *p;
   1630          
   1631          	/* Create LFN in Unicode */
   1632          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   \   00000006   0xF8D9 0xA000      LDR      R10,[R9, #+0]
   \   0000000A   0xE001             B.N      ??create_name_0
   \                     ??create_name_1:
   \   0000000C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??create_name_0:
   \   00000010   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000014   0x282F             CMP      R0,#+47
   \   00000016   0xD0F9             BEQ.N    ??create_name_1
   \   00000018   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   0000001C   0x285C             CMP      R0,#+92
   \   0000001E   0xD0F5             BEQ.N    ??create_name_1
   1633          	lfn = dj->lfn;
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x69C7             LDR      R7,[R0, #+28]
   1634          	si = di = 0;
   \   00000024   0x2500             MOVS     R5,#+0
   \   00000026   0x002E             MOVS     R6,R5
   \   00000028   0xE002             B.N      ??create_name_2
   1635          	for (;;) {
   1636          		w = p[si++];					/* Get a character */
   1637          		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1638          		if (di >= _MAX_LFN)				/* Reject too long name */
   1639          			return FR_INVALID_NAME;
   1640          #if !_LFN_UNICODE
   1641          		w &= 0xFF;
   1642          		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   1643          			b = (BYTE)p[si++];			/* Get 2nd byte */
   1644          			if (!IsDBCS2(b))
   1645          				return FR_INVALID_NAME;	/* Reject invalid sequence */
   1646          			w = (w << 8) + b;			/* Create a DBC */
   1647          		}
   1648          		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1649          		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1650          #endif
   1651          		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1652          			return FR_INVALID_NAME;
   1653          		lfn[di++] = w;					/* Store the Unicode char */
   \                     ??create_name_3:
   \   0000002A   0xF827 0x8016      STRH     R8,[R7, R6, LSL #+1]
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??create_name_2:
   \   00000030   0xF815 0x800A      LDRB     R8,[R5, R10]
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \   00000036   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003A   0xF1B8 0x0F20      CMP      R8,#+32
   \   0000003E   0xDB09             BLT.N    ??create_name_4
   \   00000040   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000044   0xF1B8 0x0F2F      CMP      R8,#+47
   \   00000048   0xD004             BEQ.N    ??create_name_4
   \   0000004A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004E   0xF1B8 0x0F5C      CMP      R8,#+92
   \   00000052   0xD10B             BNE.N    ??create_name_5
   1654          	}
   1655          	*path = &p[si];						/* Return pointer to the next segment */
   \                     ??create_name_4:
   \   00000054   0xEB15 0x000A      ADDS     R0,R5,R10
   \   00000058   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1656          	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   \   0000005C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000060   0xF1B8 0x0F20      CMP      R8,#+32
   \   00000064   0xDA43             BGE.N    ??create_name_6
   \   00000066   0xF05F 0x0904      MOVS     R9,#+4
   \   0000006A   0xE042             B.N      ??create_name_7
   \                     ??create_name_5:
   \   0000006C   0x2EFF             CMP      R6,#+255
   \   0000006E   0xD301             BCC.N    ??create_name_8
   \   00000070   0x2006             MOVS     R0,#+6
   \   00000072   0xE0B5             B.N      ??create_name_9
   \                     ??create_name_8:
   \   00000074   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x3881             SUBS     R0,R0,#+129
   \   0000007E   0x281F             CMP      R0,#+31
   \   00000080   0xD304             BCC.N    ??create_name_10
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x38E0             SUBS     R0,R0,#+224
   \   00000088   0x281D             CMP      R0,#+29
   \   0000008A   0xD213             BCS.N    ??create_name_11
   \                     ??create_name_10:
   \   0000008C   0xF815 0x400A      LDRB     R4,[R5, R10]
   \   00000090   0x1C6D             ADDS     R5,R5,#+1
   \   00000092   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000094   0xF1B4 0x0040      SUBS     R0,R4,#+64
   \   00000098   0x283F             CMP      R0,#+63
   \   0000009A   0xD306             BCC.N    ??create_name_12
   \   0000009C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009E   0xF1B4 0x0080      SUBS     R0,R4,#+128
   \   000000A2   0x287D             CMP      R0,#+125
   \   000000A4   0xD301             BCC.N    ??create_name_12
   \   000000A6   0x2006             MOVS     R0,#+6
   \   000000A8   0xE09A             B.N      ??create_name_9
   \                     ??create_name_12:
   \   000000AA   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B0   0xEB14 0x2808      ADDS     R8,R4,R8, LSL #+8
   \                     ??create_name_11:
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BA   0x.... 0x....      BL       ff_convert
   \   000000BE   0x4680             MOV      R8,R0
   \   000000C0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000C4   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000C8   0xD101             BNE.N    ??create_name_13
   \   000000CA   0x2006             MOVS     R0,#+6
   \   000000CC   0xE088             B.N      ??create_name_9
   \                     ??create_name_13:
   \   000000CE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000D2   0xF1B8 0x0F80      CMP      R8,#+128
   \   000000D6   0xDAA8             BGE.N    ??create_name_3
   \   000000D8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000DC   0x4641             MOV      R1,R8
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable7
   \   000000E2   0x.... 0x....      BL       chk_chr
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD09F             BEQ.N    ??create_name_3
   \   000000EA   0x2006             MOVS     R0,#+6
   \   000000EC   0xE078             B.N      ??create_name_9
   \                     ??create_name_6:
   \   000000EE   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??create_name_7:
   \   000000F2   0xE000             B.N      ??create_name_14
   1657          #if _FS_RPATH
   1658          	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
   1659          		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
   1660          		lfn[di] = 0;
   1661          		for (i = 0; i < 11; i++)
   1662          			dj->fn[i] = (i < di) ? '.' : ' ';
   1663          		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
   1664          		return FR_OK;
   1665          	}
   1666          #endif
   1667          	while (di) {						/* Strip trailing spaces and dots */
   1668          		w = lfn[di-1];
   1669          		if (w != ' ' && w != '.') break;
   1670          		di--;
   \                     ??create_name_15:
   \   000000F4   0x1E76             SUBS     R6,R6,#+1
   \                     ??create_name_14:
   \   000000F6   0x2E00             CMP      R6,#+0
   \   000000F8   0xD00D             BEQ.N    ??create_name_16
   \   000000FA   0xEB17 0x0046      ADDS     R0,R7,R6, LSL #+1
   \   000000FE   0xF830 0x8C02      LDRH     R8,[R0, #-2]
   \   00000102   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000106   0xF1B8 0x0F20      CMP      R8,#+32
   \   0000010A   0xD0F3             BEQ.N    ??create_name_15
   \   0000010C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000110   0xF1B8 0x0F2E      CMP      R8,#+46
   \   00000114   0xD0EE             BEQ.N    ??create_name_15
   1671          	}
   1672          	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   \                     ??create_name_16:
   \   00000116   0x2E00             CMP      R6,#+0
   \   00000118   0xD101             BNE.N    ??create_name_17
   \   0000011A   0x2006             MOVS     R0,#+6
   \   0000011C   0xE060             B.N      ??create_name_9
   1673          
   1674          	lfn[di] = 0;						/* LFN is created */
   \                     ??create_name_17:
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xF827 0x0016      STRH     R0,[R7, R6, LSL #+1]
   1675          
   1676          	/* Create SFN in directory form */
   1677          	mem_set(dj->fn, ' ', 11);
   \   00000124   0x220B             MOVS     R2,#+11
   \   00000126   0x2120             MOVS     R1,#+32
   \   00000128   0x9800             LDR      R0,[SP, #+0]
   \   0000012A   0x6980             LDR      R0,[R0, #+24]
   \   0000012C   0x.... 0x....      BL       mem_set
   1678          	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   \   00000130   0x2500             MOVS     R5,#+0
   \   00000132   0xE000             B.N      ??create_name_18
   \                     ??create_name_19:
   \   00000134   0x1C6D             ADDS     R5,R5,#+1
   \                     ??create_name_18:
   \   00000136   0xF837 0x0015      LDRH     R0,[R7, R5, LSL #+1]
   \   0000013A   0x2820             CMP      R0,#+32
   \   0000013C   0xD0FA             BEQ.N    ??create_name_19
   \   0000013E   0xF837 0x0015      LDRH     R0,[R7, R5, LSL #+1]
   \   00000142   0x282E             CMP      R0,#+46
   \   00000144   0xD0F6             BEQ.N    ??create_name_19
   1679          	if (si) cf |= NS_LOSS | NS_LFN;
   \   00000146   0x2D00             CMP      R5,#+0
   \   00000148   0xD003             BEQ.N    ??create_name_20
   \   0000014A   0xF059 0x0903      ORRS     R9,R9,#0x3
   \   0000014E   0xE000             B.N      ??create_name_20
   1680          	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   \                     ??create_name_21:
   \   00000150   0x1E76             SUBS     R6,R6,#+1
   \                     ??create_name_20:
   \   00000152   0x2E00             CMP      R6,#+0
   \   00000154   0xD005             BEQ.N    ??create_name_22
   \   00000156   0xEB17 0x0046      ADDS     R0,R7,R6, LSL #+1
   \   0000015A   0xF830 0x0C02      LDRH     R0,[R0, #-2]
   \   0000015E   0x282E             CMP      R0,#+46
   \   00000160   0xD1F6             BNE.N    ??create_name_21
   1681          
   1682          	b = i = 0; ni = 8;
   \                     ??create_name_22:
   \   00000162   0xF05F 0x0B00      MOVS     R11,#+0
   \   00000166   0x465C             MOV      R4,R11
   \   00000168   0xF05F 0x0A08      MOVS     R10,#+8
   \   0000016C   0xE001             B.N      ??create_name_23
   1683          	for (;;) {
   1684          		w = lfn[si++];					/* Get an LFN char */
   1685          		if (!w) break;					/* Break on end of the LFN */
   1686          		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1687          			cf |= NS_LOSS | NS_LFN; continue;
   \                     ??create_name_24:
   \   0000016E   0xF059 0x0903      ORRS     R9,R9,#0x3
   1688          		}
   \                     ??create_name_23:
   \   00000172   0xF837 0x8015      LDRH     R8,[R7, R5, LSL #+1]
   \   00000176   0x1C6D             ADDS     R5,R5,#+1
   \   00000178   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000017C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000180   0xD130             BNE.N    ??create_name_25
   1689          
   1690          		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1691          			if (ni == 11) {				/* Long extension */
   1692          				cf |= NS_LOSS | NS_LFN; break;
   1693          			}
   1694          			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1695          			if (si > di) break;			/* No extension */
   1696          			si = di; i = 8; ni = 11;	/* Enter extension section */
   1697          			b <<= 2; continue;
   1698          		}
   1699          
   1700          		if (w >= 0x80) {				/* Non ASCII char */
   1701          #ifdef _EXCVT
   1702          			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1703          			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1704          #else
   1705          			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
   1706          #endif
   1707          			cf |= NS_LFN;				/* Force create LFN entry */
   1708          		}
   1709          
   1710          		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
   1711          			if (i >= ni - 1) {
   1712          				cf |= NS_LOSS | NS_LFN; i = ni; continue;
   1713          			}
   1714          			dj->fn[i++] = (BYTE)(w >> 8);
   1715          		} else {						/* Single byte char */
   1716          			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   1717          				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1718          			} else {
   1719          				if (IsUpper(w)) {		/* ASCII large capital */
   1720          					b |= 2;
   1721          				} else {
   1722          					if (IsLower(w)) {	/* ASCII small capital */
   1723          						b |= 1; w -= 0x20;
   1724          					}
   1725          				}
   1726          			}
   1727          		}
   1728          		dj->fn[i++] = (BYTE)w;
   1729          	}
   1730          
   1731          	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   \                     ??create_name_26:
   \   00000182   0x9800             LDR      R0,[SP, #+0]
   \   00000184   0x6980             LDR      R0,[R0, #+24]
   \   00000186   0x7800             LDRB     R0,[R0, #+0]
   \   00000188   0x28E5             CMP      R0,#+229
   \   0000018A   0xD103             BNE.N    ??create_name_27
   \   0000018C   0x9800             LDR      R0,[SP, #+0]
   \   0000018E   0x6980             LDR      R0,[R0, #+24]
   \   00000190   0x2105             MOVS     R1,#+5
   \   00000192   0x7001             STRB     R1,[R0, #+0]
   1732          
   1733          	if (ni == 8) b <<= 2;
   \                     ??create_name_27:
   \   00000194   0xF1BA 0x0F08      CMP      R10,#+8
   \   00000198   0xD100             BNE.N    ??create_name_28
   \   0000019A   0x00A4             LSLS     R4,R4,#+2
   1734          	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   \                     ??create_name_28:
   \   0000019C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000019E   0xF014 0x000C      ANDS     R0,R4,#0xC
   \   000001A2   0x280C             CMP      R0,#+12
   \   000001A4   0xD004             BEQ.N    ??create_name_29
   \   000001A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A8   0xF014 0x0003      ANDS     R0,R4,#0x3
   \   000001AC   0x2803             CMP      R0,#+3
   \   000001AE   0xD101             BNE.N    ??create_name_30
   1735          		cf |= NS_LFN;
   \                     ??create_name_29:
   \   000001B0   0xF059 0x0902      ORRS     R9,R9,#0x2
   1736          	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   \                     ??create_name_30:
   \   000001B4   0xEA5F 0x7089      LSLS     R0,R9,#+30
   \   000001B8   0xD40D             BMI.N    ??create_name_31
   1737          		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   \   000001BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001BC   0xF014 0x0003      ANDS     R0,R4,#0x3
   \   000001C0   0x2801             CMP      R0,#+1
   \   000001C2   0xD101             BNE.N    ??create_name_32
   \   000001C4   0xF059 0x0910      ORRS     R9,R9,#0x10
   1738          		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   \                     ??create_name_32:
   \   000001C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CA   0xF014 0x000C      ANDS     R0,R4,#0xC
   \   000001CE   0x2804             CMP      R0,#+4
   \   000001D0   0xD101             BNE.N    ??create_name_31
   \   000001D2   0xF059 0x0908      ORRS     R9,R9,#0x8
   1739          	}
   1740          
   1741          	dj->fn[NS] = cf;	/* SFN is created */
   \                     ??create_name_31:
   \   000001D6   0x9800             LDR      R0,[SP, #+0]
   \   000001D8   0x6980             LDR      R0,[R0, #+24]
   \   000001DA   0xF880 0x900B      STRB     R9,[R0, #+11]
   1742          
   1743          	return FR_OK;
   \   000001DE   0x2000             MOVS     R0,#+0
   \                     ??create_name_9:
   \   000001E0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??create_name_25:
   \   000001E4   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001E8   0xF1B8 0x0F20      CMP      R8,#+32
   \   000001EC   0xD0BF             BEQ.N    ??create_name_24
   \   000001EE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001F2   0xF1B8 0x0F2E      CMP      R8,#+46
   \   000001F6   0xD101             BNE.N    ??create_name_33
   \   000001F8   0x42B5             CMP      R5,R6
   \   000001FA   0xD1B8             BNE.N    ??create_name_24
   \                     ??create_name_33:
   \   000001FC   0x45D3             CMP      R11,R10
   \   000001FE   0xD201             BCS.N    ??create_name_34
   \   00000200   0x42B5             CMP      R5,R6
   \   00000202   0xD112             BNE.N    ??create_name_35
   \                     ??create_name_34:
   \   00000204   0xF1BA 0x0F0B      CMP      R10,#+11
   \   00000208   0xD102             BNE.N    ??create_name_36
   \   0000020A   0xF059 0x0903      ORRS     R9,R9,#0x3
   \   0000020E   0xE7B8             B.N      ??create_name_26
   \                     ??create_name_36:
   \   00000210   0x42B5             CMP      R5,R6
   \   00000212   0xD001             BEQ.N    ??create_name_37
   \   00000214   0xF059 0x0903      ORRS     R9,R9,#0x3
   \                     ??create_name_37:
   \   00000218   0x42AE             CMP      R6,R5
   \   0000021A   0xD3B2             BCC.N    ??create_name_26
   \                     ??create_name_38:
   \   0000021C   0x0035             MOVS     R5,R6
   \   0000021E   0xF05F 0x0B08      MOVS     R11,#+8
   \   00000222   0xF05F 0x0A0B      MOVS     R10,#+11
   \   00000226   0x00A4             LSLS     R4,R4,#+2
   \   00000228   0xE7A3             B.N      ??create_name_23
   \                     ??create_name_35:
   \   0000022A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000022E   0xF1B8 0x0F80      CMP      R8,#+128
   \   00000232   0xDB0A             BLT.N    ??create_name_39
   \   00000234   0x4640             MOV      R0,R8
   \   00000236   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000238   0x.... 0x....      BL       ff_wtoupper
   \   0000023C   0x2100             MOVS     R1,#+0
   \   0000023E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000240   0x.... 0x....      BL       ff_convert
   \   00000244   0x4680             MOV      R8,R0
   \   00000246   0xF059 0x0902      ORRS     R9,R9,#0x2
   \                     ??create_name_39:
   \   0000024A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000024E   0xF1B8 0x0FFF      CMP      R8,#+255
   \   00000252   0xDD12             BLE.N    ??create_name_40
   \   00000254   0xF1BA 0x0001      SUBS     R0,R10,#+1
   \   00000258   0x4583             CMP      R11,R0
   \   0000025A   0xD303             BCC.N    ??create_name_41
   \   0000025C   0xF059 0x0903      ORRS     R9,R9,#0x3
   \   00000260   0x46D3             MOV      R11,R10
   \   00000262   0xE786             B.N      ??create_name_23
   \                     ??create_name_41:
   \   00000264   0x9800             LDR      R0,[SP, #+0]
   \   00000266   0x6980             LDR      R0,[R0, #+24]
   \   00000268   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000026C   0xEA5F 0x2118      LSRS     R1,R8,#+8
   \   00000270   0xF80B 0x1000      STRB     R1,[R11, R0]
   \   00000274   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000278   0xE025             B.N      ??create_name_42
   \                     ??create_name_40:
   \   0000027A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000027E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000282   0xD008             BEQ.N    ??create_name_43
   \   00000284   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000288   0x4641             MOV      R1,R8
   \   0000028A   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000028E   0x.... 0x....      BL       chk_chr
   \   00000292   0x2800             CMP      R0,#+0
   \   00000294   0xD004             BEQ.N    ??create_name_44
   \                     ??create_name_43:
   \   00000296   0xF05F 0x085F      MOVS     R8,#+95
   \   0000029A   0xF059 0x0903      ORRS     R9,R9,#0x3
   \   0000029E   0xE012             B.N      ??create_name_42
   \                     ??create_name_44:
   \   000002A0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000002A4   0xF1B8 0x0041      SUBS     R0,R8,#+65
   \   000002A8   0x281A             CMP      R0,#+26
   \   000002AA   0xD202             BCS.N    ??create_name_45
   \   000002AC   0xF054 0x0402      ORRS     R4,R4,#0x2
   \   000002B0   0xE009             B.N      ??create_name_42
   \                     ??create_name_45:
   \   000002B2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000002B6   0xF1B8 0x0061      SUBS     R0,R8,#+97
   \   000002BA   0x281A             CMP      R0,#+26
   \   000002BC   0xD203             BCS.N    ??create_name_42
   \   000002BE   0xF054 0x0401      ORRS     R4,R4,#0x1
   \   000002C2   0xF1B8 0x0820      SUBS     R8,R8,#+32
   \                     ??create_name_42:
   \   000002C6   0x9800             LDR      R0,[SP, #+0]
   \   000002C8   0x6980             LDR      R0,[R0, #+24]
   \   000002CA   0xF80B 0x8000      STRB     R8,[R11, R0]
   \   000002CE   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000002D2   0xE74E             B.N      ??create_name_23
   1744          
   1745          
   1746          #else	/* Non-LFN configuration */
   1747          	BYTE b, c, d, *sfn;
   1748          	UINT ni, si, i;
   1749          	const char *p;
   1750          
   1751          	/* Create file name in directory form */
   1752          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1753          	sfn = dj->fn;
   1754          	mem_set(sfn, ' ', 11);
   1755          	si = i = b = 0; ni = 8;
   1756          #if _FS_RPATH
   1757          	if (p[si] == '.') { /* Is this a dot entry? */
   1758          		for (;;) {
   1759          			c = (BYTE)p[si++];
   1760          			if (c != '.' || si >= 3) break;
   1761          			sfn[i++] = c;
   1762          		}
   1763          		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   1764          		*path = &p[si];									/* Return pointer to the next segment */
   1765          		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
   1766          		return FR_OK;
   1767          	}
   1768          #endif
   1769          	for (;;) {
   1770          		c = (BYTE)p[si++];
   1771          		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   1772          		if (c == '.' || i >= ni) {
   1773          			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   1774          			i = 8; ni = 11;
   1775          			b <<= 2; continue;
   1776          		}
   1777          		if (c >= 0x80) {				/* Extended char? */
   1778          			b |= 3;						/* Eliminate NT flag */
   1779          #ifdef _EXCVT
   1780          			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
   1781          #else
   1782          #if !_DF1S	/* ASCII only cfg */
   1783          			return FR_INVALID_NAME;
   1784          #endif
   1785          #endif
   1786          		}
   1787          		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   1788          			d = (BYTE)p[si++];			/* Get 2nd byte */
   1789          			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
   1790          				return FR_INVALID_NAME;
   1791          			sfn[i++] = c;
   1792          			sfn[i++] = d;
   1793          		} else {						/* Single byte code */
   1794          			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
   1795          				return FR_INVALID_NAME;
   1796          			if (IsUpper(c)) {			/* ASCII large capital? */
   1797          				b |= 2;
   1798          			} else {
   1799          				if (IsLower(c)) {		/* ASCII small capital? */
   1800          					b |= 1; c -= 0x20;
   1801          				}
   1802          			}
   1803          			sfn[i++] = c;
   1804          		}
   1805          	}
   1806          	*path = &p[si];						/* Return pointer to the next segment */
   1807          	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1808          
   1809          	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   1810          	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   1811          
   1812          	if (ni == 8) b <<= 2;
   1813          	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   1814          	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   1815          
   1816          	sfn[NS] = c;		/* Store NT flag, File name is created */
   1817          
   1818          	return FR_OK;
   1819          #endif
   1820          }
   1821          
   1822          
   1823          
   1824          
   1825          /*-----------------------------------------------------------------------*/
   1826          /* Get file information from directory entry                             */
   1827          /*-----------------------------------------------------------------------*/
   1828          #if _FS_MINIMIZE <= 1

   \                                 In section .text, align 2, keep-with-next
   1829          static
   1830          void get_fileinfo (		/* No return code */
   1831          	DIR *dj,			/* Pointer to the directory object */
   1832          	FILINFO *fno	 	/* Pointer to the file information to be filled */
   1833          )
   1834          {
   \                     get_fileinfo:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   1835          	UINT i;
   1836          	BYTE nt, *dir;
   1837          	TCHAR *p, c;
   1838          
   1839          
   1840          	p = fno->fname;
   \   00000004   0xF204 0x0109      ADDW     R1,R4,#+9
   1841          	if (dj->sect) {
   \   00000008   0x6902             LDR      R2,[R0, #+16]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD048             BEQ.N    ??get_fileinfo_0
   1842          		dir = dj->dir;
   \   0000000E   0x6942             LDR      R2,[R0, #+20]
   1843          		nt = dir[DIR_NTres];		/* NT flag */
   \   00000010   0x7B13             LDRB     R3,[R2, #+12]
   1844          		for (i = 0; i < 8; i++) {	/* Copy name body */
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0xE00E             B.N      ??get_fileinfo_1
   1845          			c = dir[i];
   1846          			if (c == ' ') break;
   1847          			if (c == NDDE) c = (TCHAR)DDE;
   \                     ??get_fileinfo_2:
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E05             CMP      R6,#+5
   \   0000001A   0xD100             BNE.N    ??get_fileinfo_3
   \   0000001C   0x26E5             MOVS     R6,#+229
   1848          			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   \                     ??get_fileinfo_3:
   \   0000001E   0x071F             LSLS     R7,R3,#+28
   \   00000020   0xD505             BPL.N    ??get_fileinfo_4
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0xF1B6 0x0741      SUBS     R7,R6,#+65
   \   00000028   0x2F1A             CMP      R7,#+26
   \   0000002A   0xD200             BCS.N    ??get_fileinfo_4
   \   0000002C   0x3620             ADDS     R6,R6,#+32
   1849          #if _LFN_UNICODE
   1850          			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
   1851          				c = (c << 8) | dir[++i];
   1852          			c = ff_convert(c, 1);
   1853          			if (!c) c = '?';
   1854          #endif
   1855          			*p++ = c;
   \                     ??get_fileinfo_4:
   \   0000002E   0x700E             STRB     R6,[R1, #+0]
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \                     ??get_fileinfo_1:
   \   00000034   0x2D08             CMP      R5,#+8
   \   00000036   0xD203             BCS.N    ??get_fileinfo_5
   \   00000038   0x5CAE             LDRB     R6,[R5, R2]
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x2E20             CMP      R6,#+32
   \   0000003E   0xD1EA             BNE.N    ??get_fileinfo_2
   1856          		}
   1857          		if (dir[8] != ' ') {		/* Copy name extension */
   \                     ??get_fileinfo_5:
   \   00000040   0x7A15             LDRB     R5,[R2, #+8]
   \   00000042   0x2D20             CMP      R5,#+32
   \   00000044   0xD015             BEQ.N    ??get_fileinfo_6
   1858          			*p++ = '.';
   \   00000046   0x252E             MOVS     R5,#+46
   \   00000048   0x700D             STRB     R5,[R1, #+0]
   \   0000004A   0x1C49             ADDS     R1,R1,#+1
   1859          			for (i = 8; i < 11; i++) {
   \   0000004C   0x2508             MOVS     R5,#+8
   \   0000004E   0xE00A             B.N      ??get_fileinfo_7
   1860          				c = dir[i];
   1861          				if (c == ' ') break;
   1862          				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   \                     ??get_fileinfo_8:
   \   00000050   0x06DF             LSLS     R7,R3,#+27
   \   00000052   0xD505             BPL.N    ??get_fileinfo_9
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0xF1B6 0x0741      SUBS     R7,R6,#+65
   \   0000005A   0x2F1A             CMP      R7,#+26
   \   0000005C   0xD200             BCS.N    ??get_fileinfo_9
   \   0000005E   0x3620             ADDS     R6,R6,#+32
   1863          #if _LFN_UNICODE
   1864          				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
   1865          					c = (c << 8) | dir[++i];
   1866          				c = ff_convert(c, 1);
   1867          				if (!c) c = '?';
   1868          #endif
   1869          				*p++ = c;
   \                     ??get_fileinfo_9:
   \   00000060   0x700E             STRB     R6,[R1, #+0]
   \   00000062   0x1C49             ADDS     R1,R1,#+1
   \   00000064   0x1C6D             ADDS     R5,R5,#+1
   \                     ??get_fileinfo_7:
   \   00000066   0x2D0B             CMP      R5,#+11
   \   00000068   0xD203             BCS.N    ??get_fileinfo_6
   \   0000006A   0x5CAE             LDRB     R6,[R5, R2]
   \   0000006C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006E   0x2E20             CMP      R6,#+32
   \   00000070   0xD1EE             BNE.N    ??get_fileinfo_8
   1870          			}
   1871          		}
   1872          		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   \                     ??get_fileinfo_6:
   \   00000072   0x7AD3             LDRB     R3,[R2, #+11]
   \   00000074   0x7223             STRB     R3,[R4, #+8]
   1873          		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
   \   00000076   0x7FD3             LDRB     R3,[R2, #+31]
   \   00000078   0x7F95             LDRB     R5,[R2, #+30]
   \   0000007A   0x042D             LSLS     R5,R5,#+16
   \   0000007C   0xEA55 0x6303      ORRS     R3,R5,R3, LSL #+24
   \   00000080   0x7F55             LDRB     R5,[R2, #+29]
   \   00000082   0xEA53 0x2305      ORRS     R3,R3,R5, LSL #+8
   \   00000086   0x7F15             LDRB     R5,[R2, #+28]
   \   00000088   0x432B             ORRS     R3,R5,R3
   \   0000008A   0x6023             STR      R3,[R4, #+0]
   1874          		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
   \   0000008C   0x7E53             LDRB     R3,[R2, #+25]
   \   0000008E   0x7E15             LDRB     R5,[R2, #+24]
   \   00000090   0xEA55 0x2303      ORRS     R3,R5,R3, LSL #+8
   \   00000094   0x80A3             STRH     R3,[R4, #+4]
   1875          		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
   \   00000096   0x7DD3             LDRB     R3,[R2, #+23]
   \   00000098   0x7D92             LDRB     R2,[R2, #+22]
   \   0000009A   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   0000009E   0x80E2             STRH     R2,[R4, #+6]
   1876          	}
   1877          	*p = 0;		/* Terminate SFN str by a \0 */
   \                     ??get_fileinfo_0:
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0x700A             STRB     R2,[R1, #+0]
   1878          
   1879          #if _USE_LFN
   1880          	if (fno->lfname && fno->lfsize) {
   \   000000A4   0x69A1             LDR      R1,[R4, #+24]
   \   000000A6   0x2900             CMP      R1,#+0
   \   000000A8   0xD02D             BEQ.N    ??get_fileinfo_10
   \   000000AA   0x69E1             LDR      R1,[R4, #+28]
   \   000000AC   0x2900             CMP      R1,#+0
   \   000000AE   0xD02A             BEQ.N    ??get_fileinfo_10
   1881          		TCHAR *tp = fno->lfname;
   \   000000B0   0x69A6             LDR      R6,[R4, #+24]
   1882          		WCHAR w, *lfn;
   1883          
   1884          		i = 0;
   \   000000B2   0x2500             MOVS     R5,#+0
   1885          		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   \   000000B4   0x6901             LDR      R1,[R0, #+16]
   \   000000B6   0x2900             CMP      R1,#+0
   \   000000B8   0xD023             BEQ.N    ??get_fileinfo_11
   \   000000BA   0x8C01             LDRH     R1,[R0, #+32]
   \   000000BC   0xF64F 0x72FF      MOVW     R2,#+65535
   \   000000C0   0x4291             CMP      R1,R2
   \   000000C2   0xD01E             BEQ.N    ??get_fileinfo_11
   1886          			lfn = dj->lfn;
   \   000000C4   0x69C7             LDR      R7,[R0, #+28]
   \   000000C6   0xE001             B.N      ??get_fileinfo_12
   1887          			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   1888          #if !_LFN_UNICODE
   1889          				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
   1890          				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   1891          				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
   1892          					tp[i++] = (TCHAR)(w >> 8);
   1893          #endif
   1894          				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   1895          				tp[i++] = (TCHAR)w;
   \                     ??get_fileinfo_13:
   \   000000C8   0x55A8             STRB     R0,[R5, R6]
   \   000000CA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??get_fileinfo_12:
   \   000000CC   0x8838             LDRH     R0,[R7, #+0]
   \   000000CE   0x1CBF             ADDS     R7,R7,#+2
   \   000000D0   0x0001             MOVS     R1,R0
   \   000000D2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D4   0x2900             CMP      R1,#+0
   \   000000D6   0xD014             BEQ.N    ??get_fileinfo_11
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DC   0x.... 0x....      BL       ff_convert
   \   000000E0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD101             BNE.N    ??get_fileinfo_14
   \   000000E6   0x2500             MOVS     R5,#+0
   \   000000E8   0xE00B             B.N      ??get_fileinfo_11
   \                     ??get_fileinfo_14:
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x28FF             CMP      R0,#+255
   \   000000EE   0xDD03             BLE.N    ??get_fileinfo_15
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F2   0x0A01             LSRS     R1,R0,#+8
   \   000000F4   0x55A9             STRB     R1,[R5, R6]
   \   000000F6   0x1C6D             ADDS     R5,R5,#+1
   \                     ??get_fileinfo_15:
   \   000000F8   0x69E1             LDR      R1,[R4, #+28]
   \   000000FA   0x1E49             SUBS     R1,R1,#+1
   \   000000FC   0x428D             CMP      R5,R1
   \   000000FE   0xD3E3             BCC.N    ??get_fileinfo_13
   \   00000100   0x2500             MOVS     R5,#+0
   1896          			}
   1897          		}
   1898          		tp[i] = 0;	/* Terminate the LFN str by a \0 */
   \                     ??get_fileinfo_11:
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x55A8             STRB     R0,[R5, R6]
   1899          	}
   1900          #endif
   1901          }
   \                     ??get_fileinfo_10:
   \   00000106   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1902          #endif /* _FS_MINIMIZE <= 1 */
   1903          
   1904          
   1905          
   1906          
   1907          /*-----------------------------------------------------------------------*/
   1908          /* Follow a file path                                                    */
   1909          /*-----------------------------------------------------------------------*/
   1910          

   \                                 In section .text, align 2, keep-with-next
   1911          static
   1912          FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   1913          	DIR *dj,			/* Directory object to return last directory and found object */
   1914          	const TCHAR *path	/* Full-path string to find a file or directory */
   1915          )
   1916          {
   \                     follow_path:
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1917          	FRESULT res;
   1918          	BYTE *dir, ns;
   1919          
   1920          
   1921          #if _FS_RPATH
   1922          	if (*path == '/' || *path == '\\') { /* There is a heading separator */
   1923          		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
   1924          	} else {							/* No heading separator */
   1925          		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
   1926          	}
   1927          #else
   1928          	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   \   00000004   0x9801             LDR      R0,[SP, #+4]
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x282F             CMP      R0,#+47
   \   0000000A   0xD003             BEQ.N    ??follow_path_0
   \   0000000C   0x9801             LDR      R0,[SP, #+4]
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x285C             CMP      R0,#+92
   \   00000012   0xD102             BNE.N    ??follow_path_1
   1929          		path++;
   \                     ??follow_path_0:
   \   00000014   0x9801             LDR      R0,[SP, #+4]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x9001             STR      R0,[SP, #+4]
   1930          	dj->sclust = 0;						/* Start from the root dir */
   \                     ??follow_path_1:
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x60A0             STR      R0,[R4, #+8]
   1931          #endif
   1932          
   1933          	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2820             CMP      R0,#+32
   \   00000024   0xD213             BCS.N    ??follow_path_2
   1934          		res = dir_sdi(dj, 0);
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       dir_sdi
   1935          		dj->dir = 0;
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x6161             STR      R1,[R4, #+20]
   \   00000032   0xE029             B.N      ??follow_path_3
   1936          
   1937          	} else {							/* Follow path */
   1938          		for (;;) {
   1939          			res = create_name(dj, &path);	/* Get a segment */
   1940          			if (res != FR_OK) break;
   1941          			res = dir_find(dj);				/* Find it */
   1942          			ns = *(dj->fn+NS);
   1943          			if (res != FR_OK) {				/* Failed to find the object */
   1944          				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1945          				/* Object not found */
   1946          				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
   1947          					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
   1948          					res = FR_OK;
   1949          					if (!(ns & NS_LAST)) continue;
   1950          				} else {							/* Could not find the object */
   1951          					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1952          				}
   1953          				break;
   1954          			}
   1955          			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1956          			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1957          			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1958          				res = FR_NO_PATH; break;
   1959          			}
   1960          			dj->sclust = LD_CLUST(dir);
   \                     ??follow_path_4:
   \   00000034   0x7D41             LDRB     R1,[R0, #+21]
   \   00000036   0x7D02             LDRB     R2,[R0, #+20]
   \   00000038   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x7EC2             LDRB     R2,[R0, #+27]
   \   00000040   0x7E80             LDRB     R0,[R0, #+26]
   \   00000042   0xEA50 0x2002      ORRS     R0,R0,R2, LSL #+8
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0xEA50 0x4001      ORRS     R0,R0,R1, LSL #+16
   \   0000004C   0x60A0             STR      R0,[R4, #+8]
   \                     ??follow_path_2:
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       create_name
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD115             BNE.N    ??follow_path_3
   \                     ??follow_path_5:
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       dir_find
   \   00000062   0x69A1             LDR      R1,[R4, #+24]
   \   00000064   0x7AC9             LDRB     R1,[R1, #+11]
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD006             BEQ.N    ??follow_path_6
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2804             CMP      R0,#+4
   \   00000070   0xD10A             BNE.N    ??follow_path_3
   \                     ??follow_path_7:
   \   00000072   0x0749             LSLS     R1,R1,#+29
   \   00000074   0xD400             BMI.N    ??follow_path_8
   \   00000076   0x2005             MOVS     R0,#+5
   \                     ??follow_path_8:
   \   00000078   0xE006             B.N      ??follow_path_3
   \                     ??follow_path_6:
   \   0000007A   0x0749             LSLS     R1,R1,#+29
   \   0000007C   0xD404             BMI.N    ??follow_path_3
   \                     ??follow_path_9:
   \   0000007E   0x6960             LDR      R0,[R4, #+20]
   \   00000080   0x7AC1             LDRB     R1,[R0, #+11]
   \   00000082   0x06C9             LSLS     R1,R1,#+27
   \   00000084   0xD4D6             BMI.N    ??follow_path_4
   \   00000086   0x2005             MOVS     R0,#+5
   1961          		}
   1962          	}
   1963          
   1964          	return res;
   \                     ??follow_path_3:
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1965          }
   1966          
   1967          
   1968          
   1969          
   1970          /*-----------------------------------------------------------------------*/
   1971          /* Load boot record and check if it is an FAT boot record                */
   1972          /*-----------------------------------------------------------------------*/
   1973          

   \                                 In section .text, align 2, keep-with-next
   1974          static
   1975          BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
   1976          	FATFS *fs,	/* File system object */
   1977          	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
   1978          )
   1979          {
   \                     check_fs:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1980          	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0xF114 0x0130      ADDS     R1,R4,#+48
   \   0000000C   0x7860             LDRB     R0,[R4, #+1]
   \   0000000E   0x.... 0x....      BL       disk_read
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??check_fs_0
   1981          		return 3;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0xE02D             B.N      ??check_fs_1
   1982          	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   \                     ??check_fs_0:
   \   0000001A   0xF894 0x022F      LDRB     R0,[R4, #+559]
   \   0000001E   0xF894 0x122E      LDRB     R1,[R4, #+558]
   \   00000022   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0xF64A 0x2155      MOVW     R1,#+43605
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD001             BEQ.N    ??check_fs_2
   1983          		return 2;
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0xE020             B.N      ??check_fs_1
   1984          
   1985          	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   \                     ??check_fs_2:
   \   00000034   0xF894 0x0068      LDRB     R0,[R4, #+104]
   \   00000038   0xF894 0x1067      LDRB     R1,[R4, #+103]
   \   0000003C   0x0209             LSLS     R1,R1,#+8
   \   0000003E   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   00000042   0xF894 0x1066      LDRB     R1,[R4, #+102]
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x544146
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xD101             BNE.N    ??check_fs_3
   1986          		return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xE010             B.N      ??check_fs_1
   1987          	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   \                     ??check_fs_3:
   \   00000054   0xF894 0x0084      LDRB     R0,[R4, #+132]
   \   00000058   0xF894 0x1083      LDRB     R1,[R4, #+131]
   \   0000005C   0x0209             LSLS     R1,R1,#+8
   \   0000005E   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   00000062   0xF894 0x1082      LDRB     R1,[R4, #+130]
   \   00000066   0x4308             ORRS     R0,R1,R0
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x544146
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD101             BNE.N    ??check_fs_4
   1988          		return 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xE000             B.N      ??check_fs_1
   1989          
   1990          	return 1;
   \                     ??check_fs_4:
   \   00000074   0x2001             MOVS     R0,#+1
   \                     ??check_fs_1:
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
   1991          }
   1992          
   1993          
   1994          
   1995          
   1996          /*-----------------------------------------------------------------------*/
   1997          /* Check if the file system object is valid or not                       */
   1998          /*-----------------------------------------------------------------------*/
   1999          

   \                                 In section .text, align 2, keep-with-next
   2000          static
   2001          FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
   2002          	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
   2003          	FATFS **rfs,		/* Pointer to pointer to the found file system object */
   2004          	BYTE chk_wp			/* !=0: Check media write protection for write access */
   2005          )
   2006          {
   \                     chk_mounted:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0015             MOVS     R5,R2
   2007          	BYTE fmt, b, *tbl;
   2008          	UINT vol;
   2009          	DSTATUS stat;
   2010          	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
   2011          	WORD nrsv;
   2012          	const TCHAR *p = *path;
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   2013          	FATFS *fs;
   2014          
   2015          	/* Get logical drive number from the path name */
   2016          	vol = p[0] - '0';					/* Is there a drive number? */
   \   00000006   0x7813             LDRB     R3,[R2, #+0]
   \   00000008   0xF1B3 0x0630      SUBS     R6,R3,#+48
   2017          	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   \   0000000C   0x2E0A             CMP      R6,#+10
   \   0000000E   0xD205             BCS.N    ??chk_mounted_0
   \   00000010   0x7853             LDRB     R3,[R2, #+1]
   \   00000012   0x2B3A             CMP      R3,#+58
   \   00000014   0xD102             BNE.N    ??chk_mounted_0
   2018          		p += 2; *path = p;				/* Return pointer to the path name */
   \   00000016   0x1C92             ADDS     R2,R2,#+2
   \   00000018   0x6002             STR      R2,[R0, #+0]
   \   0000001A   0xE000             B.N      ??chk_mounted_1
   2019          	} else {							/* No drive number is given */
   2020          #if _FS_RPATH
   2021          		vol = CurrVol;					/* Use current drive */
   2022          #else
   2023          		vol = 0;						/* Use drive 0 */
   \                     ??chk_mounted_0:
   \   0000001C   0x2600             MOVS     R6,#+0
   2024          #endif
   2025          	}
   2026          
   2027          	/* Check if the logical drive is valid or not */
   2028          	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   \                     ??chk_mounted_1:
   \   0000001E   0x2E02             CMP      R6,#+2
   \   00000020   0xD301             BCC.N    ??chk_mounted_2
   2029          		return FR_INVALID_DRIVE;
   \   00000022   0x200B             MOVS     R0,#+11
   \   00000024   0xE194             B.N      ??chk_mounted_3
   2030          	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   \                     ??chk_mounted_2:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   0000002A   0xF850 0x4026      LDR      R4,[R0, R6, LSL #+2]
   \   0000002E   0x600C             STR      R4,[R1, #+0]
   2031          	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD101             BNE.N    ??chk_mounted_4
   \   00000034   0x200C             MOVS     R0,#+12
   \   00000036   0xE18B             B.N      ??chk_mounted_3
   2032          
   2033          	ENTER_FF(fs);						/* Lock file system */
   2034          
   2035          	if (fs->fs_type) {					/* If the logical drive has been mounted */
   \                     ??chk_mounted_4:
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD00D             BEQ.N    ??chk_mounted_5
   2036          		stat = disk_status(fs->drv);
   \   0000003E   0x7860             LDRB     R0,[R4, #+1]
   \   00000040   0x.... 0x....      BL       disk_status
   2037          		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   \   00000044   0x07C1             LSLS     R1,R0,#+31
   \   00000046   0xD408             BMI.N    ??chk_mounted_5
   2038          #if !_FS_READONLY
   2039          			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   \   00000048   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD003             BEQ.N    ??chk_mounted_6
   \   0000004E   0x0740             LSLS     R0,R0,#+29
   \   00000050   0xD501             BPL.N    ??chk_mounted_6
   2040          				return FR_WRITE_PROTECTED;
   \   00000052   0x200A             MOVS     R0,#+10
   \   00000054   0xE17C             B.N      ??chk_mounted_3
   2041          #endif
   2042          			return FR_OK;				/* The file system object is valid */
   \                     ??chk_mounted_6:
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE17A             B.N      ??chk_mounted_3
   2043          		}
   2044          	}
   2045          
   2046          	/* The logical drive must be mounted. */
   2047          	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
   2048          
   2049          	fs->fs_type = 0;					/* Clear the file system object */
   \                     ??chk_mounted_5:
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x7020             STRB     R0,[R4, #+0]
   2050          	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
   \   0000005E   0x7066             STRB     R6,[R4, #+1]
   2051          	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   \   00000060   0x7860             LDRB     R0,[R4, #+1]
   \   00000062   0x.... 0x....      BL       disk_initialize
   2052          	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   \   00000066   0x07C1             LSLS     R1,R0,#+31
   \   00000068   0xD501             BPL.N    ??chk_mounted_7
   2053          		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   \   0000006A   0x2003             MOVS     R0,#+3
   \   0000006C   0xE170             B.N      ??chk_mounted_3
   2054          #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
   2055          	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
   2056          		return FR_DISK_ERR;
   2057          #endif
   2058          #if !_FS_READONLY
   2059          	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   \                     ??chk_mounted_7:
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD003             BEQ.N    ??chk_mounted_8
   \   00000074   0x0740             LSLS     R0,R0,#+29
   \   00000076   0xD501             BPL.N    ??chk_mounted_8
   2060          		return FR_WRITE_PROTECTED;
   \   00000078   0x200A             MOVS     R0,#+10
   \   0000007A   0xE169             B.N      ??chk_mounted_3
   2061          #endif
   2062          	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   2063          	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
   \                     ??chk_mounted_8:
   \   0000007C   0x2500             MOVS     R5,#+0
   \   0000007E   0x0029             MOVS     R1,R5
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       check_fs
   \   00000086   0x0006             MOVS     R6,R0
   2064          	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
   \   00000088   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008A   0x2E01             CMP      R6,#+1
   \   0000008C   0xD114             BNE.N    ??chk_mounted_9
   2065          		/* Check the partition listed in top of the partition table */
   2066          		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
   \   0000008E   0xF204 0x10EE      ADDW     R0,R4,#+494
   2067          		if (tbl[4]) {									/* Is the partition existing? */
   \   00000092   0x7901             LDRB     R1,[R0, #+4]
   \   00000094   0x2900             CMP      R1,#+0
   \   00000096   0xD00F             BEQ.N    ??chk_mounted_9
   2068          			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
   \   00000098   0x7AC1             LDRB     R1,[R0, #+11]
   \   0000009A   0x7A82             LDRB     R2,[R0, #+10]
   \   0000009C   0x0412             LSLS     R2,R2,#+16
   \   0000009E   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   000000A2   0x7A42             LDRB     R2,[R0, #+9]
   \   000000A4   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   000000A8   0x7A00             LDRB     R0,[R0, #+8]
   \   000000AA   0xEA50 0x0501      ORRS     R5,R0,R1
   2069          			fmt = check_fs(fs, bsect);					/* Check the partition */
   \   000000AE   0x0029             MOVS     R1,R5
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0x.... 0x....      BL       check_fs
   \   000000B6   0x0006             MOVS     R6,R0
   2070          		}
   2071          	}
   2072          	if (fmt == 3) return FR_DISK_ERR;
   \                     ??chk_mounted_9:
   \   000000B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000BA   0x2E03             CMP      R6,#+3
   \   000000BC   0xD101             BNE.N    ??chk_mounted_10
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE146             B.N      ??chk_mounted_3
   2073          	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
   \                     ??chk_mounted_10:
   \   000000C2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C4   0x2E00             CMP      R6,#+0
   \   000000C6   0xD001             BEQ.N    ??chk_mounted_11
   \   000000C8   0x200D             MOVS     R0,#+13
   \   000000CA   0xE141             B.N      ??chk_mounted_3
   2074          
   2075          	/* Following code initializes the file system object */
   2076          
   2077          	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   \                     ??chk_mounted_11:
   \   000000CC   0xF894 0x003C      LDRB     R0,[R4, #+60]
   \   000000D0   0xF894 0x103B      LDRB     R1,[R4, #+59]
   \   000000D4   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000D8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   0xF5B0 0x7F00      CMP      R0,#+512
   \   000000DE   0xD001             BEQ.N    ??chk_mounted_12
   2078          		return FR_NO_FILESYSTEM;
   \   000000E0   0x200D             MOVS     R0,#+13
   \   000000E2   0xE135             B.N      ??chk_mounted_3
   2079          
   2080          	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   \                     ??chk_mounted_12:
   \   000000E4   0xF894 0x0047      LDRB     R0,[R4, #+71]
   \   000000E8   0xF894 0x1046      LDRB     R1,[R4, #+70]
   \   000000EC   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   2081          	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD10D             BNE.N    ??chk_mounted_13
   \   000000F6   0xF894 0x0057      LDRB     R0,[R4, #+87]
   \   000000FA   0xF894 0x1056      LDRB     R1,[R4, #+86]
   \   000000FE   0x0409             LSLS     R1,R1,#+16
   \   00000100   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000104   0xF894 0x1055      LDRB     R1,[R4, #+85]
   \   00000108   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000010C   0xF894 0x1054      LDRB     R1,[R4, #+84]
   \   00000110   0x4308             ORRS     R0,R1,R0
   2082          	fs->fsize = fasize;
   \                     ??chk_mounted_13:
   \   00000112   0x61E0             STR      R0,[R4, #+28]
   2083          
   2084          	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   \   00000114   0xF894 0x1040      LDRB     R1,[R4, #+64]
   \   00000118   0x70E1             STRB     R1,[R4, #+3]
   2085          	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   \   0000011A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000011C   0x2901             CMP      R1,#+1
   \   0000011E   0xD004             BEQ.N    ??chk_mounted_14
   \   00000120   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000122   0x2902             CMP      R1,#+2
   \   00000124   0xD001             BEQ.N    ??chk_mounted_14
   \   00000126   0x200D             MOVS     R0,#+13
   \   00000128   0xE112             B.N      ??chk_mounted_3
   2086          	fasize *= b;										/* Number of sectors for FAT area */
   \                     ??chk_mounted_14:
   \   0000012A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000012C   0x4348             MULS     R0,R1,R0
   2087          
   2088          	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   \   0000012E   0xF894 0x103D      LDRB     R1,[R4, #+61]
   \   00000132   0x70A1             STRB     R1,[R4, #+2]
   2089          	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   \   00000134   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000136   0x2900             CMP      R1,#+0
   \   00000138   0xD003             BEQ.N    ??chk_mounted_15
   \   0000013A   0x1E4A             SUBS     R2,R1,#+1
   \   0000013C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000013E   0x4211             TST      R1,R2
   \   00000140   0xD001             BEQ.N    ??chk_mounted_16
   \                     ??chk_mounted_15:
   \   00000142   0x200D             MOVS     R0,#+13
   \   00000144   0xE104             B.N      ??chk_mounted_3
   2090          
   2091          	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   \                     ??chk_mounted_16:
   \   00000146   0xF894 0x1042      LDRB     R1,[R4, #+66]
   \   0000014A   0xF894 0x2041      LDRB     R2,[R4, #+65]
   \   0000014E   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000152   0x8121             STRH     R1,[R4, #+8]
   2092          	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   \   00000154   0x8921             LDRH     R1,[R4, #+8]
   \   00000156   0x2210             MOVS     R2,#+16
   \   00000158   0xFBB1 0xF3F2      UDIV     R3,R1,R2
   \   0000015C   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000160   0x2B00             CMP      R3,#+0
   \   00000162   0xD001             BEQ.N    ??chk_mounted_17
   \   00000164   0x200D             MOVS     R0,#+13
   \   00000166   0xE0F3             B.N      ??chk_mounted_3
   2093          
   2094          	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   \                     ??chk_mounted_17:
   \   00000168   0xF894 0x1044      LDRB     R1,[R4, #+68]
   \   0000016C   0xF894 0x2043      LDRB     R2,[R4, #+67]
   \   00000170   0xEA52 0x2201      ORRS     R2,R2,R1, LSL #+8
   \   00000174   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   2095          	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   \   00000176   0x2A00             CMP      R2,#+0
   \   00000178   0xD10D             BNE.N    ??chk_mounted_18
   \   0000017A   0xF894 0x1053      LDRB     R1,[R4, #+83]
   \   0000017E   0xF894 0x2052      LDRB     R2,[R4, #+82]
   \   00000182   0x0412             LSLS     R2,R2,#+16
   \   00000184   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   00000188   0xF894 0x2051      LDRB     R2,[R4, #+81]
   \   0000018C   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   00000190   0xF894 0x2050      LDRB     R2,[R4, #+80]
   \   00000194   0x430A             ORRS     R2,R2,R1
   2096          
   2097          	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   \                     ??chk_mounted_18:
   \   00000196   0xF894 0x103F      LDRB     R1,[R4, #+63]
   \   0000019A   0xF894 0x303E      LDRB     R3,[R4, #+62]
   \   0000019E   0xEA53 0x2101      ORRS     R1,R3,R1, LSL #+8
   2098          	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   \   000001A2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001A4   0x2900             CMP      R1,#+0
   \   000001A6   0xD101             BNE.N    ??chk_mounted_19
   \   000001A8   0x200D             MOVS     R0,#+13
   \   000001AA   0xE0D1             B.N      ??chk_mounted_3
   2099          
   2100          	/* Determine the FAT sub type */
   2101          	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   \                     ??chk_mounted_19:
   \   000001AC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001AE   0x1843             ADDS     R3,R0,R1
   \   000001B0   0x8926             LDRH     R6,[R4, #+8]
   \   000001B2   0xEB13 0x1316      ADDS     R3,R3,R6, LSR #+4
   2102          	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   \   000001B6   0x429A             CMP      R2,R3
   \   000001B8   0xD201             BCS.N    ??chk_mounted_20
   \   000001BA   0x200D             MOVS     R0,#+13
   \   000001BC   0xE0C8             B.N      ??chk_mounted_3
   2103          	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   \                     ??chk_mounted_20:
   \   000001BE   0x1AD2             SUBS     R2,R2,R3
   \   000001C0   0x78A6             LDRB     R6,[R4, #+2]
   \   000001C2   0xFBB2 0xF2F6      UDIV     R2,R2,R6
   2104          	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   \   000001C6   0x2A00             CMP      R2,#+0
   \   000001C8   0xD101             BNE.N    ??chk_mounted_21
   \   000001CA   0x200D             MOVS     R0,#+13
   \   000001CC   0xE0C0             B.N      ??chk_mounted_3
   2105          	fmt = FS_FAT12;
   \                     ??chk_mounted_21:
   \   000001CE   0x2601             MOVS     R6,#+1
   2106          	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   \   000001D0   0xF640 0x77F6      MOVW     R7,#+4086
   \   000001D4   0x42BA             CMP      R2,R7
   \   000001D6   0xD300             BCC.N    ??chk_mounted_22
   \   000001D8   0x2602             MOVS     R6,#+2
   2107          	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   \                     ??chk_mounted_22:
   \   000001DA   0xF64F 0x77F6      MOVW     R7,#+65526
   \   000001DE   0x42BA             CMP      R2,R7
   \   000001E0   0xD300             BCC.N    ??chk_mounted_23
   \   000001E2   0x2603             MOVS     R6,#+3
   2108          
   2109          	/* Boundaries and Limits */
   2110          	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   \                     ??chk_mounted_23:
   \   000001E4   0x1C92             ADDS     R2,R2,#+2
   \   000001E6   0x61A2             STR      R2,[R4, #+24]
   2111          	fs->database = bsect + sysect;						/* Data start sector */
   \   000001E8   0x195A             ADDS     R2,R3,R5
   \   000001EA   0x62A2             STR      R2,[R4, #+40]
   2112          	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   \   000001EC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001EE   0x1949             ADDS     R1,R1,R5
   \   000001F0   0x6221             STR      R1,[R4, #+32]
   2113          	if (fmt == FS_FAT32) {
   \   000001F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001F4   0x2E03             CMP      R6,#+3
   \   000001F6   0xD116             BNE.N    ??chk_mounted_24
   2114          		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   \   000001F8   0x8920             LDRH     R0,[R4, #+8]
   \   000001FA   0x2800             CMP      R0,#+0
   \   000001FC   0xD001             BEQ.N    ??chk_mounted_25
   \   000001FE   0x200D             MOVS     R0,#+13
   \   00000200   0xE0A6             B.N      ??chk_mounted_3
   2115          		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   \                     ??chk_mounted_25:
   \   00000202   0xF894 0x005F      LDRB     R0,[R4, #+95]
   \   00000206   0xF894 0x105E      LDRB     R1,[R4, #+94]
   \   0000020A   0x0409             LSLS     R1,R1,#+16
   \   0000020C   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000210   0xF894 0x105D      LDRB     R1,[R4, #+93]
   \   00000214   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000218   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \   0000021C   0x4308             ORRS     R0,R1,R0
   \   0000021E   0x6260             STR      R0,[R4, #+36]
   2116          		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   \   00000220   0x69A0             LDR      R0,[R4, #+24]
   \   00000222   0x0080             LSLS     R0,R0,#+2
   \   00000224   0xE015             B.N      ??chk_mounted_26
   2117          	} else {
   2118          		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   \                     ??chk_mounted_24:
   \   00000226   0x8921             LDRH     R1,[R4, #+8]
   \   00000228   0x2900             CMP      R1,#+0
   \   0000022A   0xD101             BNE.N    ??chk_mounted_27
   \   0000022C   0x200D             MOVS     R0,#+13
   \   0000022E   0xE08F             B.N      ??chk_mounted_3
   2119          		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   \                     ??chk_mounted_27:
   \   00000230   0x6A21             LDR      R1,[R4, #+32]
   \   00000232   0x1840             ADDS     R0,R0,R1
   \   00000234   0x6260             STR      R0,[R4, #+36]
   2120          		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2121          			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   \   00000236   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000238   0x2E02             CMP      R6,#+2
   \   0000023A   0xD102             BNE.N    ??chk_mounted_28
   \   0000023C   0x69A0             LDR      R0,[R4, #+24]
   \   0000023E   0x0040             LSLS     R0,R0,#+1
   \   00000240   0xE007             B.N      ??chk_mounted_26
   \                     ??chk_mounted_28:
   \   00000242   0x69A0             LDR      R0,[R4, #+24]
   \   00000244   0x2103             MOVS     R1,#+3
   \   00000246   0x4348             MULS     R0,R1,R0
   \   00000248   0x7E21             LDRB     R1,[R4, #+24]
   \   0000024A   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   0000024E   0xEB11 0x0050      ADDS     R0,R1,R0, LSR #+1
   2122          	}
   2123          	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   \                     ??chk_mounted_26:
   \   00000252   0x69E1             LDR      R1,[R4, #+28]
   \   00000254   0xF200 0x10FF      ADDW     R0,R0,#+511
   \   00000258   0xEBB1 0x2F50      CMP      R1,R0, LSR #+9
   \   0000025C   0xD201             BCS.N    ??chk_mounted_29
   2124          		return FR_NO_FILESYSTEM;
   \   0000025E   0x200D             MOVS     R0,#+13
   \   00000260   0xE076             B.N      ??chk_mounted_3
   2125          
   2126          #if !_FS_READONLY
   2127          	/* Initialize cluster allocation information */
   2128          	fs->free_clust = 0xFFFFFFFF;
   \                     ??chk_mounted_29:
   \   00000262   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000266   0x6120             STR      R0,[R4, #+16]
   2129          	fs->last_clust = 0;
   \   00000268   0x2000             MOVS     R0,#+0
   \   0000026A   0x60E0             STR      R0,[R4, #+12]
   2130          
   2131          	/* Get fsinfo if available */
   2132          	if (fmt == FS_FAT32) {
   \   0000026C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000026E   0x2E03             CMP      R6,#+3
   \   00000270   0xD160             BNE.N    ??chk_mounted_30
   2133          	 	fs->fsi_flag = 0;
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x7160             STRB     R0,[R4, #+5]
   2134          		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   \   00000276   0xF894 0x0061      LDRB     R0,[R4, #+97]
   \   0000027A   0xF894 0x1060      LDRB     R1,[R4, #+96]
   \   0000027E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000282   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000284   0x1940             ADDS     R0,R0,R5
   \   00000286   0x6160             STR      R0,[R4, #+20]
   2135          		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2136          			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2137          			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2138          			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   \   00000288   0x2301             MOVS     R3,#+1
   \   0000028A   0x6962             LDR      R2,[R4, #+20]
   \   0000028C   0xF114 0x0130      ADDS     R1,R4,#+48
   \   00000290   0x7860             LDRB     R0,[R4, #+1]
   \   00000292   0x.... 0x....      BL       disk_read
   \   00000296   0x2800             CMP      R0,#+0
   \   00000298   0xD14C             BNE.N    ??chk_mounted_30
   \   0000029A   0xF894 0x022F      LDRB     R0,[R4, #+559]
   \   0000029E   0xF894 0x122E      LDRB     R1,[R4, #+558]
   \   000002A2   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000002A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002A8   0xF64A 0x2155      MOVW     R1,#+43605
   \   000002AC   0x4288             CMP      R0,R1
   \   000002AE   0xD141             BNE.N    ??chk_mounted_30
   \   000002B0   0xF894 0x0033      LDRB     R0,[R4, #+51]
   \   000002B4   0xF894 0x1032      LDRB     R1,[R4, #+50]
   \   000002B8   0x0409             LSLS     R1,R1,#+16
   \   000002BA   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   000002BE   0xF894 0x1031      LDRB     R1,[R4, #+49]
   \   000002C2   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000002C6   0xF894 0x1030      LDRB     R1,[R4, #+48]
   \   000002CA   0x4308             ORRS     R0,R1,R0
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable11  ;; 0x41615252
   \   000002D0   0x4288             CMP      R0,R1
   \   000002D2   0xD12F             BNE.N    ??chk_mounted_30
   \   000002D4   0xF894 0x0217      LDRB     R0,[R4, #+535]
   \   000002D8   0xF894 0x1216      LDRB     R1,[R4, #+534]
   \   000002DC   0x0409             LSLS     R1,R1,#+16
   \   000002DE   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   000002E2   0xF894 0x1215      LDRB     R1,[R4, #+533]
   \   000002E6   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000002EA   0xF894 0x1214      LDRB     R1,[R4, #+532]
   \   000002EE   0x4308             ORRS     R0,R1,R0
   \   000002F0   0x.... 0x....      LDR.W    R1,??DataTable11_1  ;; 0x61417272
   \   000002F4   0x4288             CMP      R0,R1
   \   000002F6   0xD11D             BNE.N    ??chk_mounted_30
   2139          				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   \   000002F8   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000002FC   0xF894 0x121E      LDRB     R1,[R4, #+542]
   \   00000300   0x0409             LSLS     R1,R1,#+16
   \   00000302   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000306   0xF894 0x121D      LDRB     R1,[R4, #+541]
   \   0000030A   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000030E   0xF894 0x121C      LDRB     R1,[R4, #+540]
   \   00000312   0x4308             ORRS     R0,R1,R0
   \   00000314   0x60E0             STR      R0,[R4, #+12]
   2140          				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   \   00000316   0xF894 0x021B      LDRB     R0,[R4, #+539]
   \   0000031A   0xF894 0x121A      LDRB     R1,[R4, #+538]
   \   0000031E   0x0409             LSLS     R1,R1,#+16
   \   00000320   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000324   0xF894 0x1219      LDRB     R1,[R4, #+537]
   \   00000328   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000032C   0xF894 0x1218      LDRB     R1,[R4, #+536]
   \   00000330   0x4308             ORRS     R0,R1,R0
   \   00000332   0x6120             STR      R0,[R4, #+16]
   2141          		}
   2142          	}
   2143          #endif
   2144          	fs->fs_type = fmt;		/* FAT sub-type */
   \                     ??chk_mounted_30:
   \   00000334   0x7026             STRB     R6,[R4, #+0]
   2145          	fs->id = ++Fsid;		/* File system mount ID */
   \   00000336   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000033A   0x8800             LDRH     R0,[R0, #+0]
   \   0000033C   0x1C40             ADDS     R0,R0,#+1
   \   0000033E   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000342   0x8008             STRH     R0,[R1, #+0]
   \   00000344   0x80E0             STRH     R0,[R4, #+6]
   2146          	fs->winsect = 0;		/* Invalidate sector cache */
   \   00000346   0x2000             MOVS     R0,#+0
   \   00000348   0x62E0             STR      R0,[R4, #+44]
   2147          	fs->wflag = 0;
   \   0000034A   0x2000             MOVS     R0,#+0
   \   0000034C   0x7120             STRB     R0,[R4, #+4]
   2148          #if _FS_RPATH
   2149          	fs->cdir = 0;			/* Current directory (root dir) */
   2150          #endif
   2151          #if _FS_SHARE				/* Clear file lock semaphores */
   2152          	clear_lock(fs);
   2153          #endif
   2154          
   2155          	return FR_OK;
   \   0000034E   0x2000             MOVS     R0,#+0
   \                     ??chk_mounted_3:
   \   00000350   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2156          }
   2157          
   2158          
   2159          
   2160          
   2161          /*-----------------------------------------------------------------------*/
   2162          /* Check if the file/dir object is valid or not                          */
   2163          /*-----------------------------------------------------------------------*/
   2164          

   \                                 In section .text, align 2, keep-with-next
   2165          static
   2166          FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   2167          	FATFS *fs,		/* Pointer to the file system object */
   2168          	WORD id			/* Member id of the target object to be checked */
   2169          )
   2170          {
   \                     validate:
   \   00000000   0xB580             PUSH     {R7,LR}
   2171          	if (!fs || !fs->fs_type || fs->id != id)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD006             BEQ.N    ??validate_0
   \   00000006   0x7802             LDRB     R2,[R0, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD003             BEQ.N    ??validate_0
   \   0000000C   0x88C2             LDRH     R2,[R0, #+6]
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x428A             CMP      R2,R1
   \   00000012   0xD001             BEQ.N    ??validate_1
   2172          		return FR_INVALID_OBJECT;
   \                     ??validate_0:
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0xE007             B.N      ??validate_2
   2173          
   2174          	ENTER_FF(fs);		/* Lock file system */
   2175          
   2176          	if (disk_status(fs->drv) & STA_NOINIT)
   \                     ??validate_1:
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0x.... 0x....      BL       disk_status
   \   0000001E   0x07C0             LSLS     R0,R0,#+31
   \   00000020   0xD501             BPL.N    ??validate_3
   2177          		return FR_NOT_READY;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0xE000             B.N      ??validate_2
   2178          
   2179          	return FR_OK;
   \                     ??validate_3:
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??validate_2:
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
   2180          }
   2181          
   2182          
   2183          
   2184          
   2185          /*--------------------------------------------------------------------------
   2186          
   2187             Public Functions
   2188          
   2189          --------------------------------------------------------------------------*/
   2190          
   2191          
   2192          
   2193          /*-----------------------------------------------------------------------*/
   2194          /* Mount/Unmount a Logical Drive                                         */
   2195          /*-----------------------------------------------------------------------*/
   2196          

   \                                 In section .text, align 2, keep-with-next
   2197          FRESULT f_mount (
   2198          	BYTE vol,		/* Logical drive number to be mounted/unmounted */
   2199          	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
   2200          )
   2201          {
   2202          	FATFS *rfs;
   2203          
   2204          
   2205          	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
   \                     f_mount:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2802             CMP      R0,#+2
   \   00000004   0xDB01             BLT.N    ??f_mount_0
   2206          		return FR_INVALID_DRIVE;
   \   00000006   0x200B             MOVS     R0,#+11
   \   00000008   0xE012             B.N      ??f_mount_1
   2207          	rfs = FatFs[vol];				/* Get current fs object */
   \                     ??f_mount_0:
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable10_1
   \   00000010   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   2208          
   2209          	if (rfs) {
   \   00000014   0x2A00             CMP      R2,#+0
   \   00000016   0xD001             BEQ.N    ??f_mount_2
   2210          #if _FS_SHARE
   2211          		clear_lock(rfs);
   2212          #endif
   2213          #if _FS_REENTRANT					/* Discard sync object of the current volume */
   2214          		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
   2215          #endif
   2216          		rfs->fs_type = 0;			/* Clear old fs object */
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x7013             STRB     R3,[R2, #+0]
   2217          	}
   2218          
   2219          	if (fs) {
   \                     ??f_mount_2:
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD001             BEQ.N    ??f_mount_3
   2220          		fs->fs_type = 0;			/* Clear new fs object */
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x700A             STRB     R2,[R1, #+0]
   2221          #if _FS_REENTRANT					/* Create sync object for the new volume */
   2222          		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
   2223          #endif
   2224          	}
   2225          	FatFs[vol] = fs;				/* Register new fs object */
   \                     ??f_mount_3:
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable10_1
   \   0000002A   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   2226          
   2227          	return FR_OK;
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??f_mount_1:
   \   00000030   0x4770             BX       LR               ;; return
   2228          }
   2229          
   2230          
   2231          
   2232          
   2233          /*-----------------------------------------------------------------------*/
   2234          /* Open or Create a File                                                 */
   2235          /*-----------------------------------------------------------------------*/
   2236          

   \                                 In section .text, align 2, keep-with-next
   2237          FRESULT f_open (
   2238          	FIL *fp,			/* Pointer to the blank file object */
   2239          	const TCHAR *path,	/* Pointer to the file name */
   2240          	BYTE mode			/* Access mode and file open mode flags */
   2241          )
   2242          {
   \                     f_open:
   \   00000000   0xE92D 0x43F2      PUSH     {R1,R4-R9,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
   2243          	FRESULT res;
   2244          	DIR dj;
   2245          	BYTE *dir;
   2246          	DEF_NAMEBUF;
   2247          
   2248          
   2249          	fp->fs = 0;			/* Clear file object */
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6020             STR      R0,[R4, #+0]
   2250          
   2251          #if !_FS_READONLY
   2252          	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   \   0000000E   0xF015 0x051F      ANDS     R5,R5,#0x1F
   2253          	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   \   00000012   0xF015 0x02FE      ANDS     R2,R5,#0xFE
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0xA80C             ADD      R0,SP,#+48
   \   0000001A   0x.... 0x....      BL       chk_mounted
   \   0000001E   0x0006             MOVS     R6,R0
   2254          #else
   2255          	mode &= FA_READ;
   2256          	res = chk_mounted(&path, &dj.fs, 0);
   2257          #endif
   2258          	INIT_BUF(dj);
   \   00000020   0xA809             ADD      R0,SP,#+36
   \   00000022   0x9006             STR      R0,[SP, #+24]
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000028   0x9007             STR      R0,[SP, #+28]
   2259          	if (res == FR_OK)
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD104             BNE.N    ??f_open_0
   2260          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000030   0x990C             LDR      R1,[SP, #+48]
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       follow_path
   \   00000038   0x0006             MOVS     R6,R0
   2261          	dir = dj.dir;
   \                     ??f_open_0:
   \   0000003A   0x9F05             LDR      R7,[SP, #+20]
   2262          
   2263          #if !_FS_READONLY	/* R/W configuration */
   2264          	if (res == FR_OK) {
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x2E00             CMP      R6,#+0
   \   00000040   0xD102             BNE.N    ??f_open_1
   2265          		if (!dir)	/* Current dir itself */
   \   00000042   0x2F00             CMP      R7,#+0
   \   00000044   0xD100             BNE.N    ??f_open_1
   2266          			res = FR_INVALID_NAME;
   \   00000046   0x2606             MOVS     R6,#+6
   2267          #if _FS_SHARE
   2268          		else
   2269          			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   2270          #endif
   2271          	}
   2272          	/* Create or Open a file */
   2273          	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   \                     ??f_open_1:
   \   00000048   0x201C             MOVS     R0,#+28
   \   0000004A   0x4205             TST      R5,R0
   \   0000004C   0xD063             BEQ.N    ??f_open_2
   2274          		DWORD dw, cl;
   2275          
   2276          		if (res != FR_OK) {					/* No file, create new */
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD00A             BEQ.N    ??f_open_3
   2277          			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E04             CMP      R6,#+4
   \   00000058   0xD103             BNE.N    ??f_open_4
   2278          #if _FS_SHARE
   2279          				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
   2280          #else
   2281          				res = dir_register(&dj);
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       dir_register
   \   00000060   0x0006             MOVS     R6,R0
   2282          #endif
   2283          			mode |= FA_CREATE_ALWAYS;		/* File is created */
   \                     ??f_open_4:
   \   00000062   0xF055 0x0508      ORRS     R5,R5,#0x8
   2284          			dir = dj.dir;					/* New entry */
   \   00000066   0x9F05             LDR      R7,[SP, #+20]
   \   00000068   0xE008             B.N      ??f_open_5
   2285          		}
   2286          		else {								/* Any object is already existing */
   2287          			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   \                     ??f_open_3:
   \   0000006A   0x7AF8             LDRB     R0,[R7, #+11]
   \   0000006C   0x2111             MOVS     R1,#+17
   \   0000006E   0x4208             TST      R0,R1
   \   00000070   0xD001             BEQ.N    ??f_open_6
   2288          				res = FR_DENIED;
   \   00000072   0x2607             MOVS     R6,#+7
   \   00000074   0xE002             B.N      ??f_open_5
   2289          			} else {
   2290          				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   \                     ??f_open_6:
   \   00000076   0x0768             LSLS     R0,R5,#+29
   \   00000078   0xD500             BPL.N    ??f_open_5
   2291          					res = FR_EXIST;
   \   0000007A   0x2608             MOVS     R6,#+8
   2292          			}
   2293          		}
   2294          		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   \                     ??f_open_5:
   \   0000007C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD157             BNE.N    ??f_open_7
   \   00000082   0x0728             LSLS     R0,R5,#+28
   \   00000084   0xD555             BPL.N    ??f_open_7
   2295          			dw = get_fattime();					/* Created time */
   \   00000086   0x.... 0x....      BL       get_fattime
   \   0000008A   0x4680             MOV      R8,R0
   2296          			ST_DWORD(dir+DIR_CrtTime, dw);
   \   0000008C   0xF887 0x800E      STRB     R8,[R7, #+14]
   \   00000090   0x4640             MOV      R0,R8
   \   00000092   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000094   0x0A00             LSRS     R0,R0,#+8
   \   00000096   0x73F8             STRB     R0,[R7, #+15]
   \   00000098   0xEA5F 0x4018      LSRS     R0,R8,#+16
   \   0000009C   0x7438             STRB     R0,[R7, #+16]
   \   0000009E   0xEA5F 0x6018      LSRS     R0,R8,#+24
   \   000000A2   0x7478             STRB     R0,[R7, #+17]
   2297          			dir[DIR_Attr] = 0;					/* Reset attribute */
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x72F8             STRB     R0,[R7, #+11]
   2298          			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x7738             STRB     R0,[R7, #+28]
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x7778             STRB     R0,[R7, #+29]
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x77B8             STRB     R0,[R7, #+30]
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x77F8             STRB     R0,[R7, #+31]
   2299          			cl = LD_CLUST(dir);					/* Get start cluster */
   \   000000B8   0x7D78             LDRB     R0,[R7, #+21]
   \   000000BA   0x7D39             LDRB     R1,[R7, #+20]
   \   000000BC   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000C0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C2   0x7EF9             LDRB     R1,[R7, #+27]
   \   000000C4   0x7EBA             LDRB     R2,[R7, #+26]
   \   000000C6   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   000000CA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CC   0xEA51 0x4900      ORRS     R9,R1,R0, LSL #+16
   2300          			ST_CLUST(dir, 0);					/* cluster = 0 */
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x76B8             STRB     R0,[R7, #+26]
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x76F8             STRB     R0,[R7, #+27]
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x7538             STRB     R0,[R7, #+20]
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x7578             STRB     R0,[R7, #+21]
   2301          			dj.fs->wflag = 1;
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0x7101             STRB     R1,[R0, #+4]
   2302          			if (cl) {							/* Remove the cluster chain if exist */
   \   000000E6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000EA   0xD022             BEQ.N    ??f_open_7
   2303          				dw = dj.fs->winsect;
   \   000000EC   0x9800             LDR      R0,[SP, #+0]
   \   000000EE   0xF8D0 0x802C      LDR      R8,[R0, #+44]
   2304          				res = remove_chain(dj.fs, cl);
   \   000000F2   0x4649             MOV      R1,R9
   \   000000F4   0x9800             LDR      R0,[SP, #+0]
   \   000000F6   0x.... 0x....      BL       remove_chain
   \   000000FA   0x0006             MOVS     R6,R0
   2305          				if (res == FR_OK) {
   \   000000FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000FE   0x2E00             CMP      R6,#+0
   \   00000100   0xD117             BNE.N    ??f_open_7
   2306          					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   \   00000102   0x9800             LDR      R0,[SP, #+0]
   \   00000104   0xF1B9 0x0101      SUBS     R1,R9,#+1
   \   00000108   0x60C1             STR      R1,[R0, #+12]
   2307          					res = move_window(dj.fs, dw);
   \   0000010A   0x4641             MOV      R1,R8
   \   0000010C   0x9800             LDR      R0,[SP, #+0]
   \   0000010E   0x.... 0x....      BL       move_window
   \   00000112   0x0006             MOVS     R6,R0
   \   00000114   0xE00D             B.N      ??f_open_7
   2308          				}
   2309          			}
   2310          		}
   2311          	}
   2312          	else {	/* Open an existing file */
   2313          		if (res == FR_OK) {						/* Follow succeeded */
   \                     ??f_open_2:
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E00             CMP      R6,#+0
   \   0000011A   0xD10A             BNE.N    ??f_open_7
   2314          			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   \   0000011C   0x7AF8             LDRB     R0,[R7, #+11]
   \   0000011E   0x06C0             LSLS     R0,R0,#+27
   \   00000120   0xD501             BPL.N    ??f_open_8
   2315          				res = FR_NO_FILE;
   \   00000122   0x2604             MOVS     R6,#+4
   \   00000124   0xE005             B.N      ??f_open_7
   2316          			} else {
   2317          				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   \                     ??f_open_8:
   \   00000126   0x07A8             LSLS     R0,R5,#+30
   \   00000128   0xD503             BPL.N    ??f_open_7
   \   0000012A   0x7AF8             LDRB     R0,[R7, #+11]
   \   0000012C   0x07C0             LSLS     R0,R0,#+31
   \   0000012E   0xD500             BPL.N    ??f_open_7
   2318          					res = FR_DENIED;
   \   00000130   0x2607             MOVS     R6,#+7
   2319          			}
   2320          		}
   2321          	}
   2322          	if (res == FR_OK) {
   \                     ??f_open_7:
   \   00000132   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000134   0x2E00             CMP      R6,#+0
   \   00000136   0xD107             BNE.N    ??f_open_9
   2323          		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   \   00000138   0x0728             LSLS     R0,R5,#+28
   \   0000013A   0xD501             BPL.N    ??f_open_10
   2324          			mode |= FA__WRITTEN;
   \   0000013C   0xF055 0x0520      ORRS     R5,R5,#0x20
   2325          		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   \                     ??f_open_10:
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x6AC0             LDR      R0,[R0, #+44]
   \   00000144   0x61E0             STR      R0,[R4, #+28]
   2326          		fp->dir_ptr = dir;
   \   00000146   0x6227             STR      R7,[R4, #+32]
   2327          #if _FS_SHARE
   2328          		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   2329          		if (!fp->lockid) res = FR_INT_ERR;
   2330          #endif
   2331          	}
   2332          
   2333          #else				/* R/O configuration */
   2334          	if (res == FR_OK) {					/* Follow succeeded */
   2335          		if (!dir) {						/* Current dir itself */
   2336          			res = FR_INVALID_NAME;
   2337          		} else {
   2338          			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
   2339          				res = FR_NO_FILE;
   2340          		}
   2341          	}
   2342          #endif
   2343          	FREE_BUF();
   2344          
   2345          	if (res == FR_OK) {
   \                     ??f_open_9:
   \   00000148   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014A   0x2E00             CMP      R6,#+0
   \   0000014C   0xD121             BNE.N    ??f_open_11
   2346          		fp->flag = mode;					/* File access mode */
   \   0000014E   0x71A5             STRB     R5,[R4, #+6]
   2347          		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   \   00000150   0x7D78             LDRB     R0,[R7, #+21]
   \   00000152   0x7D39             LDRB     R1,[R7, #+20]
   \   00000154   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000158   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015A   0x7EF9             LDRB     R1,[R7, #+27]
   \   0000015C   0x7EBA             LDRB     R2,[R7, #+26]
   \   0000015E   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000162   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000164   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   00000168   0x6120             STR      R0,[R4, #+16]
   2348          		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   \   0000016A   0x7FF8             LDRB     R0,[R7, #+31]
   \   0000016C   0x7FB9             LDRB     R1,[R7, #+30]
   \   0000016E   0x0409             LSLS     R1,R1,#+16
   \   00000170   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000174   0x7F79             LDRB     R1,[R7, #+29]
   \   00000176   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000017A   0x7F39             LDRB     R1,[R7, #+28]
   \   0000017C   0x4308             ORRS     R0,R1,R0
   \   0000017E   0x60E0             STR      R0,[R4, #+12]
   2349          		fp->fptr = 0;						/* File pointer */
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0x60A0             STR      R0,[R4, #+8]
   2350          		fp->dsect = 0;
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0x61A0             STR      R0,[R4, #+24]
   2351          #if _USE_FASTSEEK
   2352          		fp->cltbl = 0;						/* Normal seek mode */
   2353          #endif
   2354          		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   \   00000188   0x9800             LDR      R0,[SP, #+0]
   \   0000018A   0x6020             STR      R0,[R4, #+0]
   \   0000018C   0x9800             LDR      R0,[SP, #+0]
   \   0000018E   0x88C0             LDRH     R0,[R0, #+6]
   \   00000190   0x80A0             STRH     R0,[R4, #+4]
   2355          	}
   2356          
   2357          	LEAVE_FF(dj.fs, res);
   \                     ??f_open_11:
   \   00000192   0x0030             MOVS     R0,R6
   \   00000194   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000196   0xB00D             ADD      SP,SP,#+52
   \   00000198   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2358          }
   2359          
   2360          
   2361          
   2362          
   2363          /*-----------------------------------------------------------------------*/
   2364          /* Read File                                                             */
   2365          /*-----------------------------------------------------------------------*/
   2366          

   \                                 In section .text, align 2, keep-with-next
   2367          FRESULT f_read (
   2368          	FIL *fp, 		/* Pointer to the file object */
   2369          	void *buff,		/* Pointer to data buffer */
   2370          	UINT btr,		/* Number of bytes to read */
   2371          	UINT *br		/* Pointer to number of bytes read */
   2372          )
   2373          {
   \                     f_read:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
   2374          	FRESULT res;
   2375          	DWORD clst, sect, remain;
   2376          	UINT rcnt, cc;
   2377          	BYTE csect, *rbuff = buff;
   \   0000000A   0x000C             MOVS     R4,R1
   2378          
   2379          
   2380          	*br = 0;	/* Initialize byte counter */
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6038             STR      R0,[R7, #+0]
   2381          
   2382          	res = validate(fp->fs, fp->id);				/* Check validity */
   \   00000010   0x88A9             LDRH     R1,[R5, #+4]
   \   00000012   0x6828             LDR      R0,[R5, #+0]
   \   00000014   0x.... 0x....      BL       validate
   2383          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD001             BEQ.N    ??f_read_0
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xE0E7             B.N      ??f_read_1
   2384          	if (fp->flag & FA__ERROR)					/* Aborted file? */
   \                     ??f_read_0:
   \   00000022   0x79A8             LDRB     R0,[R5, #+6]
   \   00000024   0x0600             LSLS     R0,R0,#+24
   \   00000026   0xD501             BPL.N    ??f_read_2
   2385          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xE0E2             B.N      ??f_read_1
   2386          	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   \                     ??f_read_2:
   \   0000002C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000002E   0x07C0             LSLS     R0,R0,#+31
   \   00000030   0xD401             BMI.N    ??f_read_3
   2387          		LEAVE_FF(fp->fs, FR_DENIED);
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0xE0DD             B.N      ??f_read_1
   2388          	remain = fp->fsize - fp->fptr;
   \                     ??f_read_3:
   \   00000036   0x68E8             LDR      R0,[R5, #+12]
   \   00000038   0x68A9             LDR      R1,[R5, #+8]
   \   0000003A   0x1A40             SUBS     R0,R0,R1
   2389          	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   \   0000003C   0x42B0             CMP      R0,R6
   \   0000003E   0xD229             BCS.N    ??f_read_4
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0xE027             B.N      ??f_read_4
   2390          
   2391          	for ( ;  btr;								/* Repeat until all data read */
   2392          		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   2393          		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   2394          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2395          			if (!csect) {						/* On the cluster boundary? */
   2396          				if (fp->fptr == 0) {			/* On the top of the file? */
   2397          					clst = fp->sclust;			/* Follow from the origin */
   2398          				} else {						/* Middle or end of the file */
   2399          #if _USE_FASTSEEK
   2400          					if (fp->cltbl)
   2401          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2402          					else
   2403          #endif
   2404          						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   2405          				}
   2406          				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   2407          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2408          				fp->clust = clst;				/* Update current cluster */
   2409          			}
   2410          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2411          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2412          			sect += csect;
   2413          			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   2414          			if (cc) {							/* Read maximum contiguous sectors directly */
   2415          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2416          					cc = fp->fs->csize - csect;
   2417          				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   2418          					ABORT(fp->fs, FR_DISK_ERR);
   2419          #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
   2420          #if _FS_TINY
   2421          				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   2422          					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   2423          #else
   2424          				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
   2425          					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   2426          #endif
   2427          #endif
   2428          				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   2429          				continue;
   2430          			}
   2431          #if !_FS_TINY
   2432          			if (fp->dsect != sect) {			/* Load data sector if not in cache */
   2433          #if !_FS_READONLY
   2434          				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   2435          					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2436          						ABORT(fp->fs, FR_DISK_ERR);
   2437          					fp->flag &= ~FA__DIRTY;
   2438          				}
   2439          #endif
   2440          				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
   2441          					ABORT(fp->fs, FR_DISK_ERR);
   2442          			}
   2443          #endif
   2444          			fp->dsect = sect;
   \                     ??f_read_5:
   \   00000044   0xF8C5 0x9018      STR      R9,[R5, #+24]
   2445          		}
   2446          		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   \                     ??f_read_6:
   \   00000048   0x68A8             LDR      R0,[R5, #+8]
   \   0000004A   0xF44F 0x7100      MOV      R1,#+512
   \   0000004E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000052   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000056   0xF5D2 0x7800      RSBS     R8,R2,#+512
   2447          		if (rcnt > btr) rcnt = btr;
   \   0000005A   0x4546             CMP      R6,R8
   \   0000005C   0xD200             BCS.N    ??f_read_7
   \   0000005E   0x46B0             MOV      R8,R6
   2448          #if _FS_TINY
   2449          		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   2450          			ABORT(fp->fs, FR_DISK_ERR);
   2451          		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   2452          #else
   2453          		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   \                     ??f_read_7:
   \   00000060   0x4642             MOV      R2,R8
   \   00000062   0x68A8             LDR      R0,[R5, #+8]
   \   00000064   0xF44F 0x7100      MOV      R1,#+512
   \   00000068   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   0000006C   0xFB03 0x0311      MLS      R3,R3,R1,R0
   \   00000070   0x1958             ADDS     R0,R3,R5
   \   00000072   0xF110 0x0124      ADDS     R1,R0,#+36
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       mem_cpy
   \                     ??f_read_8:
   \   0000007C   0xEB18 0x0404      ADDS     R4,R8,R4
   \   00000080   0x68A8             LDR      R0,[R5, #+8]
   \   00000082   0xEB18 0x0000      ADDS     R0,R8,R0
   \   00000086   0x60A8             STR      R0,[R5, #+8]
   \   00000088   0x6838             LDR      R0,[R7, #+0]
   \   0000008A   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000008E   0x6038             STR      R0,[R7, #+0]
   \   00000090   0xEBB6 0x0608      SUBS     R6,R6,R8
   \                     ??f_read_4:
   \   00000094   0x2E00             CMP      R6,#+0
   \   00000096   0xF000 0x80AB      BEQ.W    ??f_read_9
   \   0000009A   0x68A8             LDR      R0,[R5, #+8]
   \   0000009C   0xF44F 0x7100      MOV      R1,#+512
   \   000000A0   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000A4   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A8   0x2A00             CMP      R2,#+0
   \   000000AA   0xD1CD             BNE.N    ??f_read_6
   \   000000AC   0x68A8             LDR      R0,[R5, #+8]
   \   000000AE   0x0A40             LSRS     R0,R0,#+9
   \   000000B0   0x6829             LDR      R1,[R5, #+0]
   \   000000B2   0x7889             LDRB     R1,[R1, #+2]
   \   000000B4   0x1E49             SUBS     R1,R1,#+1
   \   000000B6   0xEA11 0x0800      ANDS     R8,R1,R0
   \   000000BA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000BE   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000C2   0xD11A             BNE.N    ??f_read_10
   \   000000C4   0x68A8             LDR      R0,[R5, #+8]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD101             BNE.N    ??f_read_11
   \   000000CA   0x6928             LDR      R0,[R5, #+16]
   \   000000CC   0xE003             B.N      ??f_read_12
   \                     ??f_read_11:
   \   000000CE   0x6969             LDR      R1,[R5, #+20]
   \   000000D0   0x6828             LDR      R0,[R5, #+0]
   \   000000D2   0x.... 0x....      BL       get_fat
   \                     ??f_read_12:
   \   000000D6   0x2802             CMP      R0,#+2
   \   000000D8   0xD205             BCS.N    ??f_read_13
   \   000000DA   0x79A8             LDRB     R0,[R5, #+6]
   \   000000DC   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000E0   0x71A8             STRB     R0,[R5, #+6]
   \   000000E2   0x2002             MOVS     R0,#+2
   \   000000E4   0xE085             B.N      ??f_read_1
   \                     ??f_read_13:
   \   000000E6   0xF110 0x0F01      CMN      R0,#+1
   \   000000EA   0xD105             BNE.N    ??f_read_14
   \   000000EC   0x79A8             LDRB     R0,[R5, #+6]
   \   000000EE   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000F2   0x71A8             STRB     R0,[R5, #+6]
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xE07C             B.N      ??f_read_1
   \                     ??f_read_14:
   \   000000F8   0x6168             STR      R0,[R5, #+20]
   \                     ??f_read_10:
   \   000000FA   0x6969             LDR      R1,[R5, #+20]
   \   000000FC   0x6828             LDR      R0,[R5, #+0]
   \   000000FE   0x.... 0x....      BL       clust2sect
   \   00000102   0x4681             MOV      R9,R0
   \   00000104   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000108   0xD105             BNE.N    ??f_read_15
   \   0000010A   0x79A8             LDRB     R0,[R5, #+6]
   \   0000010C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000110   0x71A8             STRB     R0,[R5, #+6]
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0xE06D             B.N      ??f_read_1
   \                     ??f_read_15:
   \   00000116   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000011A   0xEB18 0x0909      ADDS     R9,R8,R9
   \   0000011E   0xEA5F 0x2A56      LSRS     R10,R6,#+9
   \   00000122   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000126   0xD037             BEQ.N    ??f_read_16
   \   00000128   0x6828             LDR      R0,[R5, #+0]
   \   0000012A   0x7880             LDRB     R0,[R0, #+2]
   \   0000012C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000130   0xEB1A 0x0108      ADDS     R1,R10,R8
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xD205             BCS.N    ??f_read_17
   \   00000138   0x6828             LDR      R0,[R5, #+0]
   \   0000013A   0x7880             LDRB     R0,[R0, #+2]
   \   0000013C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000140   0xEBB0 0x0A08      SUBS     R10,R0,R8
   \                     ??f_read_17:
   \   00000144   0x4653             MOV      R3,R10
   \   00000146   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000148   0x464A             MOV      R2,R9
   \   0000014A   0x0021             MOVS     R1,R4
   \   0000014C   0x6828             LDR      R0,[R5, #+0]
   \   0000014E   0x7840             LDRB     R0,[R0, #+1]
   \   00000150   0x.... 0x....      BL       disk_read
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD005             BEQ.N    ??f_read_18
   \   00000158   0x79A8             LDRB     R0,[R5, #+6]
   \   0000015A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000015E   0x71A8             STRB     R0,[R5, #+6]
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0xE046             B.N      ??f_read_1
   \                     ??f_read_18:
   \   00000164   0x79A8             LDRB     R0,[R5, #+6]
   \   00000166   0x0640             LSLS     R0,R0,#+25
   \   00000168   0xD511             BPL.N    ??f_read_19
   \   0000016A   0x69A8             LDR      R0,[R5, #+24]
   \   0000016C   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   00000170   0x4550             CMP      R0,R10
   \   00000172   0xD20C             BCS.N    ??f_read_19
   \   00000174   0xF44F 0x7200      MOV      R2,#+512
   \   00000178   0xF115 0x0124      ADDS     R1,R5,#+36
   \   0000017C   0x69A8             LDR      R0,[R5, #+24]
   \   0000017E   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   00000182   0xF44F 0x7300      MOV      R3,#+512
   \   00000186   0xFB03 0x4000      MLA      R0,R3,R0,R4
   \   0000018A   0x.... 0x....      BL       mem_cpy
   \                     ??f_read_19:
   \   0000018E   0xF44F 0x7000      MOV      R0,#+512
   \   00000192   0xFB00 0xF80A      MUL      R8,R0,R10
   \   00000196   0xE771             B.N      ??f_read_8
   \                     ??f_read_16:
   \   00000198   0x69A8             LDR      R0,[R5, #+24]
   \   0000019A   0x4548             CMP      R0,R9
   \   0000019C   0xF43F 0xAF52      BEQ.W    ??f_read_5
   \   000001A0   0x79A8             LDRB     R0,[R5, #+6]
   \   000001A2   0x0640             LSLS     R0,R0,#+25
   \   000001A4   0xD513             BPL.N    ??f_read_20
   \   000001A6   0x2301             MOVS     R3,#+1
   \   000001A8   0x69AA             LDR      R2,[R5, #+24]
   \   000001AA   0xF115 0x0124      ADDS     R1,R5,#+36
   \   000001AE   0x6828             LDR      R0,[R5, #+0]
   \   000001B0   0x7840             LDRB     R0,[R0, #+1]
   \   000001B2   0x.... 0x....      BL       disk_write
   \   000001B6   0x2800             CMP      R0,#+0
   \   000001B8   0xD005             BEQ.N    ??f_read_21
   \   000001BA   0x79A8             LDRB     R0,[R5, #+6]
   \   000001BC   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001C0   0x71A8             STRB     R0,[R5, #+6]
   \   000001C2   0x2001             MOVS     R0,#+1
   \   000001C4   0xE015             B.N      ??f_read_1
   \                     ??f_read_21:
   \   000001C6   0x79A8             LDRB     R0,[R5, #+6]
   \   000001C8   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000001CC   0x71A8             STRB     R0,[R5, #+6]
   \                     ??f_read_20:
   \   000001CE   0x2301             MOVS     R3,#+1
   \   000001D0   0x464A             MOV      R2,R9
   \   000001D2   0xF115 0x0124      ADDS     R1,R5,#+36
   \   000001D6   0x6828             LDR      R0,[R5, #+0]
   \   000001D8   0x7840             LDRB     R0,[R0, #+1]
   \   000001DA   0x.... 0x....      BL       disk_read
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xF43F 0xAF30      BEQ.W    ??f_read_5
   \   000001E4   0x79A8             LDRB     R0,[R5, #+6]
   \   000001E6   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001EA   0x71A8             STRB     R0,[R5, #+6]
   \   000001EC   0x2001             MOVS     R0,#+1
   \   000001EE   0xE000             B.N      ??f_read_1
   2454          #endif
   2455          	}
   2456          
   2457          	LEAVE_FF(fp->fs, FR_OK);
   \                     ??f_read_9:
   \   000001F0   0x2000             MOVS     R0,#+0
   \                     ??f_read_1:
   \   000001F2   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2458          }
   2459          
   2460          
   2461          
   2462          
   2463          #if !_FS_READONLY
   2464          /*-----------------------------------------------------------------------*/
   2465          /* Write File                                                            */
   2466          /*-----------------------------------------------------------------------*/
   2467          

   \                                 In section .text, align 2, keep-with-next
   2468          FRESULT f_write (
   2469          	FIL *fp,			/* Pointer to the file object */
   2470          	const void *buff,	/* Pointer to the data to be written */
   2471          	UINT btw,			/* Number of bytes to write */
   2472          	UINT *bw			/* Pointer to number of bytes written */
   2473          )
   2474          {
   \                     f_write:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
   2475          	FRESULT res;
   2476          	DWORD clst, sect;
   2477          	UINT wcnt, cc;
   2478          	const BYTE *wbuff = buff;
   \   0000000A   0x000C             MOVS     R4,R1
   2479          	BYTE csect;
   2480          
   2481          
   2482          	*bw = 0;	/* Initialize byte counter */
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6038             STR      R0,[R7, #+0]
   2483          
   2484          	res = validate(fp->fs, fp->id);			/* Check validity */
   \   00000010   0x88A9             LDRH     R1,[R5, #+4]
   \   00000012   0x6828             LDR      R0,[R5, #+0]
   \   00000014   0x.... 0x....      BL       validate
   2485          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD001             BEQ.N    ??f_write_0
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xE070             B.N      ??f_write_1
   2486          	if (fp->flag & FA__ERROR)				/* Aborted file? */
   \                     ??f_write_0:
   \   00000022   0x79A8             LDRB     R0,[R5, #+6]
   \   00000024   0x0600             LSLS     R0,R0,#+24
   \   00000026   0xD501             BPL.N    ??f_write_2
   2487          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xE06B             B.N      ??f_write_1
   2488          	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   \                     ??f_write_2:
   \   0000002C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000002E   0x0780             LSLS     R0,R0,#+30
   \   00000030   0xD401             BMI.N    ??f_write_3
   2489          		LEAVE_FF(fp->fs, FR_DENIED);
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0xE066             B.N      ??f_write_1
   2490          	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   \                     ??f_write_3:
   \   00000036   0x68E8             LDR      R0,[R5, #+12]
   \   00000038   0x1830             ADDS     R0,R6,R0
   \   0000003A   0x68E9             LDR      R1,[R5, #+12]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD22D             BCS.N    ??f_write_4
   \   00000040   0x2600             MOVS     R6,#+0
   \   00000042   0xE02B             B.N      ??f_write_4
   2491          
   2492          	for ( ;  btw;							/* Repeat until all data written */
   2493          		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2494          		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2495          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2496          			if (!csect) {					/* On the cluster boundary? */
   2497          				if (fp->fptr == 0) {		/* On the top of the file? */
   2498          					clst = fp->sclust;		/* Follow from the origin */
   2499          					if (clst == 0)			/* When no cluster is allocated, */
   2500          						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2501          				} else {					/* Middle or end of the file */
   2502          #if _USE_FASTSEEK
   2503          					if (fp->cltbl)
   2504          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2505          					else
   2506          #endif
   2507          						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2508          				}
   2509          				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2510          				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2511          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2512          				fp->clust = clst;			/* Update current cluster */
   2513          			}
   2514          #if _FS_TINY
   2515          			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2516          				ABORT(fp->fs, FR_DISK_ERR);
   2517          #else
   2518          			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   2519          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2520          					ABORT(fp->fs, FR_DISK_ERR);
   2521          				fp->flag &= ~FA__DIRTY;
   2522          			}
   2523          #endif
   2524          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2525          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2526          			sect += csect;
   2527          			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2528          			if (cc) {						/* Write maximum contiguous sectors directly */
   2529          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2530          					cc = fp->fs->csize - csect;
   2531          				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2532          					ABORT(fp->fs, FR_DISK_ERR);
   2533          #if _FS_TINY
   2534          				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2535          					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2536          					fp->fs->wflag = 0;
   2537          				}
   2538          #else
   2539          				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   2540          					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   2541          					fp->flag &= ~FA__DIRTY;
   2542          				}
   2543          #endif
   2544          				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2545          				continue;
   2546          			}
   2547          #if _FS_TINY
   2548          			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2549          				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2550          				fp->fs->winsect = sect;
   2551          			}
   2552          #else
   2553          			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   2554          				if (fp->fptr < fp->fsize &&
   2555          					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
   2556          						ABORT(fp->fs, FR_DISK_ERR);
   2557          			}
   2558          #endif
   2559          			fp->dsect = sect;
   \                     ??f_write_5:
   \   00000044   0xF8C5 0x9018      STR      R9,[R5, #+24]
   2560          		}
   2561          		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   \                     ??f_write_6:
   \   00000048   0x68A8             LDR      R0,[R5, #+8]
   \   0000004A   0xF44F 0x7100      MOV      R1,#+512
   \   0000004E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000052   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000056   0xF5D2 0x7800      RSBS     R8,R2,#+512
   2562          		if (wcnt > btw) wcnt = btw;
   \   0000005A   0x4546             CMP      R6,R8
   \   0000005C   0xD200             BCS.N    ??f_write_7
   \   0000005E   0x46B0             MOV      R8,R6
   2563          #if _FS_TINY
   2564          		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2565          			ABORT(fp->fs, FR_DISK_ERR);
   2566          		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2567          		fp->fs->wflag = 1;
   2568          #else
   2569          		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   \                     ??f_write_7:
   \   00000060   0x4642             MOV      R2,R8
   \   00000062   0x0021             MOVS     R1,R4
   \   00000064   0x68A8             LDR      R0,[R5, #+8]
   \   00000066   0xF44F 0x7300      MOV      R3,#+512
   \   0000006A   0xFBB0 0xFCF3      UDIV     R12,R0,R3
   \   0000006E   0xFB0C 0x0C13      MLS      R12,R12,R3,R0
   \   00000072   0xEB1C 0x0005      ADDS     R0,R12,R5
   \   00000076   0x3024             ADDS     R0,R0,#+36
   \   00000078   0x.... 0x....      BL       mem_cpy
   2570          		fp->flag |= FA__DIRTY;
   \   0000007C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000007E   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000082   0x71A8             STRB     R0,[R5, #+6]
   \                     ??f_write_8:
   \   00000084   0xEB18 0x0404      ADDS     R4,R8,R4
   \   00000088   0x68A8             LDR      R0,[R5, #+8]
   \   0000008A   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000008E   0x60A8             STR      R0,[R5, #+8]
   \   00000090   0x6838             LDR      R0,[R7, #+0]
   \   00000092   0xEB18 0x0000      ADDS     R0,R8,R0
   \   00000096   0x6038             STR      R0,[R7, #+0]
   \   00000098   0xEBB6 0x0608      SUBS     R6,R6,R8
   \                     ??f_write_4:
   \   0000009C   0x2E00             CMP      R6,#+0
   \   0000009E   0xD026             BEQ.N    ??f_write_9
   \   000000A0   0x68A8             LDR      R0,[R5, #+8]
   \   000000A2   0xF44F 0x7100      MOV      R1,#+512
   \   000000A6   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000AA   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000AE   0x2A00             CMP      R2,#+0
   \   000000B0   0xD1CA             BNE.N    ??f_write_6
   \   000000B2   0x68A8             LDR      R0,[R5, #+8]
   \   000000B4   0x0A40             LSRS     R0,R0,#+9
   \   000000B6   0x6829             LDR      R1,[R5, #+0]
   \   000000B8   0x7889             LDRB     R1,[R1, #+2]
   \   000000BA   0x1E49             SUBS     R1,R1,#+1
   \   000000BC   0xEA11 0x0800      ANDS     R8,R1,R0
   \   000000C0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C4   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000C8   0xD130             BNE.N    ??f_write_10
   \   000000CA   0x68A8             LDR      R0,[R5, #+8]
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD108             BNE.N    ??f_write_11
   \   000000D0   0x6928             LDR      R0,[R5, #+16]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD109             BNE.N    ??f_write_12
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x6828             LDR      R0,[R5, #+0]
   \   000000DA   0x.... 0x....      BL       create_chain
   \   000000DE   0x6128             STR      R0,[R5, #+16]
   \   000000E0   0xE003             B.N      ??f_write_12
   \                     ??f_write_11:
   \   000000E2   0x6969             LDR      R1,[R5, #+20]
   \   000000E4   0x6828             LDR      R0,[R5, #+0]
   \   000000E6   0x.... 0x....      BL       create_chain
   \                     ??f_write_12:
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD10C             BNE.N    ??f_write_13
   2571          #endif
   2572          	}
   2573          
   2574          	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   \                     ??f_write_9:
   \   000000EE   0x68E8             LDR      R0,[R5, #+12]
   \   000000F0   0x68A9             LDR      R1,[R5, #+8]
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xD201             BCS.N    ??f_write_14
   \   000000F6   0x68A8             LDR      R0,[R5, #+8]
   \   000000F8   0x60E8             STR      R0,[R5, #+12]
   2575          	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   \                     ??f_write_14:
   \   000000FA   0x79A8             LDRB     R0,[R5, #+6]
   \   000000FC   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000100   0x71A8             STRB     R0,[R5, #+6]
   2576          
   2577          	LEAVE_FF(fp->fs, FR_OK);
   \   00000102   0x2000             MOVS     R0,#+0
   \                     ??f_write_1:
   \   00000104   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??f_write_13:
   \   00000108   0x2801             CMP      R0,#+1
   \   0000010A   0xD105             BNE.N    ??f_write_15
   \   0000010C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000010E   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000112   0x71A8             STRB     R0,[R5, #+6]
   \   00000114   0x2002             MOVS     R0,#+2
   \   00000116   0xE7F5             B.N      ??f_write_1
   \                     ??f_write_15:
   \   00000118   0xF110 0x0F01      CMN      R0,#+1
   \   0000011C   0xD105             BNE.N    ??f_write_16
   \   0000011E   0x79A8             LDRB     R0,[R5, #+6]
   \   00000120   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000124   0x71A8             STRB     R0,[R5, #+6]
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0xE7EC             B.N      ??f_write_1
   \                     ??f_write_16:
   \   0000012A   0x6168             STR      R0,[R5, #+20]
   \                     ??f_write_10:
   \   0000012C   0x79A8             LDRB     R0,[R5, #+6]
   \   0000012E   0x0640             LSLS     R0,R0,#+25
   \   00000130   0xD513             BPL.N    ??f_write_17
   \   00000132   0x2301             MOVS     R3,#+1
   \   00000134   0x69AA             LDR      R2,[R5, #+24]
   \   00000136   0xF115 0x0124      ADDS     R1,R5,#+36
   \   0000013A   0x6828             LDR      R0,[R5, #+0]
   \   0000013C   0x7840             LDRB     R0,[R0, #+1]
   \   0000013E   0x.... 0x....      BL       disk_write
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD005             BEQ.N    ??f_write_18
   \   00000146   0x79A8             LDRB     R0,[R5, #+6]
   \   00000148   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000014C   0x71A8             STRB     R0,[R5, #+6]
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0xE7D8             B.N      ??f_write_1
   \                     ??f_write_18:
   \   00000152   0x79A8             LDRB     R0,[R5, #+6]
   \   00000154   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000158   0x71A8             STRB     R0,[R5, #+6]
   \                     ??f_write_17:
   \   0000015A   0x6969             LDR      R1,[R5, #+20]
   \   0000015C   0x6828             LDR      R0,[R5, #+0]
   \   0000015E   0x.... 0x....      BL       clust2sect
   \   00000162   0x4681             MOV      R9,R0
   \   00000164   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000168   0xD105             BNE.N    ??f_write_19
   \   0000016A   0x79A8             LDRB     R0,[R5, #+6]
   \   0000016C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000170   0x71A8             STRB     R0,[R5, #+6]
   \   00000172   0x2002             MOVS     R0,#+2
   \   00000174   0xE7C6             B.N      ??f_write_1
   \                     ??f_write_19:
   \   00000176   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000017A   0xEB18 0x0909      ADDS     R9,R8,R9
   \   0000017E   0xEA5F 0x2A56      LSRS     R10,R6,#+9
   \   00000182   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000186   0xD038             BEQ.N    ??f_write_20
   \   00000188   0x6828             LDR      R0,[R5, #+0]
   \   0000018A   0x7880             LDRB     R0,[R0, #+2]
   \   0000018C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000190   0xEB1A 0x0108      ADDS     R1,R10,R8
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xD205             BCS.N    ??f_write_21
   \   00000198   0x6828             LDR      R0,[R5, #+0]
   \   0000019A   0x7880             LDRB     R0,[R0, #+2]
   \   0000019C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001A0   0xEBB0 0x0A08      SUBS     R10,R0,R8
   \                     ??f_write_21:
   \   000001A4   0x4653             MOV      R3,R10
   \   000001A6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001A8   0x464A             MOV      R2,R9
   \   000001AA   0x0021             MOVS     R1,R4
   \   000001AC   0x6828             LDR      R0,[R5, #+0]
   \   000001AE   0x7840             LDRB     R0,[R0, #+1]
   \   000001B0   0x.... 0x....      BL       disk_write
   \   000001B4   0x2800             CMP      R0,#+0
   \   000001B6   0xD005             BEQ.N    ??f_write_22
   \   000001B8   0x79A8             LDRB     R0,[R5, #+6]
   \   000001BA   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001BE   0x71A8             STRB     R0,[R5, #+6]
   \   000001C0   0x2001             MOVS     R0,#+1
   \   000001C2   0xE79F             B.N      ??f_write_1
   \                     ??f_write_22:
   \   000001C4   0x69A8             LDR      R0,[R5, #+24]
   \   000001C6   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   000001CA   0x4550             CMP      R0,R10
   \   000001CC   0xD210             BCS.N    ??f_write_23
   \   000001CE   0xF44F 0x7200      MOV      R2,#+512
   \   000001D2   0x69A8             LDR      R0,[R5, #+24]
   \   000001D4   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   000001D8   0xF44F 0x7100      MOV      R1,#+512
   \   000001DC   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   000001E0   0xF115 0x0024      ADDS     R0,R5,#+36
   \   000001E4   0x.... 0x....      BL       mem_cpy
   \   000001E8   0x79A8             LDRB     R0,[R5, #+6]
   \   000001EA   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000001EE   0x71A8             STRB     R0,[R5, #+6]
   \                     ??f_write_23:
   \   000001F0   0xF44F 0x7000      MOV      R0,#+512
   \   000001F4   0xFB00 0xF80A      MUL      R8,R0,R10
   \   000001F8   0xE744             B.N      ??f_write_8
   \                     ??f_write_20:
   \   000001FA   0x69A8             LDR      R0,[R5, #+24]
   \   000001FC   0x4548             CMP      R0,R9
   \   000001FE   0xF43F 0xAF21      BEQ.W    ??f_write_5
   \   00000202   0x68A8             LDR      R0,[R5, #+8]
   \   00000204   0x68E9             LDR      R1,[R5, #+12]
   \   00000206   0x4288             CMP      R0,R1
   \   00000208   0xF4BF 0xAF1C      BCS.W    ??f_write_5
   \   0000020C   0x2301             MOVS     R3,#+1
   \   0000020E   0x464A             MOV      R2,R9
   \   00000210   0xF115 0x0124      ADDS     R1,R5,#+36
   \   00000214   0x6828             LDR      R0,[R5, #+0]
   \   00000216   0x7840             LDRB     R0,[R0, #+1]
   \   00000218   0x.... 0x....      BL       disk_read
   \   0000021C   0x2800             CMP      R0,#+0
   \   0000021E   0xF43F 0xAF11      BEQ.W    ??f_write_5
   \   00000222   0x79A8             LDRB     R0,[R5, #+6]
   \   00000224   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000228   0x71A8             STRB     R0,[R5, #+6]
   \   0000022A   0x2001             MOVS     R0,#+1
   \   0000022C   0xE76A             B.N      ??f_write_1
   2578          }
   2579          
   2580          
   2581          
   2582          
   2583          /*-----------------------------------------------------------------------*/
   2584          /* Synchronize the File Object                                           */
   2585          /*-----------------------------------------------------------------------*/
   2586          

   \                                 In section .text, align 2, keep-with-next
   2587          FRESULT f_sync (
   2588          	FIL *fp		/* Pointer to the file object */
   2589          )
   2590          {
   \                     f_sync:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2591          	FRESULT res;
   2592          	DWORD tim;
   2593          	BYTE *dir;
   2594          
   2595          
   2596          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000004   0x88A1             LDRH     R1,[R4, #+4]
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      BL       validate
   2597          	if (res == FR_OK) {
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD150             BNE.N    ??f_sync_0
   2598          		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   \   00000012   0x79A1             LDRB     R1,[R4, #+6]
   \   00000014   0x0689             LSLS     R1,R1,#+26
   \   00000016   0xD54D             BPL.N    ??f_sync_0
   2599          #if !_FS_TINY	/* Write-back dirty buffer */
   2600          			if (fp->flag & FA__DIRTY) {
   \   00000018   0x79A0             LDRB     R0,[R4, #+6]
   \   0000001A   0x0640             LSLS     R0,R0,#+25
   \   0000001C   0xD50F             BPL.N    ??f_sync_1
   2601          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x69A2             LDR      R2,[R4, #+24]
   \   00000022   0xF114 0x0124      ADDS     R1,R4,#+36
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x7840             LDRB     R0,[R0, #+1]
   \   0000002A   0x.... 0x....      BL       disk_write
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??f_sync_2
   2602          					LEAVE_FF(fp->fs, FR_DISK_ERR);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE03F             B.N      ??f_sync_3
   2603          				fp->flag &= ~FA__DIRTY;
   \                     ??f_sync_2:
   \   00000036   0x79A0             LDRB     R0,[R4, #+6]
   \   00000038   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000003C   0x71A0             STRB     R0,[R4, #+6]
   2604          			}
   2605          #endif
   2606          			/* Update the directory entry */
   2607          			res = move_window(fp->fs, fp->dir_sect);
   \                     ??f_sync_1:
   \   0000003E   0x69E1             LDR      R1,[R4, #+28]
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x.... 0x....      BL       move_window
   2608          			if (res == FR_OK) {
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD133             BNE.N    ??f_sync_0
   2609          				dir = fp->dir_ptr;
   \   0000004C   0x6A25             LDR      R5,[R4, #+32]
   2610          				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   \   0000004E   0x7AE8             LDRB     R0,[R5, #+11]
   \   00000050   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000054   0x72E8             STRB     R0,[R5, #+11]
   2611          				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   \   00000056   0x68E0             LDR      R0,[R4, #+12]
   \   00000058   0x7728             STRB     R0,[R5, #+28]
   \   0000005A   0x68E0             LDR      R0,[R4, #+12]
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x0A00             LSRS     R0,R0,#+8
   \   00000060   0x7768             STRB     R0,[R5, #+29]
   \   00000062   0x68E0             LDR      R0,[R4, #+12]
   \   00000064   0x0C00             LSRS     R0,R0,#+16
   \   00000066   0x77A8             STRB     R0,[R5, #+30]
   \   00000068   0x68E0             LDR      R0,[R4, #+12]
   \   0000006A   0x0E00             LSRS     R0,R0,#+24
   \   0000006C   0x77E8             STRB     R0,[R5, #+31]
   2612          				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   \   0000006E   0x6920             LDR      R0,[R4, #+16]
   \   00000070   0x76A8             STRB     R0,[R5, #+26]
   \   00000072   0x6920             LDR      R0,[R4, #+16]
   \   00000074   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   0x0A00             LSRS     R0,R0,#+8
   \   00000078   0x76E8             STRB     R0,[R5, #+27]
   \   0000007A   0x6920             LDR      R0,[R4, #+16]
   \   0000007C   0x0C00             LSRS     R0,R0,#+16
   \   0000007E   0x7528             STRB     R0,[R5, #+20]
   \   00000080   0x6920             LDR      R0,[R4, #+16]
   \   00000082   0x0C00             LSRS     R0,R0,#+16
   \   00000084   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000086   0x0A00             LSRS     R0,R0,#+8
   \   00000088   0x7568             STRB     R0,[R5, #+21]
   2613          				tim = get_fattime();						/* Update updated time */
   \   0000008A   0x.... 0x....      BL       get_fattime
   2614          				ST_DWORD(dir+DIR_WrtTime, tim);
   \   0000008E   0x75A8             STRB     R0,[R5, #+22]
   \   00000090   0x0001             MOVS     R1,R0
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x0A09             LSRS     R1,R1,#+8
   \   00000096   0x75E9             STRB     R1,[R5, #+23]
   \   00000098   0x0C01             LSRS     R1,R0,#+16
   \   0000009A   0x7629             STRB     R1,[R5, #+24]
   \   0000009C   0x0E00             LSRS     R0,R0,#+24
   \   0000009E   0x7668             STRB     R0,[R5, #+25]
   2615          				fp->flag &= ~FA__WRITTEN;
   \   000000A0   0x79A0             LDRB     R0,[R4, #+6]
   \   000000A2   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000000A6   0x71A0             STRB     R0,[R4, #+6]
   2616          				fp->fs->wflag = 1;
   \   000000A8   0x6820             LDR      R0,[R4, #+0]
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x7101             STRB     R1,[R0, #+4]
   2617          				res = sync(fp->fs);
   \   000000AE   0x6820             LDR      R0,[R4, #+0]
   \   000000B0   0x.... 0x....      BL       sync
   2618          			}
   2619          		}
   2620          	}
   2621          
   2622          	LEAVE_FF(fp->fs, res);
   \                     ??f_sync_0:
   \   000000B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_sync_3:
   \   000000B6   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   2623          }
   2624          
   2625          #endif /* !_FS_READONLY */
   2626          
   2627          
   2628          
   2629          
   2630          /*-----------------------------------------------------------------------*/
   2631          /* Close File                                                            */
   2632          /*-----------------------------------------------------------------------*/
   2633          

   \                                 In section .text, align 2, keep-with-next
   2634          FRESULT f_close (
   2635          	FIL *fp		/* Pointer to the file object to be closed */
   2636          )
   2637          {
   \                     f_close:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2638          	FRESULT res;
   2639          
   2640          #if _FS_READONLY
   2641          	FATFS *fs = fp->fs;
   2642          	res = validate(fs, fp->id);
   2643          	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2644          	LEAVE_FF(fs, res);
   2645          
   2646          #else
   2647          	res = f_sync(fp);		/* Flush cached data */
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       f_sync
   2648          #if _FS_SHARE
   2649          	if (res == FR_OK) {		/* Decrement open counter */
   2650          #if _FS_REENTRANT
   2651          		res = validate(fp->fs, fp->id);
   2652          		if (res == FR_OK) {
   2653          			res = dec_lock(fp->lockid);	
   2654          			unlock_fs(fp->fs, FR_OK);
   2655          		}
   2656          #else
   2657          		res = dec_lock(fp->lockid);
   2658          #endif
   2659          	}
   2660          #endif
   2661          	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??f_close_0
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6021             STR      R1,[R4, #+0]
   2662          	return res;
   \                     ??f_close_0:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   2663          #endif
   2664          }
   2665          
   2666          
   2667          
   2668          
   2669          /*-----------------------------------------------------------------------*/
   2670          /* Current Drive/Directory Handlings                                     */
   2671          /*-----------------------------------------------------------------------*/
   2672          
   2673          #if _FS_RPATH >= 1
   2674          
   2675          FRESULT f_chdrive (
   2676          	BYTE drv		/* Drive number */
   2677          )
   2678          {
   2679          	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   2680          
   2681          	CurrVol = drv;
   2682          
   2683          	return FR_OK;
   2684          }
   2685          
   2686          
   2687          
   2688          FRESULT f_chdir (
   2689          	const TCHAR *path	/* Pointer to the directory path */
   2690          )
   2691          {
   2692          	FRESULT res;
   2693          	DIR dj;
   2694          	DEF_NAMEBUF;
   2695          
   2696          
   2697          	res = chk_mounted(&path, &dj.fs, 0);
   2698          	if (res == FR_OK) {
   2699          		INIT_BUF(dj);
   2700          		res = follow_path(&dj, path);		/* Follow the path */
   2701          		FREE_BUF();
   2702          		if (res == FR_OK) {					/* Follow completed */
   2703          			if (!dj.dir) {
   2704          				dj.fs->cdir = dj.sclust;	/* Start directory itself */
   2705          			} else {
   2706          				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
   2707          					dj.fs->cdir = LD_CLUST(dj.dir);
   2708          				else
   2709          					res = FR_NO_PATH;		/* Reached but a file */
   2710          			}
   2711          		}
   2712          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2713          	}
   2714          
   2715          	LEAVE_FF(dj.fs, res);
   2716          }
   2717          
   2718          
   2719          #if _FS_RPATH >= 2
   2720          FRESULT f_getcwd (
   2721          	TCHAR *path,	/* Pointer to the directory path */
   2722          	UINT sz_path	/* Size of path */
   2723          )
   2724          {
   2725          	FRESULT res;
   2726          	DIR dj;
   2727          	UINT i, n;
   2728          	DWORD ccl;
   2729          	TCHAR *tp;
   2730          	FILINFO fno;
   2731          	DEF_NAMEBUF;
   2732          
   2733          
   2734          	*path = 0;
   2735          	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
   2736          	if (res == FR_OK) {
   2737          		INIT_BUF(dj);
   2738          		i = sz_path;		/* Bottom of buffer (dir stack base) */
   2739          		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
   2740          		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
   2741          			res = dir_sdi(&dj, 1);			/* Get parent dir */
   2742          			if (res != FR_OK) break;
   2743          			res = dir_read(&dj);
   2744          			if (res != FR_OK) break;
   2745          			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
   2746          			res = dir_sdi(&dj, 0);
   2747          			if (res != FR_OK) break;
   2748          			do {							/* Find the entry links to the child dir */
   2749          				res = dir_read(&dj);
   2750          				if (res != FR_OK) break;
   2751          				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
   2752          				res = dir_next(&dj, 0);	
   2753          			} while (res == FR_OK);
   2754          			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   2755          			if (res != FR_OK) break;
   2756          #if _USE_LFN
   2757          			fno.lfname = path;
   2758          			fno.lfsize = i;
   2759          #endif
   2760          			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
   2761          			tp = fno.fname;
   2762          			if (_USE_LFN && *path) tp = path;
   2763          			for (n = 0; tp[n]; n++) ;
   2764          			if (i < n + 3) {
   2765          				res = FR_NOT_ENOUGH_CORE; break;
   2766          			}
   2767          			while (n) path[--i] = tp[--n];
   2768          			path[--i] = '/';
   2769          		}
   2770          		tp = path;
   2771          		if (res == FR_OK) {
   2772          			*tp++ = '0' + CurrVol;			/* Put drive number */
   2773          			*tp++ = ':';
   2774          			if (i == sz_path) {				/* Root-dir */
   2775          				*tp++ = '/';
   2776          			} else {						/* Sub-dir */
   2777          				do		/* Add stacked path str */
   2778          					*tp++ = path[i++];
   2779          				while (i < sz_path);
   2780          			}
   2781          		}
   2782          		*tp = 0;
   2783          		FREE_BUF();
   2784          	}
   2785          
   2786          	LEAVE_FF(dj.fs, res);
   2787          }
   2788          #endif /* _FS_RPATH >= 2 */
   2789          #endif /* _FS_RPATH >= 1 */
   2790          
   2791          
   2792          
   2793          #if _FS_MINIMIZE <= 2
   2794          /*-----------------------------------------------------------------------*/
   2795          /* Seek File R/W Pointer                                                 */
   2796          /*-----------------------------------------------------------------------*/
   2797          

   \                                 In section .text, align 2, keep-with-next
   2798          FRESULT f_lseek (
   2799          	FIL *fp,		/* Pointer to the file object */
   2800          	DWORD ofs		/* File pointer from top of file */
   2801          )
   2802          {
   \                     f_lseek:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   2803          	FRESULT res;
   2804          
   2805          
   2806          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000008   0x88A1             LDRH     R1,[R4, #+4]
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       validate
   \   00000010   0x0006             MOVS     R6,R0
   2807          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD002             BEQ.N    ??f_lseek_0
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xE0CC             B.N      ??f_lseek_1
   2808          	if (fp->flag & FA__ERROR)			/* Check abort flag */
   \                     ??f_lseek_0:
   \   0000001E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000020   0x0600             LSLS     R0,R0,#+24
   \   00000022   0xD501             BPL.N    ??f_lseek_2
   2809          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xE0C7             B.N      ??f_lseek_1
   2810          
   2811          #if _USE_FASTSEEK
   2812          	if (fp->cltbl) {	/* Fast seek */
   2813          		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
   2814          
   2815          		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
   2816          			tbl = fp->cltbl;
   2817          			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
   2818          			cl = fp->sclust;			/* Top of the chain */
   2819          			if (cl) {
   2820          				do {
   2821          					/* Get a fragment */
   2822          					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
   2823          					do {
   2824          						pcl = cl; ncl++;
   2825          						cl = get_fat(fp->fs, cl);
   2826          						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
   2827          						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2828          					} while (cl == pcl + 1);
   2829          					if (ulen <= tlen) {		/* Store the length and top of the fragment */
   2830          						*tbl++ = ncl; *tbl++ = tcl;
   2831          					}
   2832          				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
   2833          			}
   2834          			*fp->cltbl = ulen;	/* Number of items used */
   2835          			if (ulen <= tlen)
   2836          				*tbl = 0;		/* Terminate table */
   2837          			else
   2838          				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
   2839          
   2840          		} else {						/* Fast seek */
   2841          			if (ofs > fp->fsize)		/* Clip offset at the file size */
   2842          				ofs = fp->fsize;
   2843          			fp->fptr = ofs;				/* Set file pointer */
   2844          			if (ofs) {
   2845          				fp->clust = clmt_clust(fp, ofs - 1);
   2846          				dsc = clust2sect(fp->fs, fp->clust);
   2847          				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
   2848          				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
   2849          				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
   2850          #if !_FS_TINY
   2851          #if !_FS_READONLY
   2852          					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   2853          						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   2854          							ABORT(fp->fs, FR_DISK_ERR);
   2855          						fp->flag &= ~FA__DIRTY;
   2856          					}
   2857          #endif
   2858          					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
   2859          						ABORT(fp->fs, FR_DISK_ERR);
   2860          #endif
   2861          					fp->dsect = dsc;
   2862          				}
   2863          			}
   2864          		}
   2865          	} else
   2866          #endif
   2867          
   2868          	/* Normal Seek */
   2869          	{
   2870          		DWORD clst, bcs, nsect, ifptr;
   2871          
   2872          		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   2873          #if !_FS_READONLY
   2874          			 && !(fp->flag & FA_WRITE)
   2875          #endif
   2876          			) ofs = fp->fsize;
   \                     ??f_lseek_2:
   \   00000028   0x68E0             LDR      R0,[R4, #+12]
   \   0000002A   0x42A8             CMP      R0,R5
   \   0000002C   0xD203             BCS.N    ??f_lseek_3
   \   0000002E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000030   0x0780             LSLS     R0,R0,#+30
   \   00000032   0xD400             BMI.N    ??f_lseek_3
   \   00000034   0x68E5             LDR      R5,[R4, #+12]
   2877          
   2878          		ifptr = fp->fptr;
   \                     ??f_lseek_3:
   \   00000036   0x68A0             LDR      R0,[R4, #+8]
   2879          		fp->fptr = nsect = 0;
   \   00000038   0x2700             MOVS     R7,#+0
   \   0000003A   0x60A7             STR      R7,[R4, #+8]
   2880          		if (ofs) {
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD07B             BEQ.N    ??f_lseek_4
   2881          			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   \   00000040   0x6821             LDR      R1,[R4, #+0]
   \   00000042   0x7889             LDRB     R1,[R1, #+2]
   \   00000044   0xF44F 0x7200      MOV      R2,#+512
   \   00000048   0xFB02 0xF801      MUL      R8,R2,R1
   2882          			if (ifptr > 0 &&
   2883          				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD010             BEQ.N    ??f_lseek_5
   \   00000050   0x1E41             SUBS     R1,R0,#+1
   \   00000052   0xFBB1 0xF1F8      UDIV     R1,R1,R8
   \   00000056   0x1E6A             SUBS     R2,R5,#+1
   \   00000058   0xFBB2 0xF2F8      UDIV     R2,R2,R8
   \   0000005C   0x428A             CMP      R2,R1
   \   0000005E   0xD308             BCC.N    ??f_lseek_5
   2884          				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0xF1B8 0x0101      SUBS     R1,R8,#+1
   \   00000066   0x4388             BICS     R0,R0,R1
   \   00000068   0x60A0             STR      R0,[R4, #+8]
   2885          				ofs -= fp->fptr;
   \   0000006A   0x68A0             LDR      R0,[R4, #+8]
   \   0000006C   0x1A2D             SUBS     R5,R5,R0
   2886          				clst = fp->clust;
   \   0000006E   0x6960             LDR      R0,[R4, #+20]
   \   00000070   0xE019             B.N      ??f_lseek_6
   2887          			} else {									/* When seek to back cluster, */
   2888          				clst = fp->sclust;						/* start from the first cluster */
   \                     ??f_lseek_5:
   \   00000072   0x6920             LDR      R0,[R4, #+16]
   2889          #if !_FS_READONLY
   2890          				if (clst == 0) {						/* If no cluster chain, create a new chain */
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD115             BNE.N    ??f_lseek_7
   2891          					clst = create_chain(fp->fs, 0);
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0x.... 0x....      BL       create_chain
   2892          					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xD105             BNE.N    ??f_lseek_8
   \   00000084   0x79A0             LDRB     R0,[R4, #+6]
   \   00000086   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000008A   0x71A0             STRB     R0,[R4, #+6]
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0xE093             B.N      ??f_lseek_1
   2893          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \                     ??f_lseek_8:
   \   00000090   0xF110 0x0F01      CMN      R0,#+1
   \   00000094   0xD105             BNE.N    ??f_lseek_9
   \   00000096   0x79A0             LDRB     R0,[R4, #+6]
   \   00000098   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000009C   0x71A0             STRB     R0,[R4, #+6]
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE08A             B.N      ??f_lseek_1
   2894          					fp->sclust = clst;
   \                     ??f_lseek_9:
   \   000000A2   0x6120             STR      R0,[R4, #+16]
   2895          				}
   2896          #endif
   2897          				fp->clust = clst;
   \                     ??f_lseek_7:
   \   000000A4   0x6160             STR      R0,[R4, #+20]
   2898          			}
   2899          			if (clst != 0) {
   \                     ??f_lseek_6:
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD107             BNE.N    ??f_lseek_10
   \   000000AA   0xE045             B.N      ??f_lseek_4
   2900          				while (ofs > bcs) {						/* Cluster following loop */
   2901          #if !_FS_READONLY
   2902          					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   2903          						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   2904          						if (clst == 0) {				/* When disk gets full, clip file size */
   2905          							ofs = bcs; break;
   2906          						}
   2907          					} else
   2908          #endif
   2909          						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
   2910          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2911          					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   2912          					fp->clust = clst;
   \                     ??f_lseek_11:
   \   000000AC   0x6160             STR      R0,[R4, #+20]
   2913          					fp->fptr += bcs;
   \   000000AE   0x68A1             LDR      R1,[R4, #+8]
   \   000000B0   0xEB18 0x0101      ADDS     R1,R8,R1
   \   000000B4   0x60A1             STR      R1,[R4, #+8]
   2914          					ofs -= bcs;
   \   000000B6   0xEBB5 0x0508      SUBS     R5,R5,R8
   \                     ??f_lseek_10:
   \   000000BA   0x45A8             CMP      R8,R5
   \   000000BC   0xD209             BCS.N    ??f_lseek_12
   \   000000BE   0x79A1             LDRB     R1,[R4, #+6]
   \   000000C0   0x0789             LSLS     R1,R1,#+30
   \   000000C2   0xD51E             BPL.N    ??f_lseek_13
   \   000000C4   0x0001             MOVS     R1,R0
   \   000000C6   0x6820             LDR      R0,[R4, #+0]
   \   000000C8   0x.... 0x....      BL       create_chain
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD11C             BNE.N    ??f_lseek_14
   \   000000D0   0x4645             MOV      R5,R8
   2915          				}
   2916          				fp->fptr += ofs;
   \                     ??f_lseek_12:
   \   000000D2   0x68A1             LDR      R1,[R4, #+8]
   \   000000D4   0x1869             ADDS     R1,R5,R1
   \   000000D6   0x60A1             STR      R1,[R4, #+8]
   2917          				if (ofs % SS(fp->fs)) {
   \   000000D8   0xF44F 0x7100      MOV      R1,#+512
   \   000000DC   0xFBB5 0xF2F1      UDIV     R2,R5,R1
   \   000000E0   0xFB02 0x5211      MLS      R2,R2,R1,R5
   \   000000E4   0x2A00             CMP      R2,#+0
   \   000000E6   0xD027             BEQ.N    ??f_lseek_4
   2918          					nsect = clust2sect(fp->fs, clst);	/* Current sector */
   \   000000E8   0x0001             MOVS     R1,R0
   \   000000EA   0x6820             LDR      R0,[R4, #+0]
   \   000000EC   0x.... 0x....      BL       clust2sect
   \   000000F0   0x0007             MOVS     R7,R0
   2919          					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   \   000000F2   0x2F00             CMP      R7,#+0
   \   000000F4   0xD11E             BNE.N    ??f_lseek_15
   \   000000F6   0x79A0             LDRB     R0,[R4, #+6]
   \   000000F8   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000FC   0x71A0             STRB     R0,[R4, #+6]
   \   000000FE   0x2002             MOVS     R0,#+2
   \   00000100   0xE05A             B.N      ??f_lseek_1
   \                     ??f_lseek_13:
   \   00000102   0x0001             MOVS     R1,R0
   \   00000104   0x6820             LDR      R0,[R4, #+0]
   \   00000106   0x.... 0x....      BL       get_fat
   \                     ??f_lseek_14:
   \   0000010A   0xF110 0x0F01      CMN      R0,#+1
   \   0000010E   0xD105             BNE.N    ??f_lseek_16
   \   00000110   0x79A0             LDRB     R0,[R4, #+6]
   \   00000112   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000116   0x71A0             STRB     R0,[R4, #+6]
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0xE04D             B.N      ??f_lseek_1
   \                     ??f_lseek_16:
   \   0000011C   0x2802             CMP      R0,#+2
   \   0000011E   0xD303             BCC.N    ??f_lseek_17
   \   00000120   0x6821             LDR      R1,[R4, #+0]
   \   00000122   0x6989             LDR      R1,[R1, #+24]
   \   00000124   0x4288             CMP      R0,R1
   \   00000126   0xD3C1             BCC.N    ??f_lseek_11
   \                     ??f_lseek_17:
   \   00000128   0x79A0             LDRB     R0,[R4, #+6]
   \   0000012A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000012E   0x71A0             STRB     R0,[R4, #+6]
   \   00000130   0x2002             MOVS     R0,#+2
   \   00000132   0xE041             B.N      ??f_lseek_1
   2920          					nsect += ofs / SS(fp->fs);
   \                     ??f_lseek_15:
   \   00000134   0xEB17 0x2755      ADDS     R7,R7,R5, LSR #+9
   2921          				}
   2922          			}
   2923          		}
   2924          		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
   \                     ??f_lseek_4:
   \   00000138   0x68A0             LDR      R0,[R4, #+8]
   \   0000013A   0xF44F 0x7100      MOV      R1,#+512
   \   0000013E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000142   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000146   0x2A00             CMP      R2,#+0
   \   00000148   0xD02A             BEQ.N    ??f_lseek_18
   \   0000014A   0x69A0             LDR      R0,[R4, #+24]
   \   0000014C   0x4287             CMP      R7,R0
   \   0000014E   0xD027             BEQ.N    ??f_lseek_18
   2925          #if !_FS_TINY
   2926          #if !_FS_READONLY
   2927          			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
   \   00000150   0x79A0             LDRB     R0,[R4, #+6]
   \   00000152   0x0640             LSLS     R0,R0,#+25
   \   00000154   0xD513             BPL.N    ??f_lseek_19
   2928          				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   \   00000156   0x2301             MOVS     R3,#+1
   \   00000158   0x69A2             LDR      R2,[R4, #+24]
   \   0000015A   0xF114 0x0124      ADDS     R1,R4,#+36
   \   0000015E   0x6820             LDR      R0,[R4, #+0]
   \   00000160   0x7840             LDRB     R0,[R0, #+1]
   \   00000162   0x.... 0x....      BL       disk_write
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD005             BEQ.N    ??f_lseek_20
   2929          					ABORT(fp->fs, FR_DISK_ERR);
   \   0000016A   0x79A0             LDRB     R0,[R4, #+6]
   \   0000016C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000170   0x71A0             STRB     R0,[R4, #+6]
   \   00000172   0x2001             MOVS     R0,#+1
   \   00000174   0xE020             B.N      ??f_lseek_1
   2930          				fp->flag &= ~FA__DIRTY;
   \                     ??f_lseek_20:
   \   00000176   0x79A0             LDRB     R0,[R4, #+6]
   \   00000178   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000017C   0x71A0             STRB     R0,[R4, #+6]
   2931          			}
   2932          #endif
   2933          			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
   \                     ??f_lseek_19:
   \   0000017E   0x2301             MOVS     R3,#+1
   \   00000180   0x003A             MOVS     R2,R7
   \   00000182   0xF114 0x0124      ADDS     R1,R4,#+36
   \   00000186   0x6820             LDR      R0,[R4, #+0]
   \   00000188   0x7840             LDRB     R0,[R0, #+1]
   \   0000018A   0x.... 0x....      BL       disk_read
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD005             BEQ.N    ??f_lseek_21
   2934          				ABORT(fp->fs, FR_DISK_ERR);
   \   00000192   0x79A0             LDRB     R0,[R4, #+6]
   \   00000194   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000198   0x71A0             STRB     R0,[R4, #+6]
   \   0000019A   0x2001             MOVS     R0,#+1
   \   0000019C   0xE00C             B.N      ??f_lseek_1
   2935          #endif
   2936          			fp->dsect = nsect;
   \                     ??f_lseek_21:
   \   0000019E   0x61A7             STR      R7,[R4, #+24]
   2937          		}
   2938          #if !_FS_READONLY
   2939          		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
   \                     ??f_lseek_18:
   \   000001A0   0x68E0             LDR      R0,[R4, #+12]
   \   000001A2   0x68A1             LDR      R1,[R4, #+8]
   \   000001A4   0x4288             CMP      R0,R1
   \   000001A6   0xD205             BCS.N    ??f_lseek_22
   2940          			fp->fsize = fp->fptr;
   \   000001A8   0x68A0             LDR      R0,[R4, #+8]
   \   000001AA   0x60E0             STR      R0,[R4, #+12]
   2941          			fp->flag |= FA__WRITTEN;
   \   000001AC   0x79A0             LDRB     R0,[R4, #+6]
   \   000001AE   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000001B2   0x71A0             STRB     R0,[R4, #+6]
   2942          		}
   2943          #endif
   2944          	}
   2945          
   2946          	LEAVE_FF(fp->fs, res);
   \                     ??f_lseek_22:
   \   000001B4   0x0030             MOVS     R0,R6
   \   000001B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_lseek_1:
   \   000001B8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2947          }
   2948          
   2949          
   2950          
   2951          #if _FS_MINIMIZE <= 1
   2952          /*-----------------------------------------------------------------------*/
   2953          /* Create a Directroy Object                                             */
   2954          /*-----------------------------------------------------------------------*/
   2955          

   \                                 In section .text, align 2, keep-with-next
   2956          FRESULT f_opendir (
   2957          	DIR *dj,			/* Pointer to directory object to create */
   2958          	const TCHAR *path	/* Pointer to the directory path */
   2959          )
   2960          {
   \                     f_opendir:
   \   00000000   0xB512             PUSH     {R1,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   2961          	FRESULT res;
   2962          	DEF_NAMEBUF;
   2963          
   2964          
   2965          	res = chk_mounted(&path, &dj->fs, 0);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x.... 0x....      BL       chk_mounted
   2966          	if (res == FR_OK) {
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD133             BNE.N    ??f_opendir_0
   2967          		INIT_BUF(*dj);
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x61A0             STR      R0,[R4, #+24]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000001E   0x61E0             STR      R0,[R4, #+28]
   2968          		res = follow_path(dj, path);			/* Follow the path to the directory */
   \   00000020   0x9903             LDR      R1,[SP, #+12]
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       follow_path
   2969          		FREE_BUF();
   2970          		if (res == FR_OK) {						/* Follow completed */
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD123             BNE.N    ??f_opendir_1
   2971          			if (dj->dir) {						/* It is not the root dir */
   \   0000002E   0x6961             LDR      R1,[R4, #+20]
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD016             BEQ.N    ??f_opendir_2
   2972          				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   \   00000034   0x6961             LDR      R1,[R4, #+20]
   \   00000036   0x7AC9             LDRB     R1,[R1, #+11]
   \   00000038   0x06C9             LSLS     R1,R1,#+27
   \   0000003A   0xD511             BPL.N    ??f_opendir_3
   2973          					dj->sclust = LD_CLUST(dj->dir);
   \   0000003C   0x6961             LDR      R1,[R4, #+20]
   \   0000003E   0x7D49             LDRB     R1,[R1, #+21]
   \   00000040   0x6962             LDR      R2,[R4, #+20]
   \   00000042   0x7D12             LDRB     R2,[R2, #+20]
   \   00000044   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x6962             LDR      R2,[R4, #+20]
   \   0000004C   0x7ED2             LDRB     R2,[R2, #+27]
   \   0000004E   0x6963             LDR      R3,[R4, #+20]
   \   00000050   0x7E9B             LDRB     R3,[R3, #+26]
   \   00000052   0xEA53 0x2202      ORRS     R2,R3,R2, LSL #+8
   \   00000056   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000058   0xEA52 0x4101      ORRS     R1,R2,R1, LSL #+16
   \   0000005C   0x60A1             STR      R1,[R4, #+8]
   \   0000005E   0xE000             B.N      ??f_opendir_2
   2974          				} else {						/* The object is not a directory */
   2975          					res = FR_NO_PATH;
   \                     ??f_opendir_3:
   \   00000060   0x2005             MOVS     R0,#+5
   2976          				}
   2977          			}
   2978          			if (res == FR_OK) {
   \                     ??f_opendir_2:
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD106             BNE.N    ??f_opendir_1
   2979          				dj->id = dj->fs->id;
   \   00000068   0x6820             LDR      R0,[R4, #+0]
   \   0000006A   0x88C0             LDRH     R0,[R0, #+6]
   \   0000006C   0x80A0             STRH     R0,[R4, #+4]
   2980          				res = dir_sdi(dj, 0);			/* Rewind dir */
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       dir_sdi
   2981          			}
   2982          		}
   2983          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   \                     ??f_opendir_1:
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2804             CMP      R0,#+4
   \   0000007A   0xD100             BNE.N    ??f_opendir_0
   \   0000007C   0x2005             MOVS     R0,#+5
   2984          	}
   2985          
   2986          	LEAVE_FF(dj->fs, res);
   \                     ??f_opendir_0:
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0xB004             ADD      SP,SP,#+16
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
   2987          }
   2988          
   2989          
   2990          
   2991          
   2992          /*-----------------------------------------------------------------------*/
   2993          /* Read Directory Entry in Sequense                                      */
   2994          /*-----------------------------------------------------------------------*/
   2995          

   \                                 In section .text, align 2, keep-with-next
   2996          FRESULT f_readdir (
   2997          	DIR *dj,			/* Pointer to the open directory object */
   2998          	FILINFO *fno		/* Pointer to file information to return */
   2999          )
   3000          {
   \                     f_readdir:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   3001          	FRESULT res;
   3002          	DEF_NAMEBUF;
   3003          
   3004          
   3005          	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   \   00000006   0x88A1             LDRH     R1,[R4, #+4]
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       validate
   3006          	if (res == FR_OK) {
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD124             BNE.N    ??f_readdir_0
   3007          		if (!fno) {
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD104             BNE.N    ??f_readdir_1
   3008          			res = dir_sdi(dj, 0);			/* Rewind the directory object */
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       dir_sdi
   \   00000020   0xE01D             B.N      ??f_readdir_0
   3009          		} else {
   3010          			INIT_BUF(*dj);
   \                     ??f_readdir_1:
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x61A0             STR      R0,[R4, #+24]
   \   00000026   0x....             LDR.N    R0,??DataTable11_3
   \   00000028   0x61E0             STR      R0,[R4, #+28]
   3011          			res = dir_read(dj);				/* Read an directory item */
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       dir_read
   3012          			if (res == FR_NO_FILE) {		/* Reached end of dir */
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x2804             CMP      R0,#+4
   \   00000034   0xD102             BNE.N    ??f_readdir_2
   3013          				dj->sect = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6120             STR      R0,[R4, #+16]
   3014          				res = FR_OK;
   \   0000003A   0x2000             MOVS     R0,#+0
   3015          			}
   3016          			if (res == FR_OK) {				/* A valid entry is found */
   \                     ??f_readdir_2:
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD10D             BNE.N    ??f_readdir_0
   3017          				get_fileinfo(dj, fno);		/* Get the object information */
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       get_fileinfo
   3018          				res = dir_next(dj, 0);		/* Increment index for next */
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       dir_next
   3019          				if (res == FR_NO_FILE) {
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x2804             CMP      R0,#+4
   \   00000056   0xD102             BNE.N    ??f_readdir_0
   3020          					dj->sect = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x6120             STR      R0,[R4, #+16]
   3021          					res = FR_OK;
   \   0000005C   0x2000             MOVS     R0,#+0
   3022          				}
   3023          			}
   3024          			FREE_BUF();
   3025          		}
   3026          	}
   3027          
   3028          	LEAVE_FF(dj->fs, res);
   \                     ??f_readdir_0:
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xBD3E             POP      {R1-R5,PC}       ;; return
   3029          }
   3030          
   3031          
   3032          
   3033          #if _FS_MINIMIZE == 0
   3034          /*-----------------------------------------------------------------------*/
   3035          /* Get File Status                                                       */
   3036          /*-----------------------------------------------------------------------*/
   3037          

   \                                 In section .text, align 2, keep-with-next
   3038          FRESULT f_stat (
   3039          	const TCHAR *path,	/* Pointer to the file path */
   3040          	FILINFO *fno		/* Pointer to file information to return */
   3041          )
   3042          {
   \                     f_stat:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x000C             MOVS     R4,R1
   3043          	FRESULT res;
   3044          	DIR dj;
   3045          	DEF_NAMEBUF;
   3046          
   3047          
   3048          	res = chk_mounted(&path, &dj.fs, 0);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xA903             ADD      R1,SP,#+12
   \   0000000A   0xA80C             ADD      R0,SP,#+48
   \   0000000C   0x.... 0x....      BL       chk_mounted
   \   00000010   0x0005             MOVS     R5,R0
   3049          	if (res == FR_OK) {
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD114             BNE.N    ??f_stat_0
   3050          		INIT_BUF(dj);
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x9009             STR      R0,[SP, #+36]
   \   0000001C   0x....             LDR.N    R0,??DataTable11_3
   \   0000001E   0x900A             STR      R0,[SP, #+40]
   3051          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000020   0x990C             LDR      R1,[SP, #+48]
   \   00000022   0xA803             ADD      R0,SP,#+12
   \   00000024   0x.... 0x....      BL       follow_path
   \   00000028   0x0005             MOVS     R5,R0
   3052          		if (res == FR_OK) {				/* Follow completed */
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD108             BNE.N    ??f_stat_0
   3053          			if (dj.dir)		/* Found an object */
   \   00000030   0x9808             LDR      R0,[SP, #+32]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD004             BEQ.N    ??f_stat_1
   3054          				get_fileinfo(&dj, fno);
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0xA803             ADD      R0,SP,#+12
   \   0000003A   0x.... 0x....      BL       get_fileinfo
   \   0000003E   0xE000             B.N      ??f_stat_0
   3055          			else			/* It is root dir */
   3056          				res = FR_INVALID_NAME;
   \                     ??f_stat_1:
   \   00000040   0x2506             MOVS     R5,#+6
   3057          		}
   3058          		FREE_BUF();
   3059          	}
   3060          
   3061          	LEAVE_FF(dj.fs, res);
   \                     ??f_stat_0:
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0xB00D             ADD      SP,SP,#+52
   \   00000048   0xBD30             POP      {R4,R5,PC}       ;; return
   3062          }
   3063          
   3064          
   3065          
   3066          #if !_FS_READONLY
   3067          /*-----------------------------------------------------------------------*/
   3068          /* Get Number of Free Clusters                                           */
   3069          /*-----------------------------------------------------------------------*/
   3070          

   \                                 In section .text, align 2, keep-with-next
   3071          FRESULT f_getfree (
   3072          	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
   3073          	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
   3074          	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
   3075          )
   3076          {
   \                     f_getfree:
   \   00000000   0xE92D 0x47F1      PUSH     {R0,R4-R10,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   3077          	FRESULT res;
   3078          	DWORD n, clst, sect, stat;
   3079          	UINT i;
   3080          	BYTE fat, *p;
   3081          
   3082          
   3083          	/* Get drive number */
   3084          	res = chk_mounted(&path, fatfs, 0);
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x0031             MOVS     R1,R6
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       chk_mounted
   \   00000014   0x4680             MOV      R8,R0
   3085          	if (res == FR_OK) {
   \   00000016   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000001E   0xD171             BNE.N    ??f_getfree_0
   3086          		/* If free_clust is valid, return it without full cluster scan */
   3087          		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x6980             LDR      R0,[R0, #+24]
   \   00000024   0x1E80             SUBS     R0,R0,#+2
   \   00000026   0x6831             LDR      R1,[R6, #+0]
   \   00000028   0x6909             LDR      R1,[R1, #+16]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD303             BCC.N    ??f_getfree_1
   3088          			*nclst = (*fatfs)->free_clust;
   \   0000002E   0x6830             LDR      R0,[R6, #+0]
   \   00000030   0x6900             LDR      R0,[R0, #+16]
   \   00000032   0x6028             STR      R0,[R5, #+0]
   \   00000034   0xE066             B.N      ??f_getfree_0
   3089          		} else {
   3090          			/* Get number of free clusters */
   3091          			fat = (*fatfs)->fs_type;
   \                     ??f_getfree_1:
   \   00000036   0x6830             LDR      R0,[R6, #+0]
   \   00000038   0x7807             LDRB     R7,[R0, #+0]
   3092          			n = 0;
   \   0000003A   0xF05F 0x0900      MOVS     R9,#+0
   3093          			if (fat == FS_FAT12) {
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x2F01             CMP      R7,#+1
   \   00000042   0xD119             BNE.N    ??f_getfree_2
   3094          				clst = 2;
   \   00000044   0x2402             MOVS     R4,#+2
   3095          				do {
   3096          					stat = get_fat(*fatfs, clst);
   \                     ??f_getfree_3:
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x6830             LDR      R0,[R6, #+0]
   \   0000004A   0x.... 0x....      BL       get_fat
   3097          					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   \   0000004E   0xF110 0x0F01      CMN      R0,#+1
   \   00000052   0xD102             BNE.N    ??f_getfree_4
   \   00000054   0xF05F 0x0801      MOVS     R8,#+1
   \   00000058   0xE049             B.N      ??f_getfree_5
   3098          					if (stat == 1) { res = FR_INT_ERR; break; }
   \                     ??f_getfree_4:
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD102             BNE.N    ??f_getfree_6
   \   0000005E   0xF05F 0x0802      MOVS     R8,#+2
   \   00000062   0xE044             B.N      ??f_getfree_5
   3099          					if (stat == 0) n++;
   \                     ??f_getfree_6:
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD101             BNE.N    ??f_getfree_7
   \   00000068   0xF119 0x0901      ADDS     R9,R9,#+1
   3100          				} while (++clst < (*fatfs)->n_fatent);
   \                     ??f_getfree_7:
   \   0000006C   0x1C64             ADDS     R4,R4,#+1
   \   0000006E   0x6830             LDR      R0,[R6, #+0]
   \   00000070   0x6980             LDR      R0,[R0, #+24]
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD3E7             BCC.N    ??f_getfree_3
   \   00000076   0xE03A             B.N      ??f_getfree_5
   3101          			} else {
   3102          				clst = (*fatfs)->n_fatent;
   \                     ??f_getfree_2:
   \   00000078   0x6830             LDR      R0,[R6, #+0]
   \   0000007A   0x6984             LDR      R4,[R0, #+24]
   3103          				sect = (*fatfs)->fatbase;
   \   0000007C   0x6830             LDR      R0,[R6, #+0]
   \   0000007E   0xF8D0 0xA020      LDR      R10,[R0, #+32]
   3104          				i = 0; p = 0;
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x2000             MOVS     R0,#+0
   3105          				do {
   3106          					if (!i) {
   \                     ??f_getfree_8:
   \   00000086   0x2900             CMP      R1,#+0
   \   00000088   0xD10F             BNE.N    ??f_getfree_9
   3107          						res = move_window(*fatfs, sect++);
   \   0000008A   0x4651             MOV      R1,R10
   \   0000008C   0x6830             LDR      R0,[R6, #+0]
   \   0000008E   0x.... 0x....      BL       move_window
   \   00000092   0x4680             MOV      R8,R0
   \   00000094   0xF11A 0x0A01      ADDS     R10,R10,#+1
   3108          						if (res != FR_OK) break;
   \   00000098   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009C   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000A0   0xD125             BNE.N    ??f_getfree_5
   3109          						p = (*fatfs)->win;
   \                     ??f_getfree_10:
   \   000000A2   0x6830             LDR      R0,[R6, #+0]
   \   000000A4   0x3030             ADDS     R0,R0,#+48
   3110          						i = SS(*fatfs);
   \   000000A6   0xF44F 0x7100      MOV      R1,#+512
   3111          					}
   3112          					if (fat == FS_FAT16) {
   \                     ??f_getfree_9:
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x2F02             CMP      R7,#+2
   \   000000AE   0xD10B             BNE.N    ??f_getfree_11
   3113          						if (LD_WORD(p) == 0) n++;
   \   000000B0   0x7842             LDRB     R2,[R0, #+1]
   \   000000B2   0x7803             LDRB     R3,[R0, #+0]
   \   000000B4   0xEA53 0x2202      ORRS     R2,R3,R2, LSL #+8
   \   000000B8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000BA   0x2A00             CMP      R2,#+0
   \   000000BC   0xD101             BNE.N    ??f_getfree_12
   \   000000BE   0xF119 0x0901      ADDS     R9,R9,#+1
   3114          						p += 2; i -= 2;
   \                     ??f_getfree_12:
   \   000000C2   0x1C80             ADDS     R0,R0,#+2
   \   000000C4   0x1E89             SUBS     R1,R1,#+2
   \   000000C6   0xE00F             B.N      ??f_getfree_13
   3115          					} else {
   3116          						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   \                     ??f_getfree_11:
   \   000000C8   0x78C2             LDRB     R2,[R0, #+3]
   \   000000CA   0x7883             LDRB     R3,[R0, #+2]
   \   000000CC   0x041B             LSLS     R3,R3,#+16
   \   000000CE   0xEA53 0x6202      ORRS     R2,R3,R2, LSL #+24
   \   000000D2   0x7843             LDRB     R3,[R0, #+1]
   \   000000D4   0xEA52 0x2203      ORRS     R2,R2,R3, LSL #+8
   \   000000D8   0x7803             LDRB     R3,[R0, #+0]
   \   000000DA   0x431A             ORRS     R2,R3,R2
   \   000000DC   0x0112             LSLS     R2,R2,#+4
   \   000000DE   0xD101             BNE.N    ??f_getfree_14
   \   000000E0   0xF119 0x0901      ADDS     R9,R9,#+1
   3117          						p += 4; i -= 4;
   \                     ??f_getfree_14:
   \   000000E4   0x1D00             ADDS     R0,R0,#+4
   \   000000E6   0x1F09             SUBS     R1,R1,#+4
   3118          					}
   3119          				} while (--clst);
   \                     ??f_getfree_13:
   \   000000E8   0x1E64             SUBS     R4,R4,#+1
   \   000000EA   0x2C00             CMP      R4,#+0
   \   000000EC   0xD1CB             BNE.N    ??f_getfree_8
   3120          			}
   3121          			(*fatfs)->free_clust = n;
   \                     ??f_getfree_5:
   \   000000EE   0x6830             LDR      R0,[R6, #+0]
   \   000000F0   0xF8C0 0x9010      STR      R9,[R0, #+16]
   3122          			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
   \   000000F4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F6   0x2F03             CMP      R7,#+3
   \   000000F8   0xD102             BNE.N    ??f_getfree_15
   \   000000FA   0x6830             LDR      R0,[R6, #+0]
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x7141             STRB     R1,[R0, #+5]
   3123          			*nclst = n;
   \                     ??f_getfree_15:
   \   00000100   0xF8C5 0x9000      STR      R9,[R5, #+0]
   3124          		}
   3125          	}
   3126          	LEAVE_FF(*fatfs, res);
   \                     ??f_getfree_0:
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000108   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   3127          }
   3128          
   3129          
   3130          
   3131          
   3132          /*-----------------------------------------------------------------------*/
   3133          /* Truncate File                                                         */
   3134          /*-----------------------------------------------------------------------*/
   3135          

   \                                 In section .text, align 2, keep-with-next
   3136          FRESULT f_truncate (
   3137          	FIL *fp		/* Pointer to the file object */
   3138          )
   3139          {
   \                     f_truncate:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   3140          	FRESULT res;
   3141          	DWORD ncl;
   3142          
   3143          
   3144          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000004   0x88A1             LDRH     R1,[R4, #+4]
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      BL       validate
   3145          	if (res == FR_OK) {
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD108             BNE.N    ??f_truncate_0
   3146          		if (fp->flag & FA__ERROR) {			/* Check abort flag */
   \   00000012   0x79A1             LDRB     R1,[R4, #+6]
   \   00000014   0x0609             LSLS     R1,R1,#+24
   \   00000016   0xD501             BPL.N    ??f_truncate_1
   3147          			res = FR_INT_ERR;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xE003             B.N      ??f_truncate_0
   3148          		} else {
   3149          			if (!(fp->flag & FA_WRITE))		/* Check access mode */
   \                     ??f_truncate_1:
   \   0000001C   0x79A1             LDRB     R1,[R4, #+6]
   \   0000001E   0x0789             LSLS     R1,R1,#+30
   \   00000020   0xD400             BMI.N    ??f_truncate_0
   3150          				res = FR_DENIED;
   \   00000022   0x2007             MOVS     R0,#+7
   3151          		}
   3152          	}
   3153          	if (res == FR_OK) {
   \                     ??f_truncate_0:
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD13B             BNE.N    ??f_truncate_2
   3154          		if (fp->fsize > fp->fptr) {
   \   0000002A   0x68A1             LDR      R1,[R4, #+8]
   \   0000002C   0x68E2             LDR      R2,[R4, #+12]
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD230             BCS.N    ??f_truncate_3
   3155          			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
   \   00000032   0x68A0             LDR      R0,[R4, #+8]
   \   00000034   0x60E0             STR      R0,[R4, #+12]
   3156          			fp->flag |= FA__WRITTEN;
   \   00000036   0x79A0             LDRB     R0,[R4, #+6]
   \   00000038   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000003C   0x71A0             STRB     R0,[R4, #+6]
   3157          			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   \   0000003E   0x68A0             LDR      R0,[R4, #+8]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD106             BNE.N    ??f_truncate_4
   3158          				res = remove_chain(fp->fs, fp->sclust);
   \   00000044   0x6921             LDR      R1,[R4, #+16]
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x.... 0x....      BL       remove_chain
   3159          				fp->sclust = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6121             STR      R1,[R4, #+16]
   \   00000050   0xE020             B.N      ??f_truncate_3
   3160          			} else {				/* When truncate a part of the file, remove remaining clusters */
   3161          				ncl = get_fat(fp->fs, fp->clust);
   \                     ??f_truncate_4:
   \   00000052   0x6961             LDR      R1,[R4, #+20]
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0x.... 0x....      BL       get_fat
   \   0000005A   0x0005             MOVS     R5,R0
   3162          				res = FR_OK;
   \   0000005C   0x2000             MOVS     R0,#+0
   3163          				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \   0000005E   0xF115 0x0F01      CMN      R5,#+1
   \   00000062   0xD100             BNE.N    ??f_truncate_5
   \   00000064   0x2001             MOVS     R0,#+1
   3164          				if (ncl == 1) res = FR_INT_ERR;
   \                     ??f_truncate_5:
   \   00000066   0x2D01             CMP      R5,#+1
   \   00000068   0xD100             BNE.N    ??f_truncate_6
   \   0000006A   0x2002             MOVS     R0,#+2
   3165          				if (res == FR_OK && ncl < fp->fs->n_fatent) {
   \                     ??f_truncate_6:
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD110             BNE.N    ??f_truncate_3
   \   00000072   0x6821             LDR      R1,[R4, #+0]
   \   00000074   0x6989             LDR      R1,[R1, #+24]
   \   00000076   0x428D             CMP      R5,R1
   \   00000078   0xD20C             BCS.N    ??f_truncate_3
   3166          					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
   \   0000007A   0xF07F 0x4270      MVNS     R2,#-268435456
   \   0000007E   0x6961             LDR      R1,[R4, #+20]
   \   00000080   0x6820             LDR      R0,[R4, #+0]
   \   00000082   0x.... 0x....      BL       put_fat
   3167          					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD103             BNE.N    ??f_truncate_3
   \   0000008C   0x0029             MOVS     R1,R5
   \   0000008E   0x6820             LDR      R0,[R4, #+0]
   \   00000090   0x.... 0x....      BL       remove_chain
   3168          				}
   3169          			}
   3170          		}
   3171          		if (res != FR_OK) fp->flag |= FA__ERROR;
   \                     ??f_truncate_3:
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD003             BEQ.N    ??f_truncate_2
   \   0000009A   0x79A1             LDRB     R1,[R4, #+6]
   \   0000009C   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   000000A0   0x71A1             STRB     R1,[R4, #+6]
   3172          	}
   3173          
   3174          	LEAVE_FF(fp->fs, res);
   \                     ??f_truncate_2:
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   3175          }
   3176          
   3177          
   3178          
   3179          
   3180          /*-----------------------------------------------------------------------*/
   3181          /* Delete a File or Directory                                            */
   3182          /*-----------------------------------------------------------------------*/
   3183          

   \                                 In section .text, align 2, keep-with-next
   3184          FRESULT f_unlink (
   3185          	const TCHAR *path		/* Pointer to the file or directory path */
   3186          )
   3187          {
   \                     f_unlink:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   3188          	FRESULT res;
   3189          	DIR dj, sdj;
   3190          	BYTE *dir;
   3191          	DWORD dclst;
   3192          	DEF_NAMEBUF;
   3193          
   3194          
   3195          	res = chk_mounted(&path, &dj.fs, 1);
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0xA815             ADD      R0,SP,#+84
   \   0000000A   0x.... 0x....      BL       chk_mounted
   3196          	if (res == FR_OK) {
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD156             BNE.N    ??f_unlink_0
   3197          		INIT_BUF(dj);
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x9006             STR      R0,[SP, #+24]
   \   00000018   0x....             LDR.N    R0,??DataTable11_3
   \   0000001A   0x9007             STR      R0,[SP, #+28]
   3198          		res = follow_path(&dj, path);		/* Follow the file path */
   \   0000001C   0x9915             LDR      R1,[SP, #+84]
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       follow_path
   3199          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3200          			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
   3201          #if _FS_SHARE
   3202          		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
   3203          #endif
   3204          		if (res == FR_OK) {					/* The object is accessible */
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD14B             BNE.N    ??f_unlink_0
   3205          			dir = dj.dir;
   \   0000002A   0x9905             LDR      R1,[SP, #+20]
   3206          			if (!dir) {
   \   0000002C   0x2900             CMP      R1,#+0
   \   0000002E   0xD101             BNE.N    ??f_unlink_1
   3207          				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   \   00000030   0x2006             MOVS     R0,#+6
   \   00000032   0xE003             B.N      ??f_unlink_2
   3208          			} else {
   3209          				if (dir[DIR_Attr] & AM_RDO)
   \                     ??f_unlink_1:
   \   00000034   0x7ACA             LDRB     R2,[R1, #+11]
   \   00000036   0x07D2             LSLS     R2,R2,#+31
   \   00000038   0xD500             BPL.N    ??f_unlink_2
   3210          					res = FR_DENIED;		/* Cannot remove R/O object */
   \   0000003A   0x2007             MOVS     R0,#+7
   3211          			}
   3212          			dclst = LD_CLUST(dir);
   \                     ??f_unlink_2:
   \   0000003C   0x7D4A             LDRB     R2,[R1, #+21]
   \   0000003E   0x7D0B             LDRB     R3,[R1, #+20]
   \   00000040   0xEA53 0x2202      ORRS     R2,R3,R2, LSL #+8
   \   00000044   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000046   0x7ECB             LDRB     R3,[R1, #+27]
   \   00000048   0x7E8C             LDRB     R4,[R1, #+26]
   \   0000004A   0xEA54 0x2303      ORRS     R3,R4,R3, LSL #+8
   \   0000004E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   0xEA53 0x4402      ORRS     R4,R3,R2, LSL #+16
   3213          			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD11E             BNE.N    ??f_unlink_3
   \   0000005A   0x7AC9             LDRB     R1,[R1, #+11]
   \   0000005C   0x06C9             LSLS     R1,R1,#+27
   \   0000005E   0xD51B             BPL.N    ??f_unlink_3
   3214          				if (dclst < 2) {
   \   00000060   0x2C02             CMP      R4,#+2
   \   00000062   0xD201             BCS.N    ??f_unlink_4
   3215          					res = FR_INT_ERR;
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0xE017             B.N      ??f_unlink_3
   3216          				} else {
   3217          					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   \                     ??f_unlink_4:
   \   00000068   0x2224             MOVS     R2,#+36
   \   0000006A   0xA900             ADD      R1,SP,#+0
   \   0000006C   0xA80C             ADD      R0,SP,#+48
   \   0000006E   0x.... 0x....      BL       mem_cpy
   3218          					sdj.sclust = dclst;
   \   00000072   0x940E             STR      R4,[SP, #+56]
   3219          					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   \   00000074   0x2102             MOVS     R1,#+2
   \   00000076   0xA80C             ADD      R0,SP,#+48
   \   00000078   0x.... 0x....      BL       dir_sdi
   3220          					if (res == FR_OK) {
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD10A             BNE.N    ??f_unlink_3
   3221          						res = dir_read(&sdj);
   \   00000082   0xA80C             ADD      R0,SP,#+48
   \   00000084   0x.... 0x....      BL       dir_read
   3222          						if (res == FR_OK			/* Not empty dir */
   3223          #if _FS_RPATH
   3224          						|| dclst == sdj.fs->cdir	/* Current dir */
   3225          #endif
   3226          						) res = FR_DENIED;
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD100             BNE.N    ??f_unlink_5
   \   0000008E   0x2007             MOVS     R0,#+7
   3227          						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   \                     ??f_unlink_5:
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x2804             CMP      R0,#+4
   \   00000094   0xD100             BNE.N    ??f_unlink_3
   \   00000096   0x2000             MOVS     R0,#+0
   3228          					}
   3229          				}
   3230          			}
   3231          			if (res == FR_OK) {
   \                     ??f_unlink_3:
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD111             BNE.N    ??f_unlink_0
   3232          				res = dir_remove(&dj);		/* Remove the directory entry */
   \   0000009E   0xA800             ADD      R0,SP,#+0
   \   000000A0   0x.... 0x....      BL       dir_remove
   3233          				if (res == FR_OK) {
   \   000000A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD10B             BNE.N    ??f_unlink_0
   3234          					if (dclst)				/* Remove the cluster chain if exist */
   \   000000AA   0x2C00             CMP      R4,#+0
   \   000000AC   0xD003             BEQ.N    ??f_unlink_6
   3235          						res = remove_chain(dj.fs, dclst);
   \   000000AE   0x0021             MOVS     R1,R4
   \   000000B0   0x9800             LDR      R0,[SP, #+0]
   \   000000B2   0x.... 0x....      BL       remove_chain
   3236          					if (res == FR_OK) res = sync(dj.fs);
   \                     ??f_unlink_6:
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD102             BNE.N    ??f_unlink_0
   \   000000BC   0x9800             LDR      R0,[SP, #+0]
   \   000000BE   0x.... 0x....      BL       sync
   3237          				}
   3238          			}
   3239          		}
   3240          		FREE_BUF();
   3241          	}
   3242          	LEAVE_FF(dj.fs, res);
   \                     ??f_unlink_0:
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0xB016             ADD      SP,SP,#+88
   \   000000C6   0xBD10             POP      {R4,PC}          ;; return
   3243          }
   3244          
   3245          
   3246          
   3247          
   3248          /*-----------------------------------------------------------------------*/
   3249          /* Create a Directory                                                    */
   3250          /*-----------------------------------------------------------------------*/
   3251          

   \                                 In section .text, align 2, keep-with-next
   3252          FRESULT f_mkdir (
   3253          	const TCHAR *path		/* Pointer to the directory path */
   3254          )
   3255          {
   \                     f_mkdir:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   3256          	FRESULT res;
   3257          	DIR dj;
   3258          	BYTE *dir, n;
   3259          	DWORD dsc, dcl, pcl, tim = get_fattime();
   \   00000006   0x.... 0x....      BL       get_fattime
   \   0000000A   0x0004             MOVS     R4,R0
   3260          	DEF_NAMEBUF;
   3261          
   3262          
   3263          	res = chk_mounted(&path, &dj.fs, 1);
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0xA80C             ADD      R0,SP,#+48
   \   00000012   0x.... 0x....      BL       chk_mounted
   \   00000016   0x0006             MOVS     R6,R0
   3264          	if (res == FR_OK) {
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xF040 0x80DA      BNE.W    ??f_mkdir_0
   3265          		INIT_BUF(dj);
   \   00000020   0xA809             ADD      R0,SP,#+36
   \   00000022   0x9006             STR      R0,[SP, #+24]
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable15
   \   00000028   0x9007             STR      R0,[SP, #+28]
   3266          		res = follow_path(&dj, path);			/* Follow the file path */
   \   0000002A   0x990C             LDR      R1,[SP, #+48]
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       follow_path
   \   00000032   0x0006             MOVS     R6,R0
   3267          		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E00             CMP      R6,#+0
   \   00000038   0xD100             BNE.N    ??f_mkdir_1
   \   0000003A   0x2608             MOVS     R6,#+8
   3268          		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
   3269          			res = FR_INVALID_NAME;
   3270          		if (res == FR_NO_FILE) {				/* Can create a new directory */
   \                     ??f_mkdir_1:
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x2E04             CMP      R6,#+4
   \   00000040   0xF040 0x80C8      BNE.W    ??f_mkdir_0
   3271          			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x.... 0x....      BL       create_chain
   \   0000004C   0x0005             MOVS     R5,R0
   3272          			res = FR_OK;
   \   0000004E   0x2600             MOVS     R6,#+0
   3273          			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD100             BNE.N    ??f_mkdir_2
   \   00000054   0x2607             MOVS     R6,#+7
   3274          			if (dcl == 1) res = FR_INT_ERR;
   \                     ??f_mkdir_2:
   \   00000056   0x2D01             CMP      R5,#+1
   \   00000058   0xD100             BNE.N    ??f_mkdir_3
   \   0000005A   0x2602             MOVS     R6,#+2
   3275          			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \                     ??f_mkdir_3:
   \   0000005C   0xF115 0x0F01      CMN      R5,#+1
   \   00000060   0xD100             BNE.N    ??f_mkdir_4
   \   00000062   0x2601             MOVS     R6,#+1
   3276          			if (res == FR_OK)					/* Flush FAT */
   \                     ??f_mkdir_4:
   \   00000064   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   0x2E00             CMP      R6,#+0
   \   00000068   0xD104             BNE.N    ??f_mkdir_5
   3277          				res = move_window(dj.fs, 0);
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   \   0000006E   0x.... 0x....      BL       move_window
   \   00000072   0x0006             MOVS     R6,R0
   3278          			if (res == FR_OK) {					/* Initialize the new directory table */
   \                     ??f_mkdir_5:
   \   00000074   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000076   0x2E00             CMP      R6,#+0
   \   00000078   0xD175             BNE.N    ??f_mkdir_6
   3279          				dsc = clust2sect(dj.fs, dcl);
   \   0000007A   0x0029             MOVS     R1,R5
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x.... 0x....      BL       clust2sect
   \   00000082   0x0007             MOVS     R7,R0
   3280          				dir = dj.fs->win;
   \   00000084   0x9800             LDR      R0,[SP, #+0]
   \   00000086   0xF110 0x0830      ADDS     R8,R0,#+48
   3281          				mem_set(dir, 0, SS(dj.fs));
   \   0000008A   0xF44F 0x7200      MOV      R2,#+512
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x4640             MOV      R0,R8
   \   00000092   0x.... 0x....      BL       mem_set
   3282          				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
   \   00000096   0x220B             MOVS     R2,#+11
   \   00000098   0x2120             MOVS     R1,#+32
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0x.... 0x....      BL       mem_set
   3283          				dir[DIR_Name] = '.';
   \   000000A0   0x202E             MOVS     R0,#+46
   \   000000A2   0xF888 0x0000      STRB     R0,[R8, #+0]
   3284          				dir[DIR_Attr] = AM_DIR;
   \   000000A6   0x2010             MOVS     R0,#+16
   \   000000A8   0xF888 0x000B      STRB     R0,[R8, #+11]
   3285          				ST_DWORD(dir+DIR_WrtTime, tim);
   \   000000AC   0xF888 0x4016      STRB     R4,[R8, #+22]
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0x0A00             LSRS     R0,R0,#+8
   \   000000B6   0xF888 0x0017      STRB     R0,[R8, #+23]
   \   000000BA   0x0C20             LSRS     R0,R4,#+16
   \   000000BC   0xF888 0x0018      STRB     R0,[R8, #+24]
   \   000000C0   0x0E20             LSRS     R0,R4,#+24
   \   000000C2   0xF888 0x0019      STRB     R0,[R8, #+25]
   3286          				ST_CLUST(dir, dcl);
   \   000000C6   0xF888 0x501A      STRB     R5,[R8, #+26]
   \   000000CA   0x0028             MOVS     R0,R5
   \   000000CC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CE   0x0A00             LSRS     R0,R0,#+8
   \   000000D0   0xF888 0x001B      STRB     R0,[R8, #+27]
   \   000000D4   0x0C28             LSRS     R0,R5,#+16
   \   000000D6   0xF888 0x0014      STRB     R0,[R8, #+20]
   \   000000DA   0x0C28             LSRS     R0,R5,#+16
   \   000000DC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DE   0x0A00             LSRS     R0,R0,#+8
   \   000000E0   0xF888 0x0015      STRB     R0,[R8, #+21]
   3287          				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
   \   000000E4   0x2220             MOVS     R2,#+32
   \   000000E6   0x4641             MOV      R1,R8
   \   000000E8   0xF118 0x0020      ADDS     R0,R8,#+32
   \   000000EC   0x.... 0x....      BL       mem_cpy
   3288          				dir[33] = '.'; pcl = dj.sclust;
   \   000000F0   0x202E             MOVS     R0,#+46
   \   000000F2   0xF888 0x0021      STRB     R0,[R8, #+33]
   \   000000F6   0x9802             LDR      R0,[SP, #+8]
   3289          				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
   \   000000F8   0x9900             LDR      R1,[SP, #+0]
   \   000000FA   0x7809             LDRB     R1,[R1, #+0]
   \   000000FC   0x2903             CMP      R1,#+3
   \   000000FE   0xD104             BNE.N    ??f_mkdir_7
   \   00000100   0x9900             LDR      R1,[SP, #+0]
   \   00000102   0x6A49             LDR      R1,[R1, #+36]
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xD100             BNE.N    ??f_mkdir_7
   3290          					pcl = 0;
   \   00000108   0x2000             MOVS     R0,#+0
   3291          				ST_CLUST(dir+SZ_DIR, pcl);
   \                     ??f_mkdir_7:
   \   0000010A   0xF888 0x003A      STRB     R0,[R8, #+58]
   \   0000010E   0x0001             MOVS     R1,R0
   \   00000110   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000112   0x0A09             LSRS     R1,R1,#+8
   \   00000114   0xF888 0x103B      STRB     R1,[R8, #+59]
   \   00000118   0x0C01             LSRS     R1,R0,#+16
   \   0000011A   0xF888 0x1034      STRB     R1,[R8, #+52]
   \   0000011E   0x0C00             LSRS     R0,R0,#+16
   \   00000120   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000122   0x0A00             LSRS     R0,R0,#+8
   \   00000124   0xF888 0x0035      STRB     R0,[R8, #+53]
   3292          				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   \   00000128   0x9800             LDR      R0,[SP, #+0]
   \   0000012A   0xF890 0x9002      LDRB     R9,[R0, #+2]
   \   0000012E   0xE007             B.N      ??f_mkdir_8
   3293          					dj.fs->winsect = dsc++;
   3294          					dj.fs->wflag = 1;
   3295          					res = move_window(dj.fs, 0);
   3296          					if (res != FR_OK) break;
   3297          					mem_set(dir, 0, SS(dj.fs));
   \                     ??f_mkdir_9:
   \   00000130   0xF44F 0x7200      MOV      R2,#+512
   \   00000134   0x2100             MOVS     R1,#+0
   \   00000136   0x4640             MOV      R0,R8
   \   00000138   0x.... 0x....      BL       mem_set
   \   0000013C   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \                     ??f_mkdir_8:
   \   00000140   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000144   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000148   0xD00D             BEQ.N    ??f_mkdir_6
   \   0000014A   0x9800             LDR      R0,[SP, #+0]
   \   0000014C   0x62C7             STR      R7,[R0, #+44]
   \   0000014E   0x1C7F             ADDS     R7,R7,#+1
   \   00000150   0x9800             LDR      R0,[SP, #+0]
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0x7101             STRB     R1,[R0, #+4]
   \   00000156   0x2100             MOVS     R1,#+0
   \   00000158   0x9800             LDR      R0,[SP, #+0]
   \   0000015A   0x.... 0x....      BL       move_window
   \   0000015E   0x0006             MOVS     R6,R0
   \   00000160   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000162   0x2E00             CMP      R6,#+0
   \   00000164   0xD0E4             BEQ.N    ??f_mkdir_9
   3298          				}
   3299          			}
   3300          			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
   \                     ??f_mkdir_6:
   \   00000166   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000168   0x2E00             CMP      R6,#+0
   \   0000016A   0xD103             BNE.N    ??f_mkdir_10
   \   0000016C   0xA800             ADD      R0,SP,#+0
   \   0000016E   0x.... 0x....      BL       dir_register
   \   00000172   0x0006             MOVS     R6,R0
   3301          			if (res != FR_OK) {
   \                     ??f_mkdir_10:
   \   00000174   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000176   0x2E00             CMP      R6,#+0
   \   00000178   0xD004             BEQ.N    ??f_mkdir_11
   3302          				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
   \   0000017A   0x0029             MOVS     R1,R5
   \   0000017C   0x9800             LDR      R0,[SP, #+0]
   \   0000017E   0x.... 0x....      BL       remove_chain
   \   00000182   0xE027             B.N      ??f_mkdir_0
   3303          			} else {
   3304          				dir = dj.dir;
   \                     ??f_mkdir_11:
   \   00000184   0xF8DD 0x8014      LDR      R8,[SP, #+20]
   3305          				dir[DIR_Attr] = AM_DIR;				/* Attribute */
   \   00000188   0x2010             MOVS     R0,#+16
   \   0000018A   0xF888 0x000B      STRB     R0,[R8, #+11]
   3306          				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
   \   0000018E   0xF888 0x4016      STRB     R4,[R8, #+22]
   \   00000192   0x0020             MOVS     R0,R4
   \   00000194   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000196   0x0A00             LSRS     R0,R0,#+8
   \   00000198   0xF888 0x0017      STRB     R0,[R8, #+23]
   \   0000019C   0x0C20             LSRS     R0,R4,#+16
   \   0000019E   0xF888 0x0018      STRB     R0,[R8, #+24]
   \   000001A2   0x0E20             LSRS     R0,R4,#+24
   \   000001A4   0xF888 0x0019      STRB     R0,[R8, #+25]
   3307          				ST_CLUST(dir, dcl);					/* Table start cluster */
   \   000001A8   0xF888 0x501A      STRB     R5,[R8, #+26]
   \   000001AC   0x0028             MOVS     R0,R5
   \   000001AE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001B0   0x0A00             LSRS     R0,R0,#+8
   \   000001B2   0xF888 0x001B      STRB     R0,[R8, #+27]
   \   000001B6   0x0C28             LSRS     R0,R5,#+16
   \   000001B8   0xF888 0x0014      STRB     R0,[R8, #+20]
   \   000001BC   0x0C28             LSRS     R0,R5,#+16
   \   000001BE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001C0   0x0A00             LSRS     R0,R0,#+8
   \   000001C2   0xF888 0x0015      STRB     R0,[R8, #+21]
   3308          				dj.fs->wflag = 1;
   \   000001C6   0x9800             LDR      R0,[SP, #+0]
   \   000001C8   0x2101             MOVS     R1,#+1
   \   000001CA   0x7101             STRB     R1,[R0, #+4]
   3309          				res = sync(dj.fs);
   \   000001CC   0x9800             LDR      R0,[SP, #+0]
   \   000001CE   0x.... 0x....      BL       sync
   \   000001D2   0x0006             MOVS     R6,R0
   3310          			}
   3311          		}
   3312          		FREE_BUF();
   3313          	}
   3314          
   3315          	LEAVE_FF(dj.fs, res);
   \                     ??f_mkdir_0:
   \   000001D4   0x0030             MOVS     R0,R6
   \   000001D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D8   0xB00D             ADD      SP,SP,#+52
   \   000001DA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   3316          }
   3317          
   3318          
   3319          
   3320          
   3321          /*-----------------------------------------------------------------------*/
   3322          /* Change Attribute                                                      */
   3323          /*-----------------------------------------------------------------------*/
   3324          

   \                                 In section .text, align 2, keep-with-next
   3325          FRESULT f_chmod (
   3326          	const TCHAR *path,	/* Pointer to the file path */
   3327          	BYTE value,			/* Attribute bits */
   3328          	BYTE mask			/* Attribute mask to change */
   3329          )
   3330          {
   \                     f_chmod:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0014             MOVS     R4,R2
   3331          	FRESULT res;
   3332          	DIR dj;
   3333          	BYTE *dir;
   3334          	DEF_NAMEBUF;
   3335          
   3336          
   3337          	res = chk_mounted(&path, &dj.fs, 1);
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xA903             ADD      R1,SP,#+12
   \   0000000C   0xA80C             ADD      R0,SP,#+48
   \   0000000E   0x.... 0x....      BL       chk_mounted
   3338          	if (res == FR_OK) {
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD11D             BNE.N    ??f_chmod_0
   3339          		INIT_BUF(dj);
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x9009             STR      R0,[SP, #+36]
   \   0000001C   0x....             LDR.N    R0,??DataTable15
   \   0000001E   0x900A             STR      R0,[SP, #+40]
   3340          		res = follow_path(&dj, path);		/* Follow the file path */
   \   00000020   0x990C             LDR      R1,[SP, #+48]
   \   00000022   0xA803             ADD      R0,SP,#+12
   \   00000024   0x.... 0x....      BL       follow_path
   3341          		FREE_BUF();
   3342          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3343          			res = FR_INVALID_NAME;
   3344          		if (res == FR_OK) {
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD112             BNE.N    ??f_chmod_0
   3345          			dir = dj.dir;
   \   0000002E   0x9808             LDR      R0,[SP, #+32]
   3346          			if (!dir) {						/* Is it a root directory? */
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE.N    ??f_chmod_1
   3347          				res = FR_INVALID_NAME;
   \   00000034   0x2006             MOVS     R0,#+6
   \   00000036   0xE00D             B.N      ??f_chmod_0
   3348          			} else {						/* File or sub directory */
   3349          				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
   \                     ??f_chmod_1:
   \   00000038   0xF014 0x0427      ANDS     R4,R4,#0x27
   3350          				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
   \   0000003C   0xEA14 0x0105      ANDS     R1,R4,R5
   \   00000040   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000042   0x43A2             BICS     R2,R2,R4
   \   00000044   0x4311             ORRS     R1,R2,R1
   \   00000046   0x72C1             STRB     R1,[R0, #+11]
   3351          				dj.fs->wflag = 1;
   \   00000048   0x9803             LDR      R0,[SP, #+12]
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x7101             STRB     R1,[R0, #+4]
   3352          				res = sync(dj.fs);
   \   0000004E   0x9803             LDR      R0,[SP, #+12]
   \   00000050   0x.... 0x....      BL       sync
   3353          			}
   3354          		}
   3355          	}
   3356          
   3357          	LEAVE_FF(dj.fs, res);
   \                     ??f_chmod_0:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xB00D             ADD      SP,SP,#+52
   \   00000058   0xBD30             POP      {R4,R5,PC}       ;; return
   3358          }
   3359          
   3360          
   3361          
   3362          
   3363          /*-----------------------------------------------------------------------*/
   3364          /* Change Timestamp                                                      */
   3365          /*-----------------------------------------------------------------------*/
   3366          

   \                                 In section .text, align 2, keep-with-next
   3367          FRESULT f_utime (
   3368          	const TCHAR *path,	/* Pointer to the file/directory name */
   3369          	const FILINFO *fno	/* Pointer to the time stamp to be set */
   3370          )
   3371          {
   \                     f_utime:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x000C             MOVS     R4,R1
   3372          	FRESULT res;
   3373          	DIR dj;
   3374          	BYTE *dir;
   3375          	DEF_NAMEBUF;
   3376          
   3377          
   3378          	res = chk_mounted(&path, &dj.fs, 1);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xA903             ADD      R1,SP,#+12
   \   0000000A   0xA80D             ADD      R0,SP,#+52
   \   0000000C   0x.... 0x....      BL       chk_mounted
   3379          	if (res == FR_OK) {
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD121             BNE.N    ??f_utime_0
   3380          		INIT_BUF(dj);
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x9009             STR      R0,[SP, #+36]
   \   0000001A   0x....             LDR.N    R0,??DataTable15
   \   0000001C   0x900A             STR      R0,[SP, #+40]
   3381          		res = follow_path(&dj, path);	/* Follow the file path */
   \   0000001E   0x990D             LDR      R1,[SP, #+52]
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x.... 0x....      BL       follow_path
   3382          		FREE_BUF();
   3383          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   3384          			res = FR_INVALID_NAME;
   3385          		if (res == FR_OK) {
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD116             BNE.N    ??f_utime_0
   3386          			dir = dj.dir;
   \   0000002C   0x9808             LDR      R0,[SP, #+32]
   3387          			if (!dir) {					/* Root directory */
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD101             BNE.N    ??f_utime_1
   3388          				res = FR_INVALID_NAME;
   \   00000032   0x2006             MOVS     R0,#+6
   \   00000034   0xE011             B.N      ??f_utime_0
   3389          			} else {					/* File or sub-directory */
   3390          				ST_WORD(dir+DIR_WrtTime, fno->ftime);
   \                     ??f_utime_1:
   \   00000036   0x88E1             LDRH     R1,[R4, #+6]
   \   00000038   0x7581             STRB     R1,[R0, #+22]
   \   0000003A   0x88E1             LDRH     R1,[R4, #+6]
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x0A09             LSRS     R1,R1,#+8
   \   00000040   0x75C1             STRB     R1,[R0, #+23]
   3391          				ST_WORD(dir+DIR_WrtDate, fno->fdate);
   \   00000042   0x88A1             LDRH     R1,[R4, #+4]
   \   00000044   0x7601             STRB     R1,[R0, #+24]
   \   00000046   0x88A1             LDRH     R1,[R4, #+4]
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x0A09             LSRS     R1,R1,#+8
   \   0000004C   0x7641             STRB     R1,[R0, #+25]
   3392          				dj.fs->wflag = 1;
   \   0000004E   0x9803             LDR      R0,[SP, #+12]
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x7101             STRB     R1,[R0, #+4]
   3393          				res = sync(dj.fs);
   \   00000054   0x9803             LDR      R0,[SP, #+12]
   \   00000056   0x.... 0x....      BL       sync
   3394          			}
   3395          		}
   3396          	}
   3397          
   3398          	LEAVE_FF(dj.fs, res);
   \                     ??f_utime_0:
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0xB00E             ADD      SP,SP,#+56
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return
   3399          }
   3400          
   3401          
   3402          
   3403          
   3404          /*-----------------------------------------------------------------------*/
   3405          /* Rename File/Directory                                                 */
   3406          /*-----------------------------------------------------------------------*/
   3407          

   \                                 In section .text, align 2, keep-with-next
   3408          FRESULT f_rename (
   3409          	const TCHAR *path_old,	/* Pointer to the old name */
   3410          	const TCHAR *path_new	/* Pointer to the new name */
   3411          )
   3412          {
   \                     f_rename:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB09C             SUB      SP,SP,#+112
   \   00000004   0x000C             MOVS     R4,R1
   3413          	FRESULT res;
   3414          	DIR djo, djn;
   3415          	BYTE buf[21], *dir;
   3416          	DWORD dw;
   3417          	DEF_NAMEBUF;
   3418          
   3419          
   3420          	res = chk_mounted(&path_old, &djo.fs, 1);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xA909             ADD      R1,SP,#+36
   \   0000000A   0xA81C             ADD      R0,SP,#+112
   \   0000000C   0x.... 0x....      BL       chk_mounted
   \   00000010   0x0005             MOVS     R5,R0
   3421          	if (res == FR_OK) {
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xF040 0x8093      BNE.W    ??f_rename_0
   3422          		djn.fs = djo.fs;
   \   0000001A   0x9809             LDR      R0,[SP, #+36]
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   3423          		INIT_BUF(djo);
   \   0000001E   0xA812             ADD      R0,SP,#+72
   \   00000020   0x900F             STR      R0,[SP, #+60]
   \   00000022   0x....             LDR.N    R0,??DataTable15
   \   00000024   0x9010             STR      R0,[SP, #+64]
   3424          		res = follow_path(&djo, path_old);		/* Check old object */
   \   00000026   0x991C             LDR      R1,[SP, #+112]
   \   00000028   0xA809             ADD      R0,SP,#+36
   \   0000002A   0x.... 0x....      BL       follow_path
   \   0000002E   0x0005             MOVS     R5,R0
   3425          		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
   3426          			res = FR_INVALID_NAME;
   3427          #if _FS_SHARE
   3428          		if (res == FR_OK) res = chk_lock(&djo, 2);
   3429          #endif
   3430          		if (res == FR_OK) {						/* Old object is found */
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xF040 0x8084      BNE.W    ??f_rename_0
   3431          			if (!djo.dir) {						/* Is root dir? */
   \   00000038   0x980E             LDR      R0,[SP, #+56]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??f_rename_1
   3432          				res = FR_NO_FILE;
   \   0000003E   0x2504             MOVS     R5,#+4
   \   00000040   0xE07E             B.N      ??f_rename_0
   3433          			} else {
   3434          				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
   \                     ??f_rename_1:
   \   00000042   0x2215             MOVS     R2,#+21
   \   00000044   0x980E             LDR      R0,[SP, #+56]
   \   00000046   0xF110 0x010B      ADDS     R1,R0,#+11
   \   0000004A   0xA815             ADD      R0,SP,#+84
   \   0000004C   0x.... 0x....      BL       mem_cpy
   3435          				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
   \   00000050   0x2224             MOVS     R2,#+36
   \   00000052   0xA909             ADD      R1,SP,#+36
   \   00000054   0xA800             ADD      R0,SP,#+0
   \   00000056   0x.... 0x....      BL       mem_cpy
   3436          				res = follow_path(&djn, path_new);
   \   0000005A   0x0021             MOVS     R1,R4
   \   0000005C   0xA800             ADD      R0,SP,#+0
   \   0000005E   0x.... 0x....      BL       follow_path
   \   00000062   0x0005             MOVS     R5,R0
   3437          				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD100             BNE.N    ??f_rename_2
   \   0000006A   0x2508             MOVS     R5,#+8
   3438          				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
   \                     ??f_rename_2:
   \   0000006C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006E   0x2D04             CMP      R5,#+4
   \   00000070   0xD166             BNE.N    ??f_rename_0
   3439          /* Start critical section that any interruption or error can cause cross-link */
   3440          					res = dir_register(&djn);			/* Register the new entry */
   \   00000072   0xA800             ADD      R0,SP,#+0
   \   00000074   0x.... 0x....      BL       dir_register
   \   00000078   0x0005             MOVS     R5,R0
   3441          					if (res == FR_OK) {
   \   0000007A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007C   0x2D00             CMP      R5,#+0
   \   0000007E   0xD15F             BNE.N    ??f_rename_0
   3442          						dir = djn.dir;					/* Copy object information except for name */
   \   00000080   0x9C05             LDR      R4,[SP, #+20]
   3443          						mem_cpy(dir+13, buf+2, 19);
   \   00000082   0x2213             MOVS     R2,#+19
   \   00000084   0xF10D 0x0156      ADD      R1,SP,#+86
   \   00000088   0xF114 0x000D      ADDS     R0,R4,#+13
   \   0000008C   0x.... 0x....      BL       mem_cpy
   3444          						dir[DIR_Attr] = buf[0] | AM_ARC;
   \   00000090   0xF89D 0x0054      LDRB     R0,[SP, #+84]
   \   00000094   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000098   0x72E0             STRB     R0,[R4, #+11]
   3445          						djo.fs->wflag = 1;
   \   0000009A   0x9809             LDR      R0,[SP, #+36]
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x7101             STRB     R1,[R0, #+4]
   3446          						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
   \   000000A0   0x980B             LDR      R0,[SP, #+44]
   \   000000A2   0x9902             LDR      R1,[SP, #+8]
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD03D             BEQ.N    ??f_rename_3
   \   000000A8   0x7AE0             LDRB     R0,[R4, #+11]
   \   000000AA   0x06C0             LSLS     R0,R0,#+27
   \   000000AC   0xD53A             BPL.N    ??f_rename_3
   3447          							dw = clust2sect(djn.fs, LD_CLUST(dir));
   \   000000AE   0x7D60             LDRB     R0,[R4, #+21]
   \   000000B0   0x7D21             LDRB     R1,[R4, #+20]
   \   000000B2   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000B6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B8   0x7EE1             LDRB     R1,[R4, #+27]
   \   000000BA   0x7EA2             LDRB     R2,[R4, #+26]
   \   000000BC   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   000000C0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C2   0xEA51 0x4100      ORRS     R1,R1,R0, LSL #+16
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x.... 0x....      BL       clust2sect
   3448          							if (!dw) {
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD101             BNE.N    ??f_rename_4
   3449          								res = FR_INT_ERR;
   \   000000D0   0x2502             MOVS     R5,#+2
   \   000000D2   0xE027             B.N      ??f_rename_3
   3450          							} else {
   3451          								res = move_window(djn.fs, dw);
   \                     ??f_rename_4:
   \   000000D4   0x0001             MOVS     R1,R0
   \   000000D6   0x9800             LDR      R0,[SP, #+0]
   \   000000D8   0x.... 0x....      BL       move_window
   \   000000DC   0x0005             MOVS     R5,R0
   3452          								dir = djn.fs->win+SZ_DIR;	/* .. entry */
   \   000000DE   0x9800             LDR      R0,[SP, #+0]
   \   000000E0   0xF110 0x0450      ADDS     R4,R0,#+80
   3453          								if (res == FR_OK && dir[1] == '.') {
   \   000000E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E6   0x2D00             CMP      R5,#+0
   \   000000E8   0xD11C             BNE.N    ??f_rename_3
   \   000000EA   0x7860             LDRB     R0,[R4, #+1]
   \   000000EC   0x282E             CMP      R0,#+46
   \   000000EE   0xD119             BNE.N    ??f_rename_3
   3454          									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
   \   000000F0   0x9800             LDR      R0,[SP, #+0]
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x2803             CMP      R0,#+3
   \   000000F6   0xD106             BNE.N    ??f_rename_5
   \   000000F8   0x9802             LDR      R0,[SP, #+8]
   \   000000FA   0x9900             LDR      R1,[SP, #+0]
   \   000000FC   0x6A49             LDR      R1,[R1, #+36]
   \   000000FE   0x4288             CMP      R0,R1
   \   00000100   0xD101             BNE.N    ??f_rename_5
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0xE000             B.N      ??f_rename_6
   \                     ??f_rename_5:
   \   00000106   0x9802             LDR      R0,[SP, #+8]
   3455          									ST_CLUST(dir, dw);
   \                     ??f_rename_6:
   \   00000108   0x76A0             STRB     R0,[R4, #+26]
   \   0000010A   0x0001             MOVS     R1,R0
   \   0000010C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000010E   0x0A09             LSRS     R1,R1,#+8
   \   00000110   0x76E1             STRB     R1,[R4, #+27]
   \   00000112   0x0C01             LSRS     R1,R0,#+16
   \   00000114   0x7521             STRB     R1,[R4, #+20]
   \   00000116   0x0C00             LSRS     R0,R0,#+16
   \   00000118   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000011A   0x0A00             LSRS     R0,R0,#+8
   \   0000011C   0x7560             STRB     R0,[R4, #+21]
   3456          									djn.fs->wflag = 1;
   \   0000011E   0x9800             LDR      R0,[SP, #+0]
   \   00000120   0x2101             MOVS     R1,#+1
   \   00000122   0x7101             STRB     R1,[R0, #+4]
   3457          								}
   3458          							}
   3459          						}
   3460          						if (res == FR_OK) {
   \                     ??f_rename_3:
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD10A             BNE.N    ??f_rename_0
   3461          							res = dir_remove(&djo);		/* Remove old entry */
   \   0000012A   0xA809             ADD      R0,SP,#+36
   \   0000012C   0x.... 0x....      BL       dir_remove
   \   00000130   0x0005             MOVS     R5,R0
   3462          							if (res == FR_OK)
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x2D00             CMP      R5,#+0
   \   00000136   0xD103             BNE.N    ??f_rename_0
   3463          								res = sync(djo.fs);
   \   00000138   0x9809             LDR      R0,[SP, #+36]
   \   0000013A   0x.... 0x....      BL       sync
   \   0000013E   0x0005             MOVS     R5,R0
   3464          						}
   3465          					}
   3466          /* End critical section */
   3467          				}
   3468          			}
   3469          		}
   3470          		FREE_BUF();
   3471          	}
   3472          	LEAVE_FF(djo.fs, res);
   \                     ??f_rename_0:
   \   00000140   0x0028             MOVS     R0,R5
   \   00000142   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000144   0xB01D             ADD      SP,SP,#+116
   \   00000146   0xBD30             POP      {R4,R5,PC}       ;; return
   3473          }
   3474          
   3475          #endif /* !_FS_READONLY */
   3476          #endif /* _FS_MINIMIZE == 0 */
   3477          #endif /* _FS_MINIMIZE <= 1 */
   3478          #endif /* _FS_MINIMIZE <= 2 */
   3479          
   3480          
   3481          
   3482          /*-----------------------------------------------------------------------*/
   3483          /* Forward data to the stream directly (available on only tiny cfg)      */
   3484          /*-----------------------------------------------------------------------*/
   3485          #if _USE_FORWARD && _FS_TINY
   3486          
   3487          FRESULT f_forward (
   3488          	FIL *fp, 						/* Pointer to the file object */
   3489          	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
   3490          	UINT btr,						/* Number of bytes to forward */
   3491          	UINT *bf						/* Pointer to number of bytes forwarded */
   3492          )
   3493          {
   3494          	FRESULT res;
   3495          	DWORD remain, clst, sect;
   3496          	UINT rcnt;
   3497          	BYTE csect;
   3498          
   3499          
   3500          	*bf = 0;	/* Initialize byte counter */
   3501          
   3502          	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   3503          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   3504          	if (fp->flag & FA__ERROR)						/* Check error flag */
   3505          		LEAVE_FF(fp->fs, FR_INT_ERR);
   3506          	if (!(fp->flag & FA_READ))						/* Check access mode */
   3507          		LEAVE_FF(fp->fs, FR_DENIED);
   3508          
   3509          	remain = fp->fsize - fp->fptr;
   3510          	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   3511          
   3512          	for ( ;  btr && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
   3513          		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
   3514          		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   3515          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   3516          			if (!csect) {							/* On the cluster boundary? */
   3517          				clst = (fp->fptr == 0) ?			/* On the top of the file? */
   3518          					fp->sclust : get_fat(fp->fs, fp->clust);
   3519          				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   3520          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   3521          				fp->clust = clst;					/* Update current cluster */
   3522          			}
   3523          		}
   3524          		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
   3525          		if (!sect) ABORT(fp->fs, FR_INT_ERR);
   3526          		sect += csect;
   3527          		if (move_window(fp->fs, sect))				/* Move sector window */
   3528          			ABORT(fp->fs, FR_DISK_ERR);
   3529          		fp->dsect = sect;
   3530          		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
   3531          		if (rcnt > btr) rcnt = btr;
   3532          		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
   3533          		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
   3534          	}
   3535          
   3536          	LEAVE_FF(fp->fs, FR_OK);
   3537          }
   3538          #endif /* _USE_FORWARD */
   3539          
   3540          
   3541          
   3542          #if _USE_MKFS && !_FS_READONLY
   3543          /*-----------------------------------------------------------------------*/
   3544          /* Create File System on the Drive                                       */
   3545          /*-----------------------------------------------------------------------*/
   3546          #define N_ROOTDIR	512		/* Number of root dir entries for FAT12/16 */
   3547          #define N_FATS		1		/* Number of FAT copies (1 or 2) */
   3548          
   3549          
   3550          FRESULT f_mkfs (
   3551          	BYTE drv,		/* Logical drive number */
   3552          	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
   3553          	UINT au			/* Allocation unit size [bytes] */
   3554          )
   3555          {
   3556          	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
   3557          	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
   3558          	BYTE fmt, md, *tbl;
   3559          	DWORD n_clst, vs, n, wsect;
   3560          	UINT i;
   3561          	DWORD b_vol, b_fat, b_dir, b_data;	/* Offset (LBA) */
   3562          	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
   3563          	FATFS *fs;
   3564          	DSTATUS stat;
   3565          
   3566          
   3567          	/* Check mounted drive and clear work area */
   3568          	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   3569          	fs = FatFs[drv];
   3570          	if (!fs) return FR_NOT_ENABLED;
   3571          	fs->fs_type = 0;
   3572          	drv = LD2PD(drv);
   3573          
   3574          	/* Get disk statics */
   3575          	stat = disk_initialize(drv);
   3576          	if (stat & STA_NOINIT) return FR_NOT_READY;
   3577          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   3578          #if _MAX_SS != 512					/* Get disk sector size */
   3579          	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
   3580          		return FR_DISK_ERR;
   3581          #endif
   3582          	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
   3583          		return FR_DISK_ERR;
   3584          	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
   3585          	n_vol -= b_vol;
   3586          	if (au & (au - 1)) au = 0;	/* Check validity of the AU size */
   3587          	if (!au) {					/* AU auto selection */
   3588          		vs = n_vol / (2000 / (SS(fs) / 512));
   3589          		for (i = 0; vs < vst[i]; i++) ;
   3590          		au = cst[i];
   3591          	}
   3592          	au /= SS(fs);		/* Number of sectors per cluster */
   3593          	if (au == 0) au = 1;
   3594          	if (au > 128) au = 128;
   3595          
   3596          	/* Pre-compute number of clusters and FAT syb-type */
   3597          	n_clst = n_vol / au;
   3598          	fmt = FS_FAT12;
   3599          	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
   3600          	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
   3601          
   3602          	/* Determine offset and size of FAT structure */
   3603          	if (fmt == FS_FAT32) {
   3604          		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
   3605          		n_rsv = 32;
   3606          		n_dir = 0;
   3607          	} else {
   3608          		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
   3609          		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
   3610          		n_rsv = 1;
   3611          		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
   3612          	}
   3613          	b_fat = b_vol + n_rsv;				/* FAT area start sector */
   3614          	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
   3615          	b_data = b_dir + n_dir;				/* Data area start sector */
   3616          	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
   3617          
   3618          	/* Align data start sector to erase block boundary (for flash memory media) */
   3619          	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
   3620          	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
   3621          	n = (n - b_data) / N_FATS;
   3622          	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
   3623          		n_rsv += n;
   3624          		b_fat += n;
   3625          	} else {					/* FAT12/16: Expand FAT size */
   3626          		n_fat += n;
   3627          	}
   3628          
   3629          	/* Determine number of clusters and final check of validity of the FAT sub-type */
   3630          	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
   3631          	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
   3632          		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
   3633          		return FR_MKFS_ABORTED;
   3634          
   3635          	/* Create partition table if required */
   3636          	if (sfd) {	/* No patition table (SFD) */
   3637          		md = 0xF0;
   3638          	} else {	/* With patition table (FDISK) */
   3639          		DWORD n_disk = b_vol + n_vol;
   3640          
   3641          		mem_set(fs->win, 0, SS(fs));
   3642          		tbl = fs->win+MBR_Table;
   3643          		ST_DWORD(tbl, 0x00010180);			/* Partition start in CHS */
   3644          		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
   3645          			n_disk = n_disk / 63 / 255;
   3646          			tbl[7] = (BYTE)n_disk;
   3647          			tbl[6] = (BYTE)((n_disk >> 2) | 63);
   3648          		} else {
   3649          			ST_WORD(&tbl[6], 0xFFFF);	/* CHS saturated */
   3650          		}
   3651          		tbl[5] = 254;
   3652          		if (fmt != FS_FAT32)				/* System ID */
   3653          			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
   3654          		else
   3655          			tbl[4] = 0x0c;
   3656          		ST_DWORD(tbl+8, 63);				/* Partition start in LBA */
   3657          		ST_DWORD(tbl+12, n_vol);			/* Partition size in LBA */
   3658          		ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
   3659          		if (disk_write(drv, fs->win, 0, 1) != RES_OK)	/* Put the MBR into first physical sector */
   3660          			return FR_DISK_ERR;
   3661          		md = 0xF8;
   3662          	}
   3663          
   3664          	/* Create volume boot record */
   3665          	tbl = fs->win;							/* Clear sector */
   3666          	mem_set(tbl, 0, SS(fs));
   3667          	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
   3668          	i = SS(fs);								/* Sector size */
   3669          	ST_WORD(tbl+BPB_BytsPerSec, i);
   3670          	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
   3671          	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
   3672          	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
   3673          	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
   3674          	ST_WORD(tbl+BPB_RootEntCnt, i);
   3675          	if (n_vol < 0x10000) {					/* Number of total sectors */
   3676          		ST_WORD(tbl+BPB_TotSec16, n_vol);
   3677          	} else {
   3678          		ST_DWORD(tbl+BPB_TotSec32, n_vol);
   3679          	}
   3680          	tbl[BPB_Media] = md;					/* Media descriptor */
   3681          	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
   3682          	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
   3683          	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
   3684          	n = get_fattime();						/* Use current time as VSN */
   3685          	if (fmt == FS_FAT32) {
   3686          		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
   3687          		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
   3688          		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
   3689          		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
   3690          		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
   3691          		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
   3692          		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
   3693          		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   3694          	} else {
   3695          		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
   3696          		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
   3697          		tbl[BS_DrvNum] = 0x80;				/* Drive number */
   3698          		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
   3699          		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   3700          	}
   3701          	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
   3702          	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Write VBR */
   3703          		return FR_DISK_ERR;
   3704          	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
   3705          		disk_write(drv, tbl, b_vol + 6, 1);
   3706          
   3707          	/* Initialize FAT area */
   3708          	wsect = b_fat;
   3709          	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
   3710          		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
   3711          		n = md;								/* Media descriptor byte */
   3712          		if (fmt != FS_FAT32) {
   3713          			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
   3714          			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
   3715          		} else {
   3716          			n |= 0xFFFFFF00;
   3717          			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
   3718          			ST_DWORD(tbl+4, 0xFFFFFFFF);
   3719          			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
   3720          		}
   3721          		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   3722          			return FR_DISK_ERR;
   3723          		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
   3724          		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
   3725          			if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   3726          				return FR_DISK_ERR;
   3727          		}
   3728          	}
   3729          
   3730          	/* Initialize root directory */
   3731          	i = (fmt == FS_FAT32) ? au : n_dir;
   3732          	do {
   3733          		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   3734          			return FR_DISK_ERR;
   3735          	} while (--i);
   3736          
   3737          #if _USE_ERASE	/* Erase data area if needed */
   3738          	{
   3739          		DWORD eb[2];
   3740          
   3741          		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
   3742          		disk_ioctl(drv, CTRL_ERASE_SECTOR, eb);
   3743          	}
   3744          #endif
   3745          
   3746          	/* Create FSInfo if needed */
   3747          	if (fmt == FS_FAT32) {
   3748          		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
   3749          		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
   3750          		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   3751          		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
   3752          		ST_WORD(tbl+BS_55AA, 0xAA55);
   3753          		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
   3754          		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
   3755          	}
   3756          
   3757          	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
   3758          }
   3759          
   3760          #endif /* _USE_MKFS && !_FS_READONLY */
   3761          
   3762          
   3763          
   3764          
   3765          #if _USE_STRFUNC
   3766          /*-----------------------------------------------------------------------*/
   3767          /* Get a string from the file                                            */
   3768          /*-----------------------------------------------------------------------*/
   3769          TCHAR* f_gets (
   3770          	TCHAR* buff,	/* Pointer to the string buffer to read */
   3771          	int len,		/* Size of string buffer (characters) */
   3772          	FIL* fil		/* Pointer to the file object */
   3773          )
   3774          {
   3775          	int n = 0;
   3776          	TCHAR c, *p = buff;
   3777          	BYTE s[2];
   3778          	UINT rc;
   3779          
   3780          
   3781          	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   3782          		f_read(fil, s, 1, &rc);
   3783          		if (rc != 1) break;			/* Break on EOF or error */
   3784          		c = s[0];
   3785          #if _LFN_UNICODE					/* Read a character in UTF-8 encoding */
   3786          		if (c >= 0x80) {
   3787          			if (c < 0xC0) continue;	/* Skip stray trailer */
   3788          			if (c < 0xE0) {			/* Two-byte sequense */
   3789          				f_read(fil, s, 1, &rc);
   3790          				if (rc != 1) break;
   3791          				c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
   3792          				if (c < 0x80) c = '?';
   3793          			} else {
   3794          				if (c < 0xF0) {		/* Three-byte sequense */
   3795          					f_read(fil, s, 2, &rc);
   3796          					if (rc != 2) break;
   3797          					c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
   3798          					if (c < 0x800) c = '?';
   3799          				} else {			/* Reject four-byte sequense */
   3800          					c = '?';
   3801          				}
   3802          			}
   3803          		}
   3804          #endif
   3805          #if _USE_STRFUNC >= 2
   3806          		if (c == '\r') continue;	/* Strip '\r' */
   3807          #endif
   3808          		*p++ = c;
   3809          		n++;
   3810          		if (c == '\n') break;		/* Break on EOL */
   3811          	}
   3812          	*p = 0;
   3813          	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   3814          }
   3815          
   3816          
   3817          
   3818          #if !_FS_READONLY
   3819          #include <stdarg.h>
   3820          /*-----------------------------------------------------------------------*/
   3821          /* Put a character to the file                                           */
   3822          /*-----------------------------------------------------------------------*/
   3823          int f_putc (
   3824          	TCHAR c,	/* A character to be output */
   3825          	FIL* fil	/* Pointer to the file object */
   3826          )
   3827          {
   3828          	UINT bw, btw;
   3829          	BYTE s[3];
   3830          
   3831          
   3832          #if _USE_STRFUNC >= 2
   3833          	if (c == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
   3834          #endif
   3835          
   3836          #if _LFN_UNICODE	/* Write the character in UTF-8 encoding */
   3837          	if (c < 0x80) {			/* 7-bit */
   3838          		s[0] = (BYTE)c;
   3839          		btw = 1;
   3840          	} else {
   3841          		if (c < 0x800) {	/* 11-bit */
   3842          			s[0] = (BYTE)(0xC0 | (c >> 6));
   3843          			s[1] = (BYTE)(0x80 | (c & 0x3F));
   3844          			btw = 2;
   3845          		} else {			/* 16-bit */
   3846          			s[0] = (BYTE)(0xE0 | (c >> 12));
   3847          			s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
   3848          			s[2] = (BYTE)(0x80 | (c & 0x3F));
   3849          			btw = 3;
   3850          		}
   3851          	}
   3852          #else				/* Write the character without conversion */
   3853          	s[0] = (BYTE)c;
   3854          	btw = 1;
   3855          #endif
   3856          	f_write(fil, s, btw, &bw);		/* Write the char to the file */
   3857          	return (bw == btw) ? 1 : EOF;	/* Return the result */
   3858          }
   3859          
   3860          
   3861          
   3862          
   3863          /*-----------------------------------------------------------------------*/
   3864          /* Put a string to the file                                              */
   3865          /*-----------------------------------------------------------------------*/
   3866          int f_puts (
   3867          	const TCHAR* str,	/* Pointer to the string to be output */
   3868          	FIL* fil			/* Pointer to the file object */
   3869          )
   3870          {
   3871          	int n;
   3872          
   3873          
   3874          	for (n = 0; *str; str++, n++) {
   3875          		if (f_putc(*str, fil) == EOF) return EOF;
   3876          	}
   3877          	return n;
   3878          }
   3879          
   3880          
   3881          
   3882          
   3883          /*-----------------------------------------------------------------------*/
   3884          /* Put a formatted string to the file                                    */
   3885          /*-----------------------------------------------------------------------*/
   3886          int f_printf (
   3887          	FIL* fil,			/* Pointer to the file object */
   3888          	const TCHAR* str,	/* Pointer to the format string */
   3889          	...					/* Optional arguments... */
   3890          )
   3891          {
   3892          	va_list arp;
   3893          	BYTE f, r;
   3894          	UINT i, j, w;
   3895          	ULONG v;
   3896          	TCHAR c, d, s[16], *p;
   3897          	int res, cc;
   3898          
   3899          
   3900          	va_start(arp, str);
   3901          
   3902          	for (cc = res = 0; cc != EOF; res += cc) {
   3903          		c = *str++;
   3904          		if (c == 0) break;			/* End of string */
   3905          		if (c != '%') {				/* Non escape character */
   3906          			cc = f_putc(c, fil);
   3907          			if (cc != EOF) cc = 1;
   3908          			continue;
   3909          		}
   3910          		w = f = 0;
   3911          		c = *str++;
   3912          		if (c == '0') {				/* Flag: '0' padding */
   3913          			f = 1; c = *str++;
   3914          		} else {
   3915          			if (c == '-') {			/* Flag: left justified */
   3916          				f = 2; c = *str++;
   3917          			}
   3918          		}
   3919          		while (IsDigit(c)) {		/* Precision */
   3920          			w = w * 10 + c - '0';
   3921          			c = *str++;
   3922          		}
   3923          		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
   3924          			f |= 4; c = *str++;
   3925          		}
   3926          		if (!c) break;
   3927          		d = c;
   3928          		if (IsLower(d)) d -= 0x20;
   3929          		switch (d) {				/* Type is... */
   3930          		case 'S' :					/* String */
   3931          			p = va_arg(arp, TCHAR*);
   3932          			for (j = 0; p[j]; j++) ;
   3933          			res = 0;
   3934          			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
   3935          			res += (cc = f_puts(p, fil));
   3936          			while (j++ < w) res += (cc = f_putc(' ', fil));
   3937          			if (cc != EOF) cc = res;
   3938          			continue;
   3939          		case 'C' :					/* Character */
   3940          			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
   3941          		case 'B' :					/* Binary */
   3942          			r = 2; break;
   3943          		case 'O' :					/* Octal */
   3944          			r = 8; break;
   3945          		case 'D' :					/* Signed decimal */
   3946          		case 'U' :					/* Unsigned decimal */
   3947          			r = 10; break;
   3948          		case 'X' :					/* Hexdecimal */
   3949          			r = 16; break;
   3950          		default:					/* Unknown type (passthrough) */
   3951          			cc = f_putc(c, fil); continue;
   3952          		}
   3953          
   3954          		/* Get an argument and put it in numeral */
   3955          		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
   3956          		if (d == 'D' && (v & 0x80000000)) {
   3957          			v = 0 - v;
   3958          			f |= 8;
   3959          		}
   3960          		i = 0;
   3961          		do {
   3962          			d = (TCHAR)(v % r); v /= r;
   3963          			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
   3964          			s[i++] = d + '0';
   3965          		} while (v && i < sizeof(s) / sizeof(s[0]));
   3966          		if (f & 8) s[i++] = '-';
   3967          		j = i; d = (f & 1) ? '0' : ' ';
   3968          		res = 0;
   3969          		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
   3970          		do res += (cc = f_putc(s[--i], fil)); while(i);
   3971          		while (j++ < w) res += (cc = f_putc(' ', fil));
   3972          		if (cc != EOF) cc = res;
   3973          	}
   3974          
   3975          	va_end(arp);
   3976          	return (cc == EOF) ? cc : res;
   3977          }
   3978          
   3979          //WCHAR ff_convert (WCHAR, UINT);		/* OEM-Unicode bidirectional conversion */
   3980          //WCHAR ff_wtoupper (WCHAR);			/* Unicode upper-case conversion */
   3981          
   3982          #endif /* !_FS_READONLY */
   3983          #endif /* _USE_STRFUNC */
   3984          

   \                                 In section .text, align 2, keep-with-next
   3985          WCHAR ff_wtoupper(WCHAR a){
   \                     ff_wtoupper:
   \   00000000   0x0001             MOVS     R1,R0
   3986            
   3987            if(a>='a' && a<='z')
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0xF1B1 0x0061      SUBS     R0,R1,#+97
   \   00000008   0x281A             CMP      R0,#+26
   \   0000000A   0xD203             BCS.N    ??ff_wtoupper_0
   3988              return a-=32;
   \   0000000C   0x3920             SUBS     R1,R1,#+32
   \   0000000E   0x0008             MOVS     R0,R1
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xE001             B.N      ??ff_wtoupper_1
   3989            
   3990            return a;
   \                     ??ff_wtoupper_0:
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??ff_wtoupper_1:
   \   00000018   0x4770             BX       LR               ;; return
   3991          }
   3992          

   \                                 In section .text, align 2, keep-with-next
   3993          WCHAR ff_convert(WCHAR a,UINT b){
   3994            
   3995            return a;  
   \                     ff_convert:
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x4770             BX       LR               ;; return
   3996          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     LfnOfs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     `?<Constant "\\"*:<>?|\\177">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     `?<Constant "+,;=[]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x00544146         DC32     0x544146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     FatFs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x41615252         DC32     0x41615252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x61417272         DC32     0x61417272

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     Fsid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     LfnBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     LfnBuf

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"*:<>?|\\177">`:
   \   00000000   0x22 0x2A          DC8 "\"*:<>?|\177"
   \              0x3A 0x3C    
   \              0x3E 0x3F    
   \              0x7C 0x7F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "+,;=[]">`:
   \   00000000   0x2B 0x2C          DC8 "+,;=[]"
   \              0x3B 0x3D    
   \              0x5B 0x5D    
   \              0x00         
   \   00000007   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   check_fs
         8   -> disk_read
       0   chk_chr
      24   chk_mounted
        24   -> check_fs
        24   -> disk_initialize
        24   -> disk_read
        24   -> disk_status
       0   clust2sect
      24   cmp_lfn
        24   -> ff_wtoupper
      24   create_chain
        24   -> get_fat
        24   -> put_fat
      40   create_name
        40   -> chk_chr
        40   -> ff_convert
        40   -> ff_wtoupper
        40   -> mem_set
      24   dir_find
        24   -> cmp_lfn
        24   -> dir_next
        24   -> dir_sdi
        24   -> mem_cmp
        24   -> move_window
        24   -> sum_sfn
      24   dir_next
        24   -> clust2sect
        24   -> create_chain
        24   -> get_fat
        24   -> mem_set
        24   -> move_window
      24   dir_read
        24   -> dir_next
        24   -> move_window
        24   -> pick_lfn
        24   -> sum_sfn
      40   dir_register
        40   -> dir_find
        40   -> dir_next
        40   -> dir_sdi
        40   -> fit_lfn
        40   -> gen_numname
        40   -> mem_cpy
        40   -> mem_set
        40   -> move_window
        40   -> sum_sfn
      16   dir_remove
        16   -> dir_next
        16   -> dir_sdi
        16   -> move_window
      16   dir_sdi
        16   -> clust2sect
        16   -> get_fat
      64   f_chmod
        64   -> chk_mounted
        64   -> follow_path
        64   -> sync
       8   f_close
         8   -> f_sync
      40   f_getfree
        40   -> chk_mounted
        40   -> get_fat
        40   -> move_window
      24   f_lseek
        24   -> clust2sect
        24   -> create_chain
        24   -> disk_read
        24   -> disk_write
        24   -> get_fat
        24   -> validate
      80   f_mkdir
        80   -> chk_mounted
        80   -> clust2sect
        80   -> create_chain
        80   -> dir_register
        80   -> follow_path
        80   -> get_fattime
        80   -> mem_cpy
        80   -> mem_set
        80   -> move_window
        80   -> remove_chain
        80   -> sync
       0   f_mount
      80   f_open
        80   -> chk_mounted
        80   -> dir_register
        80   -> follow_path
        80   -> get_fattime
        80   -> move_window
        80   -> remove_chain
      24   f_opendir
        24   -> chk_mounted
        24   -> dir_sdi
        24   -> follow_path
      32   f_read
        32   -> clust2sect
        32   -> disk_read
        32   -> disk_write
        32   -> get_fat
        32   -> mem_cpy
        32   -> validate
      24   f_readdir
        24   -> dir_next
        24   -> dir_read
        24   -> dir_sdi
        24   -> get_fileinfo
        24   -> validate
     128   f_rename
       128   -> chk_mounted
       128   -> clust2sect
       128   -> dir_register
       128   -> dir_remove
       128   -> follow_path
       128   -> mem_cpy
       128   -> move_window
       128   -> sync
      64   f_stat
        64   -> chk_mounted
        64   -> follow_path
        64   -> get_fileinfo
      16   f_sync
        16   -> disk_write
        16   -> get_fattime
        16   -> move_window
        16   -> sync
        16   -> validate
      16   f_truncate
        16   -> get_fat
        16   -> put_fat
        16   -> remove_chain
        16   -> validate
      96   f_unlink
        96   -> chk_mounted
        96   -> dir_read
        96   -> dir_remove
        96   -> dir_sdi
        96   -> follow_path
        96   -> mem_cpy
        96   -> remove_chain
        96   -> sync
      64   f_utime
        64   -> chk_mounted
        64   -> follow_path
        64   -> sync
      32   f_write
        32   -> clust2sect
        32   -> create_chain
        32   -> disk_read
        32   -> disk_write
        32   -> mem_cpy
        32   -> validate
       0   ff_convert
       0   ff_wtoupper
      16   fit_lfn
      16   follow_path
        16   -> create_name
        16   -> dir_find
        16   -> dir_sdi
      24   gen_numname
        24   -> mem_cpy
      24   get_fat
        24   -> move_window
      24   get_fileinfo
        24   -> ff_convert
       4   mem_cmp
       0   mem_cpy
       0   mem_set
      24   move_window
        24   -> disk_read
        24   -> disk_write
      12   pick_lfn
      24   put_fat
        24   -> move_window
      24   remove_chain
        24   -> get_fat
        24   -> put_fat
       0   sum_sfn
      16   sync
        16   -> disk_ioctl
        16   -> disk_write
        16   -> mem_set
        16   -> move_window
       8   validate
         8   -> disk_status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "+,;=[]">
      12  ?<Constant "\"*:<>?|\177">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable15
       4  ??DataTable4
       4  ??DataTable7
       4  ??DataTable7_1
       8  FatFs
       2  Fsid
     512  LfnBuf
      16  LfnOfs
     120  check_fs
      20  chk_chr
     850  chk_mounted
      24  clust2sect
     150  cmp_lfn
     180  create_chain
     724  create_name
     230  dir_find
     304  dir_next
     190  dir_read
     442  dir_register
      96  dir_remove
     174  dir_sdi
      90  f_chmod
      24  f_close
     268  f_getfree
     444  f_lseek
     478  f_mkdir
      50  f_mount
     412  f_open
     132  f_opendir
     502  f_read
      98  f_readdir
     328  f_rename
      74  f_stat
     184  f_sync
     166  f_truncate
     200  f_unlink
      96  f_utime
     558  f_write
       4  ff_convert
      26  ff_wtoupper
     116  fit_lfn
     140  follow_path
     160  gen_numname
     242  get_fat
     264  get_fileinfo
      32  mem_cmp
      20  mem_cpy
      16  mem_set
     116  move_window
     108  pick_lfn
     288  put_fat
     106  remove_chain
      30  sum_sfn
     214  sync
      42  validate

 
   522 bytes in section .bss
    36 bytes in section .rodata
 9 572 bytes in section .text
 
 9 572 bytes of CODE  memory
    36 bytes of CONST memory
   522 bytes of DATA  memory

Errors: none
Warnings: none

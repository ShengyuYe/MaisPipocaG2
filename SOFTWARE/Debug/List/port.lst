###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      24/Jul/2017  16:53:00 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Kernel\port.c                             #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Kernel\port.c -lC                         #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -lA                           #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\port.lst                       #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\port.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Kernel\port.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :
     18          |       Descrição          :
     19          | 
     20          |       Autor              :
     21          |       Data criação       :
     22          |
     23          |       Revisões           :
     24          |
     25          |
     26          | __________________________________________________________________________________
     27          */
     28          /********************************************************************************
     29          *   Includes
     30          ********************************************************************************/
     31          #include "FreeRTOS.h"
     32          #include "task.h"
     33          /********************************************************************************
     34          *   Definições
     35          ********************************************************************************/
     36          #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
     37          #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
     38          #define portNVIC_INT_CTRL		( ( volatile unsigned long *) 0xe000ed04 )
     39          #define portNVIC_SYSPRI2		( ( volatile unsigned long *) 0xe000ed20 )
     40          #define portNVIC_SYSTICK_CLK		0x00000004
     41          #define portNVIC_SYSTICK_INT		0x00000002
     42          #define portNVIC_SYSTICK_ENABLE		0x00000001
     43          #define portNVIC_PENDSVSET		0x10000000
     44          #define portNVIC_PENDSV_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
     45          #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
     46          #define portINITIAL_XPSR			( 0x01000000 )
     47          #ifndef configKERNEL_INTERRUPT_PRIORITY
     48          	#define configKERNEL_INTERRUPT_PRIORITY 0
     49          #endif
     50          /********************************************************************************
     51          *   Variaveis locais
     52          ********************************************************************************/

   \                                 In section .data, align 4
     53           unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
   \                     uxCriticalNesting:
   \   00000000   0xAAAAAAAA         DC32 2863311530
     54          
     55          /********************************************************************************
     56          *   Funções locais
     57          ********************************************************************************/
     58          static void prvSetupTimerInterrupt( void );
     59          void xPortSysTickHandler( void );
     60          extern void vPortStartFirstTask(void);
     61          /********************************************************************************
     62          *   Funções externas ao módulo
     63          ********************************************************************************/
     64          extern void BOARD_timerHook(void);
     65          extern void MU_timerTick(void);
     66          /********************************************************************************
     67          *   Implementação
     68          ********************************************************************************/
     69          
     70          /********************************************************************************
     71          *   Descrição     :
     72          *   Parametros    : 
     73          *   Retorno       : 
     74          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
     76          {
     77              pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   \                     pxPortInitialiseStack:
   \   00000000   0x1F00             SUBS     R0,R0,#+4
     78              *pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   \   00000002   0xF05F 0x7380      MOVS     R3,#+16777216
   \   00000006   0x6003             STR      R3,[R0, #+0]
     79              pxTopOfStack--;
   \   00000008   0x1F00             SUBS     R0,R0,#+4
     80              *pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     81              pxTopOfStack--;
   \   0000000C   0x1F00             SUBS     R0,R0,#+4
     82              *pxTopOfStack = 0;	/* LR */
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6001             STR      R1,[R0, #+0]
     83              pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   \   00000012   0x3814             SUBS     R0,R0,#+20
     84              *pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   \   00000014   0x6002             STR      R2,[R0, #+0]
     85              pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   \   00000016   0x3820             SUBS     R0,R0,#+32
     86          
     87              return pxTopOfStack;
   \   00000018   0x4770             BX       LR               ;; return
     88          }
     89          /********************************************************************************
     90          *   Descrição     :   
     91          *   Parametros    : 
     92          *   Retorno       : 
     93          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     94          portBASE_TYPE xPortStartScheduler( void )
     95          {
   \                     xPortStartScheduler:
   \   00000000   0xB580             PUSH     {R7,LR}
     96              *(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   \   00000002   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed20
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x0078      ORRS     R0,R0,#0xF80000
   \   0000000A   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed20
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     97              *(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   \   0000000E   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed20
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF050 0x4078      ORRS     R0,R0,#0xF8000000
   \   00000016   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed20
   \   00000018   0x6008             STR      R0,[R1, #+0]
     98          
     99              prvSetupTimerInterrupt();	
   \   0000001A   0x.... 0x....      BL       prvSetupTimerInterrupt
    100              uxCriticalNesting = 0;
   \   0000001E   0x....             LDR.N    R0,??DataTable5_1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6001             STR      R1,[R0, #+0]
    101          
    102              vPortStartFirstTask();
   \   00000024   0x.... 0x....      BL       vPortStartFirstTask
    103              return 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
    104          }
    105          /********************************************************************************
    106          *   Descrição     : 
    107          *   Parametros    :
    108          *   Retorno       : 
    109          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void vPortEndScheduler( void )
    111          {
    112          
    113            
    114          }
   \                     vPortEndScheduler:
   \   00000000   0x4770             BX       LR               ;; return
    115          /********************************************************************************
    116          *   Descrição     : 
    117          *   Parametros    : 
    118          *   Retorno       : 
    119          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    120          void vPortYieldFromISR( void )
    121          {
    122          
    123              *(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   \                     vPortYieldFromISR:
   \   00000000   0x....             LDR.N    R0,??DataTable5_2  ;; 0xe000ed04
   \   00000002   0xF05F 0x5180      MOVS     R1,#+268435456
   \   00000006   0x6001             STR      R1,[R0, #+0]
    124          }
   \   00000008   0x4770             BX       LR               ;; return
    125          /********************************************************************************
    126          *   Descrição     : 
    127          *   Parametros    : 
    128          *   Retorno       : 
    129          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          void vPortEnterCritical( void )
    131          {
   \                     vPortEnterCritical:
   \   00000000   0xB580             PUSH     {R7,LR}
    132          	portDISABLE_INTERRUPTS();
   \   00000002   0x.... 0x....      BL       vPortSetInterruptMask
    133          	uxCriticalNesting++;
   \   00000006   0x....             LDR.N    R0,??DataTable5_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable5_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    134          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    135          /********************************************************************************
    136          *   Descrição     : 
    137          *   Parametros    : 
    138          *   Retorno       : 
    139          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    140          void vPortExitCritical( void )
    141          {
   \                     vPortExitCritical:
   \   00000000   0xB580             PUSH     {R7,LR}
    142          	uxCriticalNesting--;
   \   00000002   0x....             LDR.N    R0,??DataTable5_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1E40             SUBS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable5_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    143          	if( uxCriticalNesting == 0 )
   \   0000000C   0x....             LDR.N    R0,??DataTable5_1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE.N    ??vPortExitCritical_0
    144          	{
    145          		portENABLE_INTERRUPTS();
   \   00000014   0x.... 0x....      BL       vPortClearInterruptMask
    146          	}
    147          }
   \                     ??vPortExitCritical_0:
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    148          /********************************************************************************
    149          *   Descrição     :   
    150          *   Parametros    :   
    151          *   Retorno       : 
    152          ********************************************************************************/
    153          extern void BOARD_timer_tick(void);
    154          extern unsigned char MDBUART_bytes_recebidos;
    155          extern unsigned char MDBUART_novo_pacote;
    156          extern unsigned char MDBUART_silent_time;
    157          extern unsigned char MDBUART_buffer_in[50];
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void xPortSysTickHandler( void )
    160          {
   \                     xPortSysTickHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    161            unsigned long ulDummy;
    162              
    163            BOARD_timer_tick();
   \   00000002   0x.... 0x....      BL       BOARD_timer_tick
    164            
    165          /*
    166            if(MDBUART_silent_time){
    167              // Bytes recebidos pela UART1
    168              if(MDBUART_bytes_recebidos && MDBUART_silent_time==1){
    169                   
    170                if(!MDBUART_buffer_in[MDBUART_bytes_recebidos-1] || MDBUART_buffer_in[MDBUART_bytes_recebidos-1]==0xFF)
    171                  MDBUART_novo_pacote = 1;
    172                else{      
    173                  MDBUART_buffer_in[MDBUART_bytes_recebidos++] = 0;
    174                  MDBUART_novo_pacote = 1;
    175                 }     
    176              }    
    177              MDBUART_silent_time--;
    178            }
    179            */
    180          
    181            *(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;	
   \   00000006   0x....             LDR.N    R0,??DataTable5_2  ;; 0xe000ed04
   \   00000008   0xF05F 0x5180      MOVS     R1,#+268435456
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    182          
    183              ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0x.... 0x....      BL       vPortSetInterruptMask
    184              {
    185          	vTaskIncrementTick();
   \   00000014   0x.... 0x....      BL       vTaskIncrementTick
    186              }
    187              portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );         
   \   00000018   0x.... 0x....      BL       vPortClearInterruptMask
    188          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    189          /********************************************************************************
    190          *   Descrição     :   
    191          *   Parametros    : 
    192          *   Retorno       : 
    193          ********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          void prvSetupTimerInterrupt( void ){
    195            
    196            *(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   \                     prvSetupTimerInterrupt:
   \   00000000   0x....             LDR.N    R0,??DataTable5_3  ;; 0xe000e014
   \   00000002   0x....             LDR.N    R1,??DataTable5_4  ;; 0x182b7
   \   00000004   0x6001             STR      R1,[R0, #+0]
    197            *(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   \   00000006   0x....             LDR.N    R0,??DataTable5_5  ;; 0xe000e010
   \   00000008   0x2107             MOVS     R1,#+7
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    198          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     uxCriticalNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x000182B7         DC32     0x182b7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E010         DC32     0xe000e010
    199          /********************************************************************************
    200          *   Fim do arquivo
    201          ********************************************************************************/
    202          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   prvSetupTimerInterrupt
       0   pxPortInitialiseStack
       0   vPortEndScheduler
       8   vPortEnterCritical
         8   -> vPortSetInterruptMask
       8   vPortExitCritical
         8   -> vPortClearInterruptMask
       0   vPortYieldFromISR
       8   xPortStartScheduler
         8   -> prvSetupTimerInterrupt
         8   -> vPortStartFirstTask
       8   xPortSysTickHandler
         8   -> BOARD_timer_tick
         8   -> vPortClearInterruptMask
         8   -> vPortSetInterruptMask
         8   -> vTaskIncrementTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      14  prvSetupTimerInterrupt
      26  pxPortInitialiseStack
       4  uxCriticalNesting
       2  vPortEndScheduler
      18  vPortEnterCritical
      26  vPortExitCritical
      10  vPortYieldFromISR
      44  xPortStartScheduler
      30  xPortSysTickHandler

 
   4 bytes in section .data
 194 bytes in section .text
 
 194 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      12/Sep/2017  15:11:43 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016 #
#                    b\spi_wrapper.c                                          #
#    Command line =  C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016 #
#                    b\spi_wrapper.c -lC C:\repositorios\MaisPipocaG2\SOFTWAR #
#                    E\Debug\List\ -lA C:\repositorios\MaisPipocaG2\SOFTWARE\ #
#                    Debug\List\ -o C:\repositorios\MaisPipocaG2\SOFTWARE\Deb #
#                    ug\Obj\ --no_cse --no_unroll --no_inline                 #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -On                                               #
#    List file    =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\List\spi_wra #
#                    pper.lst                                                 #
#    Object file  =  C:\repositorios\MaisPipocaG2\SOFTWARE\Debug\Obj\spi_wrap #
#                    per.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\repositorios\MaisPipocaG2\SOFTWARE\Drivers\sst25vf016b\spi_wrapper.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Module	    : SPI wrapper
     18          |       File	    : SPI_WRAPPER.C
     19          |       Description : Wrapper para funções spi utilizadas em escrita em memórias
     20          |	Author      : Marcos Aquino
     21          |
     22          |       Created on  : 09/06/2009
     23          |
     24          |       History     : 
     25          |
     26          |
     27          | __________________________________________________________________________________
     28          */
     29          
     30          /***********************************************************************************
     31          *	Includes
     32          ***********************************************************************************/
     33          #include "spi_wrapper.h"

   \                                 In section .noinit, at 0x400fc1ac
   \   __absolute union <unnamed> volatile _A_PCLKSEL1
   \                     _A_PCLKSEL1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x400fc0c4
   \   __absolute union <unnamed> volatile _A_PCONP
   \                     _A_PCONP:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c000
   \   __absolute union <unnamed> volatile _A_PINSEL0
   \                     _A_PINSEL0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4002c004
   \   __absolute union <unnamed> volatile _A_PINSEL1
   \                     _A_PINSEL1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c000
   \   __absolute union <unnamed> volatile _A_FIO0DIR
   \                     _A_FIO0DIR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x2009c018
   \   __absolute union <unnamed> volatile _A_FIO0SET
   \                     _A_FIO0SET:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40088000
   \   __absolute union <unnamed> volatile _A_SSP0CR0
   \                     _A_SSP0CR0:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40088004
   \   __absolute union <unnamed> volatile _A_SSP0CR1
   \                     _A_SSP0CR1:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40088008
   \   __absolute union <unnamed> volatile _A_SSP0DR
   \                     _A_SSP0DR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x4008800c
   \   __absolute union <unnamed> const volatile _A_SSP0SR
   \                     _A_SSP0SR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0x40088010
   \   __absolute union <unnamed> volatile _A_SSP0CPSR
   \                     _A_SSP0CPSR:
   \   00000000                      DS8 4
     34          #include "..\..\includes.h"
     35          
     36          /***********************************************************************************
     37          *	Defines - Local
     38          ***********************************************************************************/ 
     39          #define PCLK                    96000000
     40          
     41          #define SCK                     (0x01)<<15
     42          #define MISO                    (0x01)<<17
     43          #define MOSI                    (0x01)<<18
     44          
     45          
     46          #define SCK_FUNC                PINSEL0_bit.P0_15  
     47          #define MISO_FUNC               PINSEL1_bit.P0_17  
     48          #define MOSI_FUNC               PINSEL1_bit.P0_18  
     49          
     50          /***********************************************************************************
     51          *	Enumerations - Local
     52          ***********************************************************************************/
     53          
     54          
     55          /***********************************************************************************
     56          *	Structs - Local
     57          ***********************************************************************************/
     58          
     59          
     60          /***********************************************************************************
     61          *	Types - Local
     62          ***********************************************************************************/
     63          
     64          
     65          /***********************************************************************************
     66          *	Variables - Local
     67          ***********************************************************************************/

   \                                 In section .bss, align 1
     68          unsigned char dummy;
   \                     dummy:
   \   00000000                      DS8 1
     69          /***********************************************************************************
     70          *	Functions - Local
     71          ***********************************************************************************/
     72          
     73          
     74          /***********************************************************************************
     75          *	Implementations
     76          ***********************************************************************************/
     77          
     78          /***********************************************************************************
     79          *       Descrição     : Inicialização do módulo
     80          *       Parametros    : (unsigned int) xtal value
     81          *                       (unsigned int) spi clock
     82          *       Retorno       : nenhum
     83          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void SPIWRAPPER_init(unsigned long int spiClk){
   \                     SPIWRAPPER_init:
   \   00000000   0xB410             PUSH     {R4}
     85            unsigned int divisor;
     86              
     87            divisor = 8;//4;//PCLK/spiClk;
   \   00000002   0x2208             MOVS     R2,#+8
   \   00000004   0x0011             MOVS     R1,R2
     88            divisor &=~(0x01); // Aham!!!! Me diga o que isso faz!!!!! Se souber, está contratado!!!!
   \   00000006   0x0849             LSRS     R1,R1,#+1
   \   00000008   0x0049             LSLS     R1,R1,#+1
     89              
     90            INIT_CHIP_SELECTS;
   \   0000000A   0x....             LDR.N    R2,??DataTable2  ;; 0x2009c000
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0xF452 0x3280      ORRS     R2,R2,#0x10000
   \   00000012   0x....             LDR.N    R3,??DataTable2  ;; 0x2009c000
   \   00000014   0x601A             STR      R2,[R3, #+0]
   \   00000016   0x....             LDR.N    R2,??DataTable2_1  ;; 0x2009c018
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0xF452 0x3280      ORRS     R2,R2,#0x10000
   \   0000001E   0x....             LDR.N    R3,??DataTable2_1  ;; 0x2009c018
   \   00000020   0x601A             STR      R2,[R3, #+0]
   \   00000022   0x....             LDR.N    R2,??DataTable2  ;; 0x2009c000
   \   00000024   0x6812             LDR      R2,[R2, #+0]
   \   00000026   0xF452 0x1200      ORRS     R2,R2,#0x200000
   \   0000002A   0x....             LDR.N    R3,??DataTable2  ;; 0x2009c000
   \   0000002C   0x601A             STR      R2,[R3, #+0]
   \   0000002E   0x....             LDR.N    R2,??DataTable2_1  ;; 0x2009c018
   \   00000030   0x6812             LDR      R2,[R2, #+0]
   \   00000032   0xF452 0x1200      ORRS     R2,R2,#0x200000
   \   00000036   0x....             LDR.N    R3,??DataTable2_1  ;; 0x2009c018
   \   00000038   0x601A             STR      R2,[R3, #+0]
     91            UNSEL_CS_01;
   \   0000003A   0x....             LDR.N    R2,??DataTable2_1  ;; 0x2009c018
   \   0000003C   0x6812             LDR      R2,[R2, #+0]
   \   0000003E   0xF452 0x3280      ORRS     R2,R2,#0x10000
   \   00000042   0x....             LDR.N    R3,??DataTable2_1  ;; 0x2009c018
   \   00000044   0x601A             STR      R2,[R3, #+0]
     92            UNSEL_CS_02;
   \   00000046   0x....             LDR.N    R2,??DataTable2_1  ;; 0x2009c018
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xF452 0x1200      ORRS     R2,R2,#0x200000
   \   0000004E   0x....             LDR.N    R3,??DataTable2_1  ;; 0x2009c018
   \   00000050   0x601A             STR      R2,[R3, #+0]
     93            
     94            // Configura a função SPI para os pinos
     95            SCK_FUNC = 2;
   \   00000052   0x2202             MOVS     R2,#+2
   \   00000054   0x....             LDR.N    R3,??DataTable2_2  ;; 0x4002c000
   \   00000056   0x681B             LDR      R3,[R3, #+0]
   \   00000058   0xF362 0x739F      BFI      R3,R2,#+30,#+2
   \   0000005C   0x....             LDR.N    R2,??DataTable2_2  ;; 0x4002c000
   \   0000005E   0x6013             STR      R3,[R2, #+0]
     96            MISO_FUNC = 2;
   \   00000060   0x2202             MOVS     R2,#+2
   \   00000062   0x....             LDR.N    R3,??DataTable2_3  ;; 0x4002c004
   \   00000064   0x681B             LDR      R3,[R3, #+0]
   \   00000066   0xF362 0x0383      BFI      R3,R2,#+2,#+2
   \   0000006A   0x....             LDR.N    R2,??DataTable2_3  ;; 0x4002c004
   \   0000006C   0x6013             STR      R3,[R2, #+0]
     97            MOSI_FUNC = 2;
   \   0000006E   0x2202             MOVS     R2,#+2
   \   00000070   0x....             LDR.N    R3,??DataTable2_3  ;; 0x4002c004
   \   00000072   0x681B             LDR      R3,[R3, #+0]
   \   00000074   0xF362 0x1305      BFI      R3,R2,#+4,#+2
   \   00000078   0x....             LDR.N    R2,??DataTable2_3  ;; 0x4002c004
   \   0000007A   0x6013             STR      R3,[R2, #+0]
     98            
     99            PCONP_bit.PCSSP0 = 1; // Ativa a alimentação do periférico
   \   0000007C   0x....             LDR.N    R2,??DataTable2_4  ;; 0x400fc0c4
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0xF452 0x1200      ORRS     R2,R2,#0x200000
   \   00000084   0x....             LDR.N    R3,??DataTable2_4  ;; 0x400fc0c4
   \   00000086   0x601A             STR      R2,[R3, #+0]
    100            PCLKSEL1_bit.PCLK_SSP0 = 1; // Ativa o clock do periférico
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x....             LDR.N    R3,??DataTable2_5  ;; 0x400fc1ac
   \   0000008C   0x681B             LDR      R3,[R3, #+0]
   \   0000008E   0xF362 0x238B      BFI      R3,R2,#+10,#+2
   \   00000092   0x....             LDR.N    R2,??DataTable2_5  ;; 0x400fc1ac
   \   00000094   0x6013             STR      R3,[R2, #+0]
    101            
    102            SSP0CR0_bit.DSS = 0x07; // 8 bits de dados
   \   00000096   0x2207             MOVS     R2,#+7
   \   00000098   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40088000
   \   0000009A   0x681B             LDR      R3,[R3, #+0]
   \   0000009C   0xF362 0x0303      BFI      R3,R2,#+0,#+4
   \   000000A0   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40088000
   \   000000A2   0x6013             STR      R3,[R2, #+0]
    103            SSP0CR0_bit.FRF = 0x00; // Frame em formato SPI
   \   000000A4   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40088000
   \   000000A6   0x6812             LDR      R2,[R2, #+0]
   \   000000A8   0xF032 0x0230      BICS     R2,R2,#0x30
   \   000000AC   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40088000
   \   000000AE   0x601A             STR      R2,[R3, #+0]
    104            SSP0CR0_bit.CPOL = 1; // Foi levantado que era assim na firmware da MX-485 
   \   000000B0   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40088000
   \   000000B2   0x6812             LDR      R2,[R2, #+0]
   \   000000B4   0xF052 0x0240      ORRS     R2,R2,#0x40
   \   000000B8   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40088000
   \   000000BA   0x601A             STR      R2,[R3, #+0]
    105            SSP0CR0_bit.CPHA = 1; // tem que ver pq...
   \   000000BC   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40088000
   \   000000BE   0x6812             LDR      R2,[R2, #+0]
   \   000000C0   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   000000C4   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40088000
   \   000000C6   0x601A             STR      R2,[R3, #+0]
    106            
    107            SSP0CR0_bit.SCR = divisor<<8;
   \   000000C8   0x020A             LSLS     R2,R1,#+8
   \   000000CA   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40088000
   \   000000CC   0x681B             LDR      R3,[R3, #+0]
   \   000000CE   0xF433 0x437F      BICS     R3,R3,#0xFF00
   \   000000D2   0x....             LDR.N    R4,??DataTable2_6  ;; 0x40088000
   \   000000D4   0x6023             STR      R3,[R4, #+0]
    108            
    109            SSP0CPSR = divisor;
   \   000000D6   0x....             LDR.N    R3,??DataTable2_7  ;; 0x40088010
   \   000000D8   0x6019             STR      R1,[R3, #+0]
    110            
    111            SSP0CR1_bit.LBM = 0; // Modo normal, sem loopback
   \   000000DA   0x....             LDR.N    R3,??DataTable2_8  ;; 0x40088004
   \   000000DC   0x681B             LDR      R3,[R3, #+0]
   \   000000DE   0x085B             LSRS     R3,R3,#+1
   \   000000E0   0x005B             LSLS     R3,R3,#+1
   \   000000E2   0x....             LDR.N    R4,??DataTable2_8  ;; 0x40088004
   \   000000E4   0x6023             STR      R3,[R4, #+0]
    112            SSP0CR1_bit.SSE = 1; // Módulo habilitado
   \   000000E6   0x....             LDR.N    R3,??DataTable2_8  ;; 0x40088004
   \   000000E8   0x681B             LDR      R3,[R3, #+0]
   \   000000EA   0xF053 0x0302      ORRS     R3,R3,#0x2
   \   000000EE   0x....             LDR.N    R4,??DataTable2_8  ;; 0x40088004
   \   000000F0   0x6023             STR      R3,[R4, #+0]
    113            SSP0CR1_bit.MS  = 0; // Modo mestre
   \   000000F2   0x....             LDR.N    R3,??DataTable2_8  ;; 0x40088004
   \   000000F4   0x681B             LDR      R3,[R3, #+0]
   \   000000F6   0xF033 0x0304      BICS     R3,R3,#0x4
   \   000000FA   0x....             LDR.N    R4,??DataTable2_8  ;; 0x40088004
   \   000000FC   0x6023             STR      R3,[R4, #+0]
    114            SSP0CR1_bit.SOD = 0; // É dummy nesse modo
   \   000000FE   0x....             LDR.N    R3,??DataTable2_8  ;; 0x40088004
   \   00000100   0x681B             LDR      R3,[R3, #+0]
   \   00000102   0xF033 0x0308      BICS     R3,R3,#0x8
   \   00000106   0x....             LDR.N    R4,??DataTable2_8  ;; 0x40088004
   \   00000108   0x6023             STR      R3,[R4, #+0]
    115              
    116            for(unsigned int i=0;i<8;i++)
   \   0000010A   0x2300             MOVS     R3,#+0
   \                     ??SPIWRAPPER_init_0:
   \   0000010C   0x2B08             CMP      R3,#+8
   \   0000010E   0xD205             BCS.N    ??SPIWRAPPER_init_1
    117              dummy = SSP0DR;  
   \   00000110   0x....             LDR.N    R2,??DataTable2_9
   \   00000112   0x....             LDR.N    R4,??DataTable2_10  ;; 0x40088008
   \   00000114   0x6824             LDR      R4,[R4, #+0]
   \   00000116   0x7014             STRB     R4,[R2, #+0]
   \   00000118   0x1C5B             ADDS     R3,R3,#+1
   \   0000011A   0xE7F7             B.N      ??SPIWRAPPER_init_0
    118          }
   \                     ??SPIWRAPPER_init_1:
   \   0000011C   0xBC10             POP      {R4}
   \   0000011E   0x4770             BX       LR               ;; return
   \   00000120                      REQUIRE _A_FIO0DIR
   \   00000120                      REQUIRE _A_FIO0SET
   \   00000120                      REQUIRE _A_PINSEL0
   \   00000120                      REQUIRE _A_PINSEL1
   \   00000120                      REQUIRE _A_PCONP
   \   00000120                      REQUIRE _A_PCLKSEL1
   \   00000120                      REQUIRE _A_SSP0CR0
   \   00000120                      REQUIRE _A_SSP0CPSR
   \   00000120                      REQUIRE _A_SSP0CR1
   \   00000120                      REQUIRE _A_SSP0DR
    119          /***********************************************************************************
    120          *       Descrição     :    Escreve um buffer de dados na SPI  
    121          *       Parametros    :   (unsigned char*) buffer de dados
    122          *                         (unsigned int) tamanho do buffer
    123          *       Retorno       :   nenhum
    124          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    125          void SPI_sendBytes(unsigned char *buffer,unsigned int size){
    126              
    127            if(size==0){
   \                     SPI_sendBytes:
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0xD013             BEQ.N    ??SPI_sendBytes_0
    128              return;
    129            }
    130            
    131            while(size){
   \                     ??SPI_sendBytes_1:
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD011             BEQ.N    ??SPI_sendBytes_2
    132              
    133              while(! (SSP0SR & 0x02));//Se está setado é pq o buffer está cheio
   \                     ??SPI_sendBytes_3:
   \   00000008   0x....             LDR.N    R2,??DataTable2_11  ;; 0x4008800c
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x0792             LSLS     R2,R2,#+30
   \   0000000E   0xD5FB             BPL.N    ??SPI_sendBytes_3
    134              SSP0DR = *buffer;
   \   00000010   0x7802             LDRB     R2,[R0, #+0]
   \   00000012   0x....             LDR.N    R3,??DataTable2_10  ;; 0x40088008
   \   00000014   0x601A             STR      R2,[R3, #+0]
    135              while(! (SSP0SR & 0x04));//
   \                     ??SPI_sendBytes_4:
   \   00000016   0x....             LDR.N    R2,??DataTable2_11  ;; 0x4008800c
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x0752             LSLS     R2,R2,#+29
   \   0000001C   0xD5FB             BPL.N    ??SPI_sendBytes_4
    136              dummy = SSP0DR;
   \   0000001E   0x....             LDR.N    R2,??DataTable2_9
   \   00000020   0x....             LDR.N    R3,??DataTable2_10  ;; 0x40088008
   \   00000022   0x681B             LDR      R3,[R3, #+0]
   \   00000024   0x7013             STRB     R3,[R2, #+0]
    137              size--;
   \   00000026   0x1E49             SUBS     R1,R1,#+1
    138              buffer++;                
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0xE7EB             B.N      ??SPI_sendBytes_1
    139            }      
    140          }
   \                     ??SPI_sendBytes_2:
   \                     ??SPI_sendBytes_0:
   \   0000002C   0x4770             BX       LR               ;; return
   \   0000002E                      REQUIRE _A_SSP0SR
   \   0000002E                      REQUIRE _A_SSP0DR
    141          /***********************************************************************************
    142          *       Descrição     :    Lê um pacote de dados da SPI
    143          *       Parametros    :   (unsigned char*) buffer de dados
    144          *                         (unsigned int) tamanho do buffer
    145          *       Retorno       :   nenhum
    146          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    147          void SPI_getBytes(unsigned char *buffer,unsigned int size){
   \                     SPI_getBytes:
   \   00000000   0xB410             PUSH     {R4}
    148           
    149            for(unsigned int i=0;i<size;i++){
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??SPI_getBytes_0:
   \   00000004   0x428A             CMP      R2,R1
   \   00000006   0xD20C             BCS.N    ??SPI_getBytes_1
    150             
    151              SSP0DR = 0xFF;//Dummy write, na verdade gera os clocks para ler os dados
   \   00000008   0x....             LDR.N    R3,??DataTable2_10  ;; 0x40088008
   \   0000000A   0x24FF             MOVS     R4,#+255
   \   0000000C   0x601C             STR      R4,[R3, #+0]
    152              while( SSP0SR & 0x10);//Aguarda finalizar o envio do byte em questão
   \                     ??SPI_getBytes_2:
   \   0000000E   0x....             LDR.N    R3,??DataTable2_11  ;; 0x4008800c
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0x06DB             LSLS     R3,R3,#+27
   \   00000014   0xD4FB             BMI.N    ??SPI_getBytes_2
    153              *buffer = SSP0DR;
   \   00000016   0x....             LDR.N    R3,??DataTable2_10  ;; 0x40088008
   \   00000018   0x681B             LDR      R3,[R3, #+0]
   \   0000001A   0x7003             STRB     R3,[R0, #+0]
    154              buffer++;      
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
    155            }     
   \   0000001E   0x1C52             ADDS     R2,R2,#+1
   \   00000020   0xE7F0             B.N      ??SPI_getBytes_0
    156          }
   \                     ??SPI_getBytes_1:
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return
   \   00000026                      REQUIRE _A_SSP0DR
   \   00000026                      REQUIRE _A_SSP0SR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x2009C000         DC32     0x2009c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x2009C018         DC32     0x2009c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x4002C004         DC32     0x4002c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x400FC1AC         DC32     0x400fc1ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40088000         DC32     0x40088000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40088010         DC32     0x40088010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40088004         DC32     0x40088004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     dummy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40088008         DC32     0x40088008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x4008800C         DC32     0x4008800c
    157          /***********************************************************************************
    158          *       Fim do arquivo
    159          ***********************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SPIWRAPPER_init
       4   SPI_getBytes
       0   SPI_sendBytes


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     288  SPIWRAPPER_init
      38  SPI_getBytes
      46  SPI_sendBytes
       4  _A_FIO0DIR
       4  _A_FIO0SET
       4  _A_PCLKSEL1
       4  _A_PCONP
       4  _A_PINSEL0
       4  _A_PINSEL1
       4  _A_SSP0CPSR
       4  _A_SSP0CR0
       4  _A_SSP0CR1
       4  _A_SSP0DR
       4  _A_SSP0SR
       1  dummy

 
   1 byte  in section .bss
  44 bytes in section .noinit (abs)
 420 bytes in section .text
 
 420 bytes of CODE memory
   1 byte  of DATA memory (+ 44 bytes shared)

Errors: none
Warnings: none

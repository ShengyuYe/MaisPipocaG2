###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      20/Jul/2017  13:07:36 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\RECORD_FILE_SYSTEM\record_file_sy #
#                    stem.c                                                   #
#    Command line =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Drivers\RECORD_FILE_SYSTEM\record_file_sy #
#                    stem.c -lC C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardw #
#                    are\MaisPipocaG2\SOFTWARE\Debug\List\ -lA                #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\ -o                            #
#                    C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol                                               #
#    List file    =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\List\record_file_system.lst         #
#    Object file  =  C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPip #
#                    ocaG2\SOFTWARE\Debug\Obj\record_file_system.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Marcos\Dropbox\Reps\Dextro\IBA\Hardware\MaisPipocaG2\SOFTWARE\Drivers\RECORD_FILE_SYSTEM\record_file_system.c
      1          /*__________________________________________________________________________________
      2          |	Quark Tecnologia Eletrônica Embarcada
      3          |       
      4          |       Itapema - SC
      5          |       www.quarktee.com.br
      6          | __________________________________________________________________________________
      7          |
      8          |       This source code was developed by Quark  and cannot be copied, in part 
      9          |       or in whole, or used, except when legally licensed by Quark 
     10          |       or its distributors.
     11          |
     12          |       Este código é propriedade da Quark  e não pode ser copiado, em parte 
     13          |       ou em todo, ou utilizado, exceto quando for legalmente licenciado pela 
     14          |       Quark  ou por um de seus distribuidores.
     15          | __________________________________________________________________________________
     16          |
     17          |       Arquivo            :  record_file_system.c
     18          | 
     19          |       Autor              :  Marcos Aquino
     20          |       Data criação       :  17/07/2017
     21          |
     22          |       Revisões           :  1
     23          |
     24          |
     25          | __________________________________________________________________________________
     26          */
     27          
     28          /***********************************************************************************
     29          *       Includes
     30          ***********************************************************************************/
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       __aeabi_memcpy
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     34          #include "record_file_system.h"
     35          #include "..\..\includes.h"
     36          
     37          /***********************************************************************************
     38          *       Definições
     39          ***********************************************************************************/
     40          #define ENDERECO_INICIAL_BLOCOS         0x00001000
     41          #define WRITE_BLOCK                     MEMORYWRAPPER_writeBytes
     42          #define READ_BLOCK                      MEMORYWRAPPER_readBytes             
     43          
     44          /***********************************************************************************
     45          *       Variaveis locais
     46          ***********************************************************************************/
     47          
     48          
     49          /***********************************************************************************
     50          *       Funções locais
     51          ***********************************************************************************/
     52          unsigned char RFS_calcula_checksum(unsigned char *pData,unsigned short int tamanho);
     53          
     54          /***********************************************************************************
     55          *       Implementação das funções
     56          ***********************************************************************************/
     57          
     58          /***********************************************************************************
     59          *       Descrição       :       Resolve o endereço do bloco de controle
     60          *                               do arquivo
     61          *       Parametros      :       (unsigned int) posição
     62          *       Retorno         :       (unsigned int) endereço físico
     63          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     64          unsigned int RFS_resolve_endereco(unsigned char posicao){
     65            
     66            return ENDERECO_INICIAL_BLOCOS + ((sizeof(sRECORD_FILE_SYSTEM)+1)*posicao);
   \                     RFS_resolve_endereco:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2125             MOVS     R1,#+37
   \   00000004   0x4348             MULS     R0,R1,R0
   \   00000006   0xF510 0x5080      ADDS     R0,R0,#+4096
   \   0000000A   0x4770             BX       LR               ;; return
     67          }
     68          /***********************************************************************************
     69          *       Descrição       :       Salva o bloco de controle de arquivo
     70          *                               na memória flash
     71          *       Parametros      :       (unsigned char) posição
     72          *                               (sRECORD_FILE_SYSTEM*) arquivo
     73          *       Retorno         :       (eRFS_RESULT) resultado da operação
     74          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          eRFS_RESULT RFS_grava_bloco_controle(unsigned int posicao,sRECORD_FILE_SYSTEM *file){
   \                     RFS_grava_bloco_controle:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
     76            unsigned char buffer[sizeof(sRECORD_FILE_SYSTEM) + 1];  //tamanho da estrutura mais um byte para o checksum
     77            
     78            for(unsigned char i=0;i<sizeof(sRECORD_FILE_SYSTEM);i++) // copia os dados da estrutura para o buffer
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE005             B.N      ??RFS_grava_bloco_controle_0
     79              buffer[i] = ((unsigned char*)(file))[i]; // faz o casting para o ponteiro
   \                     ??RFS_grava_bloco_controle_1:
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x5C42             LDRB     R2,[R0, R1]
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xAB00             ADD      R3,SP,#+0
   \   00000012   0x54C2             STRB     R2,[R0, R3]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \                     ??RFS_grava_bloco_controle_0:
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x2824             CMP      R0,#+36
   \   0000001A   0xD3F6             BCC.N    ??RFS_grava_bloco_controle_1
     80            
     81            buffer[sizeof(sRECORD_FILE_SYSTEM)] = RFS_calcula_checksum(buffer, sizeof(sRECORD_FILE_SYSTEM)); // adiciona o Checksum ao último byte do buffer
   \   0000001C   0x2124             MOVS     R1,#+36
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       RFS_calcula_checksum
   \   00000024   0xF88D 0x0024      STRB     R0,[SP, #+36]
     82            
     83            WRITE_BLOCK( RFS_resolve_endereco(posicao),buffer,sizeof(sRECORD_FILE_SYSTEM) +1 );  //persiste na flash externa
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       RFS_resolve_endereco
   \   00000030   0x2225             MOVS     R2,#+37
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0x.... 0x....      BL       MEMORYWRAPPER_writeBytes
     84            
     85            return RFS_OK;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xB00A             ADD      SP,SP,#+40
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
     86          }
     87          /***********************************************************************************
     88          *       Descrição       :       Carrega o bloco de controle de um dos
     89          *                               arquivos
     90          *       Parametros      :       (unsigned char) posição
     91          *                               (sRECORD_FILE_SYSTEM*) arquivo
     92          *       Retorno         :       (eRFS_RESULT) resultado da operação
     93          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     94          eRFS_RESULT RFS_carrega_bloco_controle(unsigned int posicao,sRECORD_FILE_SYSTEM *file){
   \                     RFS_carrega_bloco_controle:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x000C             MOVS     R4,R1
     95            unsigned char buffer[sizeof(sRECORD_FILE_SYSTEM) + 1];  
     96            
     97            READ_BLOCK( RFS_resolve_endereco(posicao),buffer,sizeof(sRECORD_FILE_SYSTEM)+1);    
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       RFS_resolve_endereco
   \   0000000C   0x2225             MOVS     R2,#+37
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x.... 0x....      BL       MEMORYWRAPPER_readBytes
     98            for(unsigned char i=0;i<sizeof(sRECORD_FILE_SYSTEM);i++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE005             B.N      ??RFS_carrega_bloco_controle_0
     99              ((unsigned char*)(file))[i] = buffer[i];
   \                     ??RFS_carrega_bloco_controle_1:
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x5C41             LDRB     R1,[R0, R1]
   \   00000020   0x5501             STRB     R1,[R0, R4]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \                     ??RFS_carrega_bloco_controle_0:
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2824             CMP      R0,#+36
   \   00000028   0xD3F6             BCC.N    ??RFS_carrega_bloco_controle_1
    100            
    101            if(buffer[sizeof(sRECORD_FILE_SYSTEM)] == RFS_calcula_checksum(buffer,sizeof(sRECORD_FILE_SYSTEM)))
   \   0000002A   0x2124             MOVS     R1,#+36
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       RFS_calcula_checksum
   \   00000032   0xF89D 0x1024      LDRB     R1,[SP, #+36]
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4281             CMP      R1,R0
   \   0000003A   0xD101             BNE.N    ??RFS_carrega_bloco_controle_2
    102              return RFS_OK;      
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??RFS_carrega_bloco_controle_3
    103            
    104            return RFS_CHECKSUM_ERROR;
   \                     ??RFS_carrega_bloco_controle_2:
   \   00000040   0x2003             MOVS     R0,#+3
   \                     ??RFS_carrega_bloco_controle_3:
   \   00000042   0xB00A             ADD      SP,SP,#+40
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    105          }
    106          /***********************************************************************************
    107          *       Descrição       :       Cria um novo arquivo na tabela de arquivos
    108          *                               do sistema
    109          *       Parametros      :       nenhum
    110          *       Retorno         :       nenhum
    111          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          eRFS_RESULT RFS_create_file(unsigned char position,char nome[8],char ext[3]){
   \                     RFS_create_file:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    113            sRECORD_FILE_SYSTEM file;
    114              
    115            file.state = FREE_FOR_WRITE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0008      STRB     R0,[SP, #+8]
    116            file.block_size = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9003             STR      R0,[SP, #+12]
    117            file.external_flash_start = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9004             STR      R0,[SP, #+16]
    118            RTC_getValue(&file.hour,&file.minute,&file.second,&file.hour,&file.month,&file.year);
   \   00000016   0xA807             ADD      R0,SP,#+28
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0xA806             ADD      R0,SP,#+24
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAB05             ADD      R3,SP,#+20
   \   00000020   0xF10D 0x0216      ADD      R2,SP,#+22
   \   00000024   0xF10D 0x0115      ADD      R1,SP,#+21
   \   00000028   0xA805             ADD      R0,SP,#+20
   \   0000002A   0x.... 0x....      BL       RTC_getValue
    119            memcpy(file.file_name,nome,8);
   \   0000002E   0x2208             MOVS     R2,#+8
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xA808             ADD      R0,SP,#+32
   \   00000034   0x.... 0x....      BL       memcpy
    120            memcpy(file.file_extension,ext,3);  
   \   00000038   0x2203             MOVS     R2,#+3
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0xA80A             ADD      R0,SP,#+40
   \   0000003E   0x.... 0x....      BL       memcpy
    121                                                                           
    122            
    123            return RFS_OK;  
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xB00B             ADD      SP,SP,#+44
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return
    124          }
    125          /***********************************************************************************
    126          *       Descrição       :       Deleta um arquivo da tabela de arquivos
    127          *                               do sistema
    128          *       Parametros      :       nenhum
    129          *       Retorno         :       (eRFS_RESULT) resultado da operação
    130          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          eRFS_RESULT RFS_delete_file(unsigned char position){
    132            
    133            
    134            return RFS_OK;  
   \                     RFS_delete_file:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    135          }
    136          /***********************************************************************************
    137          *       Descrição       :       Carrega 
    138          *       Parametros      :       (unsigned char) indice do arquivo
    139          *       Retorno         :       (eRFS_RESULT) resultado da operação
    140          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          eRFS_RESULT RFS_open_file_for_write(unsigned char indice){
    142            
    143            
    144            return RFS_OK;  
   \                     RFS_open_file_for_write:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    145          }
    146          /***********************************************************************************
    147          *       Descrição       :       Posiciona o ponteiro de leitura/escrita
    148          *                               no início do arquivo
    149          *       Parametros      :       nenhum
    150          *       Retorno         :       (eRFS_RESULT) resultado da operação
    151          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          eRFS_RESULT RFS_file_seek(void){
    153            
    154            
    155            return RFS_OK;  
   \                     RFS_file_seek:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    156          }
    157          /***********************************************************************************
    158          *       Descrição       :       Adiciona um texto ao final do arquivo
    159          *       Parametros      :       (unsigned char*) ponteiro para os dados
    160          *                               (unsigned short int) tamanho do bloco
    161          *       Retorno         :       (eRFS_RESULT) resultado da operação
    162          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    163          eRFS_RESULT RFS_append_file(unsigned char *pData,unsigned short int size){
    164            
    165            
    166            
    167            return RFS_OK;  
   \                     RFS_append_file:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    168          }
    169          /***********************************************************************************
    170          *       Descrição       :       Fecha o arquivo atual
    171          *       Parametros      :       nenhum
    172          *       Retorno         :       nenhum
    173          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    174          eRFS_RESULT RFS_close_file(void){
    175            
    176            
    177            return RFS_OK;  
   \                     RFS_close_file:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    178          }
    179          /***********************************************************************************
    180          *       Descrição       :       Marca o arquivo atual como apenas leitura
    181          *       Parametros      :       (unsigned char) indice
    182          *       Retorno         :       (eRFS_RESULT) resultado da operação
    183          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    184          eRFS_RESULT RFS_close_for_write(unsigned char indice){
    185            
    186            
    187            return RFS_OK;
   \                     RFS_close_for_write:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    188          }
    189          /***********************************************************************************
    190          *       Descrição       :       Faz o cálculo do checksum do arquivo
    191          *       Parametros      :       (unsigned char*) ponteiro para o buffer de dados
    192          *                               (unsigned short int) tamanho
    193          *       Retorno         :       (unsigned char) checksum
    194          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    195          unsigned char RFS_calcula_checksum(unsigned char *pData,unsigned short int tamanho){
   \                     RFS_calcula_checksum:
   \   00000000   0xB410             PUSH     {R4}
    196            unsigned char soma=0xFE;  
   \   00000002   0x22FE             MOVS     R2,#+254
    197            
    198            for(unsigned short int i=0;i<tamanho;i++)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??RFS_calcula_checksum_0
    199              soma+=pData[i];
   \                     ??RFS_calcula_checksum_1:
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??RFS_calcula_checksum_0:
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??RFS_calcula_checksum_1
    200            
    201            return soma;
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    202          }
    203          /***********************************************************************************
    204          *       Fim do arquivo
    205          ***********************************************************************************/
    206          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RFS_append_file
       4   RFS_calcula_checksum
      48   RFS_carrega_bloco_controle
        48   -> MEMORYWRAPPER_readBytes
        48   -> RFS_calcula_checksum
        48   -> RFS_resolve_endereco
       0   RFS_close_file
       0   RFS_close_for_write
      56   RFS_create_file
        56   -> RTC_getValue
        56   -> memcpy
       0   RFS_delete_file
       0   RFS_file_seek
      48   RFS_grava_bloco_controle
        48   -> MEMORYWRAPPER_writeBytes
        48   -> RFS_calcula_checksum
        48   -> RFS_resolve_endereco
       0   RFS_open_file_for_write
       0   RFS_resolve_endereco
       8   memcpy
         8   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  RFS_append_file
      32  RFS_calcula_checksum
      70  RFS_carrega_bloco_controle
       4  RFS_close_file
       4  RFS_close_for_write
      72  RFS_create_file
       4  RFS_delete_file
       4  RFS_file_seek
      62  RFS_grava_bloco_controle
       4  RFS_open_file_for_write
      12  RFS_resolve_endereco
      14  memcpy

 
 286 bytes in section .text
 
 272 bytes of CODE memory (+ 14 bytes shared)

Errors: none
Warnings: none
